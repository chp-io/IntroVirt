/*
 * Copyright 2021 Assured Information Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <introvirt/windows/common/WinError.hh>

namespace introvirt {
namespace windows {

static const std::string ERROR_SUCCESS_STR("ERROR_SUCCESS");
static const std::string ERROR_INVALID_FUNCTION_STR("ERROR_INVALID_FUNCTION");
static const std::string ERROR_FILE_NOT_FOUND_STR("ERROR_FILE_NOT_FOUND");
static const std::string ERROR_PATH_NOT_FOUND_STR("ERROR_PATH_NOT_FOUND");
static const std::string ERROR_TOO_MANY_OPEN_FILES_STR("ERROR_TOO_MANY_OPEN_FILES");
static const std::string ERROR_ACCESS_DENIED_STR("ERROR_ACCESS_DENIED");
static const std::string ERROR_INVALID_HANDLE_STR("ERROR_INVALID_HANDLE");
static const std::string ERROR_ARENA_TRASHED_STR("ERROR_ARENA_TRASHED");
static const std::string ERROR_NOT_ENOUGH_MEMORY_STR("ERROR_NOT_ENOUGH_MEMORY");
static const std::string ERROR_INVALID_BLOCK_STR("ERROR_INVALID_BLOCK");
static const std::string ERROR_BAD_ENVIRONMENT_STR("ERROR_BAD_ENVIRONMENT");
static const std::string ERROR_BAD_FORMAT_STR("ERROR_BAD_FORMAT");
static const std::string ERROR_INVALID_ACCESS_STR("ERROR_INVALID_ACCESS");
static const std::string ERROR_INVALID_DATA_STR("ERROR_INVALID_DATA");
static const std::string ERROR_OUTOFMEMORY_STR("ERROR_OUTOFMEMORY");
static const std::string ERROR_INVALID_DRIVE_STR("ERROR_INVALID_DRIVE");
static const std::string ERROR_CURRENT_DIRECTORY_STR("ERROR_CURRENT_DIRECTORY");
static const std::string ERROR_NOT_SAME_DEVICE_STR("ERROR_NOT_SAME_DEVICE");
static const std::string ERROR_NO_MORE_FILES_STR("ERROR_NO_MORE_FILES");
static const std::string ERROR_WRITE_PROTECT_STR("ERROR_WRITE_PROTECT");
static const std::string ERROR_BAD_UNIT_STR("ERROR_BAD_UNIT");
static const std::string ERROR_NOT_READY_STR("ERROR_NOT_READY");
static const std::string ERROR_BAD_COMMAND_STR("ERROR_BAD_COMMAND");
static const std::string ERROR_CRC_STR("ERROR_CRC");
static const std::string ERROR_BAD_LENGTH_STR("ERROR_BAD_LENGTH");
static const std::string ERROR_SEEK_STR("ERROR_SEEK");
static const std::string ERROR_NOT_DOS_DISK_STR("ERROR_NOT_DOS_DISK");
static const std::string ERROR_SECTOR_NOT_FOUND_STR("ERROR_SECTOR_NOT_FOUND");
static const std::string ERROR_OUT_OF_PAPER_STR("ERROR_OUT_OF_PAPER");
static const std::string ERROR_WRITE_FAULT_STR("ERROR_WRITE_FAULT");
static const std::string ERROR_READ_FAULT_STR("ERROR_READ_FAULT");
static const std::string ERROR_GEN_FAILURE_STR("ERROR_GEN_FAILURE");
static const std::string ERROR_SHARING_VIOLATION_STR("ERROR_SHARING_VIOLATION");
static const std::string ERROR_LOCK_VIOLATION_STR("ERROR_LOCK_VIOLATION");
static const std::string ERROR_WRONG_DISK_STR("ERROR_WRONG_DISK");
static const std::string ERROR_FCB_UNAVAILABLE_STR("ERROR_FCB_UNAVAILABLE");
static const std::string ERROR_SHARING_BUFFER_EXCEEDED_STR("ERROR_SHARING_BUFFER_EXCEEDED");
static const std::string ERROR_HANDLE_EOF_STR("ERROR_HANDLE_EOF");
static const std::string ERROR_HANDLE_DISK_FULL_STR("ERROR_HANDLE_DISK_FULL");
static const std::string ERROR_NOT_SUPPORTED_STR("ERROR_NOT_SUPPORTED");
static const std::string ERROR_REM_NOT_LIST_STR("ERROR_REM_NOT_LIST");
static const std::string ERROR_DUP_NAME_STR("ERROR_DUP_NAME");
static const std::string ERROR_BAD_NETPATH_STR("ERROR_BAD_NETPATH");
static const std::string ERROR_NETWORK_BUSY_STR("ERROR_NETWORK_BUSY");
static const std::string ERROR_DEV_NOT_EXIST_STR("ERROR_DEV_NOT_EXIST");
static const std::string ERROR_TOO_MANY_CMDS_STR("ERROR_TOO_MANY_CMDS");
static const std::string ERROR_ADAP_HDW_ERR_STR("ERROR_ADAP_HDW_ERR");
static const std::string ERROR_BAD_NET_RESP_STR("ERROR_BAD_NET_RESP");
static const std::string ERROR_UNEXP_NET_ERR_STR("ERROR_UNEXP_NET_ERR");
static const std::string ERROR_BAD_REM_ADAP_STR("ERROR_BAD_REM_ADAP");
static const std::string ERROR_PRINTQ_FULL_STR("ERROR_PRINTQ_FULL");
static const std::string ERROR_NO_SPOOL_SPACE_STR("ERROR_NO_SPOOL_SPACE");
static const std::string ERROR_PRINT_CANCELLED_STR("ERROR_PRINT_CANCELLED");
static const std::string ERROR_NETNAME_DELETED_STR("ERROR_NETNAME_DELETED");
static const std::string ERROR_NETWORK_ACCESS_DENIED_STR("ERROR_NETWORK_ACCESS_DENIED");
static const std::string ERROR_BAD_DEV_TYPE_STR("ERROR_BAD_DEV_TYPE");
static const std::string ERROR_BAD_NET_NAME_STR("ERROR_BAD_NET_NAME");
static const std::string ERROR_TOO_MANY_NAMES_STR("ERROR_TOO_MANY_NAMES");
static const std::string ERROR_TOO_MANY_SESS_STR("ERROR_TOO_MANY_SESS");
static const std::string ERROR_SHARING_PAUSED_STR("ERROR_SHARING_PAUSED");
static const std::string ERROR_REQ_NOT_ACCEP_STR("ERROR_REQ_NOT_ACCEP");
static const std::string ERROR_REDIR_PAUSED_STR("ERROR_REDIR_PAUSED");
static const std::string ERROR_FILE_EXISTS_STR("ERROR_FILE_EXISTS");
static const std::string ERROR_CANNOT_MAKE_STR("ERROR_CANNOT_MAKE");
static const std::string ERROR_FAIL_I24_STR("ERROR_FAIL_I24");
static const std::string ERROR_OUT_OF_STRUCTURES_STR("ERROR_OUT_OF_STRUCTURES");
static const std::string ERROR_ALREADY_ASSIGNED_STR("ERROR_ALREADY_ASSIGNED");
static const std::string ERROR_INVALID_PASSWORD_STR("ERROR_INVALID_PASSWORD");
static const std::string ERROR_INVALID_PARAMETER_STR("ERROR_INVALID_PARAMETER");
static const std::string ERROR_NET_WRITE_FAULT_STR("ERROR_NET_WRITE_FAULT");
static const std::string ERROR_NO_PROC_SLOTS_STR("ERROR_NO_PROC_SLOTS");
static const std::string ERROR_TOO_MANY_SEMAPHORES_STR("ERROR_TOO_MANY_SEMAPHORES");
static const std::string ERROR_EXCL_SEM_ALREADY_OWNED_STR("ERROR_EXCL_SEM_ALREADY_OWNED");
static const std::string ERROR_SEM_IS_SET_STR("ERROR_SEM_IS_SET");
static const std::string ERROR_TOO_MANY_SEM_REQUESTS_STR("ERROR_TOO_MANY_SEM_REQUESTS");
static const std::string ERROR_INVALID_AT_INTERRUPT_TIME_STR("ERROR_INVALID_AT_INTERRUPT_TIME");
static const std::string ERROR_SEM_OWNER_DIED_STR("ERROR_SEM_OWNER_DIED");
static const std::string ERROR_SEM_USER_LIMIT_STR("ERROR_SEM_USER_LIMIT");
static const std::string ERROR_DISK_CHANGE_STR("ERROR_DISK_CHANGE");
static const std::string ERROR_DRIVE_LOCKED_STR("ERROR_DRIVE_LOCKED");
static const std::string ERROR_BROKEN_PIPE_STR("ERROR_BROKEN_PIPE");
static const std::string ERROR_OPEN_FAILED_STR("ERROR_OPEN_FAILED");
static const std::string ERROR_BUFFER_OVERFLOW_STR("ERROR_BUFFER_OVERFLOW");
static const std::string ERROR_DISK_FULL_STR("ERROR_DISK_FULL");
static const std::string ERROR_NO_MORE_SEARCH_HANDLES_STR("ERROR_NO_MORE_SEARCH_HANDLES");
static const std::string ERROR_INVALID_TARGET_HANDLE_STR("ERROR_INVALID_TARGET_HANDLE");
static const std::string ERROR_INVALID_CATEGORY_STR("ERROR_INVALID_CATEGORY");
static const std::string ERROR_INVALID_VERIFY_SWITCH_STR("ERROR_INVALID_VERIFY_SWITCH");
static const std::string ERROR_BAD_DRIVER_LEVEL_STR("ERROR_BAD_DRIVER_LEVEL");
static const std::string ERROR_CALL_NOT_IMPLEMENTED_STR("ERROR_CALL_NOT_IMPLEMENTED");
static const std::string ERROR_SEM_TIMEOUT_STR("ERROR_SEM_TIMEOUT");
static const std::string ERROR_INSUFFICIENT_BUFFER_STR("ERROR_INSUFFICIENT_BUFFER");
static const std::string ERROR_INVALID_NAME_STR("ERROR_INVALID_NAME");
static const std::string ERROR_INVALID_LEVEL_STR("ERROR_INVALID_LEVEL");
static const std::string ERROR_NO_VOLUME_LABEL_STR("ERROR_NO_VOLUME_LABEL");
static const std::string ERROR_MOD_NOT_FOUND_STR("ERROR_MOD_NOT_FOUND");
static const std::string ERROR_PROC_NOT_FOUND_STR("ERROR_PROC_NOT_FOUND");
static const std::string ERROR_WAIT_NO_CHILDREN_STR("ERROR_WAIT_NO_CHILDREN");
static const std::string ERROR_CHILD_NOT_COMPLETE_STR("ERROR_CHILD_NOT_COMPLETE");
static const std::string ERROR_DIRECT_ACCESS_HANDLE_STR("ERROR_DIRECT_ACCESS_HANDLE");
static const std::string ERROR_NEGATIVE_SEEK_STR("ERROR_NEGATIVE_SEEK");
static const std::string ERROR_SEEK_ON_DEVICE_STR("ERROR_SEEK_ON_DEVICE");
static const std::string ERROR_IS_JOIN_TARGET_STR("ERROR_IS_JOIN_TARGET");
static const std::string ERROR_IS_JOINED_STR("ERROR_IS_JOINED");
static const std::string ERROR_IS_SUBSTED_STR("ERROR_IS_SUBSTED");
static const std::string ERROR_NOT_JOINED_STR("ERROR_NOT_JOINED");
static const std::string ERROR_NOT_SUBSTED_STR("ERROR_NOT_SUBSTED");
static const std::string ERROR_JOIN_TO_JOIN_STR("ERROR_JOIN_TO_JOIN");
static const std::string ERROR_SUBST_TO_SUBST_STR("ERROR_SUBST_TO_SUBST");
static const std::string ERROR_JOIN_TO_SUBST_STR("ERROR_JOIN_TO_SUBST");
static const std::string ERROR_SUBST_TO_JOIN_STR("ERROR_SUBST_TO_JOIN");
static const std::string ERROR_BUSY_DRIVE_STR("ERROR_BUSY_DRIVE");
static const std::string ERROR_SAME_DRIVE_STR("ERROR_SAME_DRIVE");
static const std::string ERROR_DIR_NOT_ROOT_STR("ERROR_DIR_NOT_ROOT");
static const std::string ERROR_DIR_NOT_EMPTY_STR("ERROR_DIR_NOT_EMPTY");
static const std::string ERROR_IS_SUBST_PATH_STR("ERROR_IS_SUBST_PATH");
static const std::string ERROR_IS_JOIN_PATH_STR("ERROR_IS_JOIN_PATH");
static const std::string ERROR_PATH_BUSY_STR("ERROR_PATH_BUSY");
static const std::string ERROR_IS_SUBST_TARGET_STR("ERROR_IS_SUBST_TARGET");
static const std::string ERROR_SYSTEM_TRACE_STR("ERROR_SYSTEM_TRACE");
static const std::string ERROR_INVALID_EVENT_COUNT_STR("ERROR_INVALID_EVENT_COUNT");
static const std::string ERROR_TOO_MANY_MUXWAITERS_STR("ERROR_TOO_MANY_MUXWAITERS");
static const std::string ERROR_INVALID_LIST_FORMAT_STR("ERROR_INVALID_LIST_FORMAT");
static const std::string ERROR_LABEL_TOO_LONG_STR("ERROR_LABEL_TOO_LONG");
static const std::string ERROR_TOO_MANY_TCBS_STR("ERROR_TOO_MANY_TCBS");
static const std::string ERROR_SIGNAL_REFUSED_STR("ERROR_SIGNAL_REFUSED");
static const std::string ERROR_DISCARDED_STR("ERROR_DISCARDED");
static const std::string ERROR_NOT_LOCKED_STR("ERROR_NOT_LOCKED");
static const std::string ERROR_BAD_THREADID_ADDR_STR("ERROR_BAD_THREADID_ADDR");
static const std::string ERROR_BAD_ARGUMENTS_STR("ERROR_BAD_ARGUMENTS");
static const std::string ERROR_BAD_PATHNAME_STR("ERROR_BAD_PATHNAME");
static const std::string ERROR_SIGNAL_PENDING_STR("ERROR_SIGNAL_PENDING");
static const std::string ERROR_MAX_THRDS_REACHED_STR("ERROR_MAX_THRDS_REACHED");
static const std::string ERROR_LOCK_FAILED_STR("ERROR_LOCK_FAILED");
static const std::string ERROR_BUSY_STR("ERROR_BUSY");
static const std::string ERROR_DEVICE_SUPPORT_IN_PROGRESS_STR("ERROR_DEVICE_SUPPORT_IN_PROGRESS");
static const std::string ERROR_CANCEL_VIOLATION_STR("ERROR_CANCEL_VIOLATION");
static const std::string ERROR_ATOMIC_LOCKS_NOT_SUPPORTED_STR("ERROR_ATOMIC_LOCKS_NOT_SUPPORTED");
static const std::string ERROR_INVALID_SEGMENT_NUMBER_STR("ERROR_INVALID_SEGMENT_NUMBER");
static const std::string ERROR_INVALID_ORDINAL_STR("ERROR_INVALID_ORDINAL");
static const std::string ERROR_ALREADY_EXISTS_STR("ERROR_ALREADY_EXISTS");
static const std::string ERROR_INVALID_FLAG_NUMBER_STR("ERROR_INVALID_FLAG_NUMBER");
static const std::string ERROR_SEM_NOT_FOUND_STR("ERROR_SEM_NOT_FOUND");
static const std::string ERROR_INVALID_STARTING_CODESEG_STR("ERROR_INVALID_STARTING_CODESEG");
static const std::string ERROR_INVALID_STACKSEG_STR("ERROR_INVALID_STACKSEG");
static const std::string ERROR_INVALID_MODULETYPE_STR("ERROR_INVALID_MODULETYPE");
static const std::string ERROR_INVALID_EXE_SIGNATURE_STR("ERROR_INVALID_EXE_SIGNATURE");
static const std::string ERROR_EXE_MARKED_INVALID_STR("ERROR_EXE_MARKED_INVALID");
static const std::string ERROR_BAD_EXE_FORMAT_STR("ERROR_BAD_EXE_FORMAT");
static const std::string ERROR_ITERATED_DATA_EXCEEDS_64k_STR("ERROR_ITERATED_DATA_EXCEEDS_64k");
static const std::string ERROR_INVALID_MINALLOCSIZE_STR("ERROR_INVALID_MINALLOCSIZE");
static const std::string ERROR_DYNLINK_FROM_INVALID_RING_STR("ERROR_DYNLINK_FROM_INVALID_RING");
static const std::string ERROR_IOPL_NOT_ENABLED_STR("ERROR_IOPL_NOT_ENABLED");
static const std::string ERROR_INVALID_SEGDPL_STR("ERROR_INVALID_SEGDPL");
static const std::string ERROR_AUTODATASEG_EXCEEDS_64k_STR("ERROR_AUTODATASEG_EXCEEDS_64k");
static const std::string ERROR_RING2SEG_MUST_BE_MOVABLE_STR("ERROR_RING2SEG_MUST_BE_MOVABLE");
static const std::string ERROR_RELOC_CHAIN_XEEDS_SEGLIM_STR("ERROR_RELOC_CHAIN_XEEDS_SEGLIM");
static const std::string ERROR_INFLOOP_IN_RELOC_CHAIN_STR("ERROR_INFLOOP_IN_RELOC_CHAIN");
static const std::string ERROR_ENVVAR_NOT_FOUND_STR("ERROR_ENVVAR_NOT_FOUND");
static const std::string ERROR_NO_SIGNAL_SENT_STR("ERROR_NO_SIGNAL_SENT");
static const std::string ERROR_FILENAME_EXCED_RANGE_STR("ERROR_FILENAME_EXCED_RANGE");
static const std::string ERROR_RING2_STACK_IN_USE_STR("ERROR_RING2_STACK_IN_USE");
static const std::string ERROR_META_EXPANSION_TOO_LONG_STR("ERROR_META_EXPANSION_TOO_LONG");
static const std::string ERROR_INVALID_SIGNAL_NUMBER_STR("ERROR_INVALID_SIGNAL_NUMBER");
static const std::string ERROR_THREAD_1_INACTIVE_STR("ERROR_THREAD_1_INACTIVE");
static const std::string ERROR_LOCKED_STR("ERROR_LOCKED");
static const std::string ERROR_TOO_MANY_MODULES_STR("ERROR_TOO_MANY_MODULES");
static const std::string ERROR_NESTING_NOT_ALLOWED_STR("ERROR_NESTING_NOT_ALLOWED");
static const std::string ERROR_EXE_MACHINE_TYPE_MISMATCH_STR("ERROR_EXE_MACHINE_TYPE_MISMATCH");
static const std::string
    ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY_STR("ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY");
static const std::string ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY_STR(
    "ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY");
static const std::string ERROR_FILE_CHECKED_OUT_STR("ERROR_FILE_CHECKED_OUT");
static const std::string ERROR_CHECKOUT_REQUIRED_STR("ERROR_CHECKOUT_REQUIRED");
static const std::string ERROR_BAD_FILE_TYPE_STR("ERROR_BAD_FILE_TYPE");
static const std::string ERROR_FILE_TOO_LARGE_STR("ERROR_FILE_TOO_LARGE");
static const std::string ERROR_FORMS_AUTH_REQUIRED_STR("ERROR_FORMS_AUTH_REQUIRED");
static const std::string ERROR_VIRUS_INFECTED_STR("ERROR_VIRUS_INFECTED");
static const std::string ERROR_VIRUS_DELETED_STR("ERROR_VIRUS_DELETED");
static const std::string ERROR_PIPE_LOCAL_STR("ERROR_PIPE_LOCAL");
static const std::string ERROR_BAD_PIPE_STR("ERROR_BAD_PIPE");
static const std::string ERROR_PIPE_BUSY_STR("ERROR_PIPE_BUSY");
static const std::string ERROR_NO_DATA_STR("ERROR_NO_DATA");
static const std::string ERROR_PIPE_NOT_CONNECTED_STR("ERROR_PIPE_NOT_CONNECTED");
static const std::string ERROR_MORE_DATA_STR("ERROR_MORE_DATA");
static const std::string ERROR_NO_WORK_DONE_STR("ERROR_NO_WORK_DONE");
static const std::string ERROR_VC_DISCONNECTED_STR("ERROR_VC_DISCONNECTED");
static const std::string ERROR_INVALID_EA_NAME_STR("ERROR_INVALID_EA_NAME");
static const std::string ERROR_EA_LIST_INCONSISTENT_STR("ERROR_EA_LIST_INCONSISTENT");
static const std::string WAIT_TIMEOUT_STR("WAIT_TIMEOUT");
static const std::string ERROR_NO_MORE_ITEMS_STR("ERROR_NO_MORE_ITEMS");
static const std::string ERROR_CANNOT_COPY_STR("ERROR_CANNOT_COPY");
static const std::string ERROR_DIRECTORY_STR("ERROR_DIRECTORY");
static const std::string ERROR_EAS_DIDNT_FIT_STR("ERROR_EAS_DIDNT_FIT");
static const std::string ERROR_EA_FILE_CORRUPT_STR("ERROR_EA_FILE_CORRUPT");
static const std::string ERROR_EA_TABLE_FULL_STR("ERROR_EA_TABLE_FULL");
static const std::string ERROR_INVALID_EA_HANDLE_STR("ERROR_INVALID_EA_HANDLE");
static const std::string ERROR_EAS_NOT_SUPPORTED_STR("ERROR_EAS_NOT_SUPPORTED");
static const std::string ERROR_NOT_OWNER_STR("ERROR_NOT_OWNER");
static const std::string ERROR_TOO_MANY_POSTS_STR("ERROR_TOO_MANY_POSTS");
static const std::string ERROR_PARTIAL_COPY_STR("ERROR_PARTIAL_COPY");
static const std::string ERROR_OPLOCK_NOT_GRANTED_STR("ERROR_OPLOCK_NOT_GRANTED");
static const std::string ERROR_INVALID_OPLOCK_PROTOCOL_STR("ERROR_INVALID_OPLOCK_PROTOCOL");
static const std::string ERROR_DISK_TOO_FRAGMENTED_STR("ERROR_DISK_TOO_FRAGMENTED");
static const std::string ERROR_DELETE_PENDING_STR("ERROR_DELETE_PENDING");
static const std::string ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING_STR(
    "ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING");
static const std::string
    ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME_STR("ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME");
static const std::string
    ERROR_SECURITY_STREAM_IS_INCONSISTENT_STR("ERROR_SECURITY_STREAM_IS_INCONSISTENT");
static const std::string ERROR_INVALID_LOCK_RANGE_STR("ERROR_INVALID_LOCK_RANGE");
static const std::string ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT_STR("ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT");
static const std::string
    ERROR_NOTIFICATION_GUID_ALREADY_DEFINED_STR("ERROR_NOTIFICATION_GUID_ALREADY_DEFINED");
static const std::string ERROR_INVALID_EXCEPTION_HANDLER_STR("ERROR_INVALID_EXCEPTION_HANDLER");
static const std::string ERROR_DUPLICATE_PRIVILEGES_STR("ERROR_DUPLICATE_PRIVILEGES");
static const std::string ERROR_NO_RANGES_PROCESSED_STR("ERROR_NO_RANGES_PROCESSED");
static const std::string ERROR_NOT_ALLOWED_ON_SYSTEM_FILE_STR("ERROR_NOT_ALLOWED_ON_SYSTEM_FILE");
static const std::string ERROR_DISK_RESOURCES_EXHAUSTED_STR("ERROR_DISK_RESOURCES_EXHAUSTED");
static const std::string ERROR_INVALID_TOKEN_STR("ERROR_INVALID_TOKEN");
static const std::string
    ERROR_DEVICE_FEATURE_NOT_SUPPORTED_STR("ERROR_DEVICE_FEATURE_NOT_SUPPORTED");
static const std::string ERROR_MR_MID_NOT_FOUND_STR("ERROR_MR_MID_NOT_FOUND");
static const std::string ERROR_SCOPE_NOT_FOUND_STR("ERROR_SCOPE_NOT_FOUND");
static const std::string ERROR_UNDEFINED_SCOPE_STR("ERROR_UNDEFINED_SCOPE");
static const std::string ERROR_INVALID_CAP_STR("ERROR_INVALID_CAP");
static const std::string ERROR_DEVICE_UNREACHABLE_STR("ERROR_DEVICE_UNREACHABLE");
static const std::string ERROR_DEVICE_NO_RESOURCES_STR("ERROR_DEVICE_NO_RESOURCES");
static const std::string ERROR_DATA_CHECKSUM_ERROR_STR("ERROR_DATA_CHECKSUM_ERROR");
static const std::string
    ERROR_INTERMIXED_KERNEL_EA_OPERATION_STR("ERROR_INTERMIXED_KERNEL_EA_OPERATION");
static const std::string
    ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED_STR("ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED");
static const std::string ERROR_OFFSET_ALIGNMENT_VIOLATION_STR("ERROR_OFFSET_ALIGNMENT_VIOLATION");
static const std::string
    ERROR_INVALID_FIELD_IN_PARAMETER_LIST_STR("ERROR_INVALID_FIELD_IN_PARAMETER_LIST");
static const std::string ERROR_OPERATION_IN_PROGRESS_STR("ERROR_OPERATION_IN_PROGRESS");
static const std::string ERROR_BAD_DEVICE_PATH_STR("ERROR_BAD_DEVICE_PATH");
static const std::string ERROR_TOO_MANY_DESCRIPTORS_STR("ERROR_TOO_MANY_DESCRIPTORS");
static const std::string ERROR_SCRUB_DATA_DISABLED_STR("ERROR_SCRUB_DATA_DISABLED");
static const std::string ERROR_NOT_REDUNDANT_STORAGE_STR("ERROR_NOT_REDUNDANT_STORAGE");
static const std::string ERROR_RESIDENT_FILE_NOT_SUPPORTED_STR("ERROR_RESIDENT_FILE_NOT_SUPPORTED");
static const std::string
    ERROR_COMPRESSED_FILE_NOT_SUPPORTED_STR("ERROR_COMPRESSED_FILE_NOT_SUPPORTED");
static const std::string ERROR_DIRECTORY_NOT_SUPPORTED_STR("ERROR_DIRECTORY_NOT_SUPPORTED");
static const std::string ERROR_NOT_READ_FROM_COPY_STR("ERROR_NOT_READ_FROM_COPY");
static const std::string ERROR_FT_WRITE_FAILURE_STR("ERROR_FT_WRITE_FAILURE");
static const std::string ERROR_FT_DI_SCAN_REQUIRED_STR("ERROR_FT_DI_SCAN_REQUIRED");
static const std::string ERROR_INVALID_KERNEL_INFO_VERSION_STR("ERROR_INVALID_KERNEL_INFO_VERSION");
static const std::string ERROR_INVALID_PEP_INFO_VERSION_STR("ERROR_INVALID_PEP_INFO_VERSION");
static const std::string ERROR_FAIL_NOACTION_REBOOT_STR("ERROR_FAIL_NOACTION_REBOOT");
static const std::string ERROR_FAIL_SHUTDOWN_STR("ERROR_FAIL_SHUTDOWN");
static const std::string ERROR_FAIL_RESTART_STR("ERROR_FAIL_RESTART");
static const std::string ERROR_MAX_SESSIONS_REACHED_STR("ERROR_MAX_SESSIONS_REACHED");
static const std::string ERROR_INVALID_ADDRESS_STR("ERROR_INVALID_ADDRESS");
static const std::string ERROR_USER_PROFILE_LOAD_STR("ERROR_USER_PROFILE_LOAD");
static const std::string ERROR_ARITHMETIC_OVERFLOW_STR("ERROR_ARITHMETIC_OVERFLOW");
static const std::string ERROR_PIPE_CONNECTED_STR("ERROR_PIPE_CONNECTED");
static const std::string ERROR_PIPE_LISTENING_STR("ERROR_PIPE_LISTENING");
static const std::string ERROR_INVALID_LDT_SIZE_STR("ERROR_INVALID_LDT_SIZE");
static const std::string ERROR_INVALID_LDT_OFFSET_STR("ERROR_INVALID_LDT_OFFSET");
static const std::string ERROR_INVALID_LDT_DESCRIPTOR_STR("ERROR_INVALID_LDT_DESCRIPTOR");
static const std::string ERROR_TOO_MANY_THREADS_STR("ERROR_TOO_MANY_THREADS");
static const std::string ERROR_THREAD_NOT_IN_PROCESS_STR("ERROR_THREAD_NOT_IN_PROCESS");
static const std::string ERROR_PAGEFILE_QUOTA_EXCEEDED_STR("ERROR_PAGEFILE_QUOTA_EXCEEDED");
static const std::string ERROR_LOGON_SERVER_CONFLICT_STR("ERROR_LOGON_SERVER_CONFLICT");
static const std::string ERROR_SYNCHRONIZATION_REQUIRED_STR("ERROR_SYNCHRONIZATION_REQUIRED");
static const std::string ERROR_NET_OPEN_FAILED_STR("ERROR_NET_OPEN_FAILED");
static const std::string ERROR_IO_PRIVILEGE_FAILED_STR("ERROR_IO_PRIVILEGE_FAILED");
static const std::string ERROR_CONTROL_C_EXIT_STR("ERROR_CONTROL_C_EXIT");
static const std::string ERROR_MISSING_SYSTEMFILE_STR("ERROR_MISSING_SYSTEMFILE");
static const std::string ERROR_UNHANDLED_EXCEPTION_STR("ERROR_UNHANDLED_EXCEPTION");
static const std::string ERROR_APP_INIT_FAILURE_STR("ERROR_APP_INIT_FAILURE");
static const std::string ERROR_PAGEFILE_CREATE_FAILED_STR("ERROR_PAGEFILE_CREATE_FAILED");
static const std::string ERROR_INVALID_IMAGE_HASH_STR("ERROR_INVALID_IMAGE_HASH");
static const std::string ERROR_NO_PAGEFILE_STR("ERROR_NO_PAGEFILE");
static const std::string ERROR_ILLEGAL_FLOAT_CONTEXT_STR("ERROR_ILLEGAL_FLOAT_CONTEXT");
static const std::string ERROR_NO_EVENT_PAIR_STR("ERROR_NO_EVENT_PAIR");
static const std::string ERROR_DOMAIN_CTRLR_CONFIG_ERROR_STR("ERROR_DOMAIN_CTRLR_CONFIG_ERROR");
static const std::string ERROR_ILLEGAL_CHARACTER_STR("ERROR_ILLEGAL_CHARACTER");
static const std::string ERROR_UNDEFINED_CHARACTER_STR("ERROR_UNDEFINED_CHARACTER");
static const std::string ERROR_FLOPPY_VOLUME_STR("ERROR_FLOPPY_VOLUME");
static const std::string
    ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT_STR("ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT");
static const std::string ERROR_BACKUP_CONTROLLER_STR("ERROR_BACKUP_CONTROLLER");
static const std::string ERROR_MUTANT_LIMIT_EXCEEDED_STR("ERROR_MUTANT_LIMIT_EXCEEDED");
static const std::string ERROR_FS_DRIVER_REQUIRED_STR("ERROR_FS_DRIVER_REQUIRED");
static const std::string ERROR_CANNOT_LOAD_REGISTRY_FILE_STR("ERROR_CANNOT_LOAD_REGISTRY_FILE");
static const std::string ERROR_DEBUG_ATTACH_FAILED_STR("ERROR_DEBUG_ATTACH_FAILED");
static const std::string ERROR_SYSTEM_PROCESS_TERMINATED_STR("ERROR_SYSTEM_PROCESS_TERMINATED");
static const std::string ERROR_DATA_NOT_ACCEPTED_STR("ERROR_DATA_NOT_ACCEPTED");
static const std::string ERROR_VDM_HARD_ERROR_STR("ERROR_VDM_HARD_ERROR");
static const std::string ERROR_DRIVER_CANCEL_TIMEOUT_STR("ERROR_DRIVER_CANCEL_TIMEOUT");
static const std::string ERROR_REPLY_MESSAGE_MISMATCH_STR("ERROR_REPLY_MESSAGE_MISMATCH");
static const std::string ERROR_LOST_WRITEBEHIND_DATA_STR("ERROR_LOST_WRITEBEHIND_DATA");
static const std::string
    ERROR_CLIENT_SERVER_PARAMETERS_INVALID_STR("ERROR_CLIENT_SERVER_PARAMETERS_INVALID");
static const std::string ERROR_NOT_TINY_STREAM_STR("ERROR_NOT_TINY_STREAM");
static const std::string ERROR_STACK_OVERFLOW_READ_STR("ERROR_STACK_OVERFLOW_READ");
static const std::string ERROR_CONVERT_TO_LARGE_STR("ERROR_CONVERT_TO_LARGE");
static const std::string ERROR_FOUND_OUT_OF_SCOPE_STR("ERROR_FOUND_OUT_OF_SCOPE");
static const std::string ERROR_ALLOCATE_BUCKET_STR("ERROR_ALLOCATE_BUCKET");
static const std::string ERROR_MARSHALL_OVERFLOW_STR("ERROR_MARSHALL_OVERFLOW");
static const std::string ERROR_INVALID_VARIANT_STR("ERROR_INVALID_VARIANT");
static const std::string ERROR_BAD_COMPRESSION_BUFFER_STR("ERROR_BAD_COMPRESSION_BUFFER");
static const std::string ERROR_AUDIT_FAILED_STR("ERROR_AUDIT_FAILED");
static const std::string ERROR_TIMER_RESOLUTION_NOT_SET_STR("ERROR_TIMER_RESOLUTION_NOT_SET");
static const std::string ERROR_INSUFFICIENT_LOGON_INFO_STR("ERROR_INSUFFICIENT_LOGON_INFO");
static const std::string ERROR_BAD_DLL_ENTRYPOINT_STR("ERROR_BAD_DLL_ENTRYPOINT");
static const std::string ERROR_BAD_SERVICE_ENTRYPOINT_STR("ERROR_BAD_SERVICE_ENTRYPOINT");
static const std::string ERROR_IP_ADDRESS_CONFLICT1_STR("ERROR_IP_ADDRESS_CONFLICT1");
static const std::string ERROR_IP_ADDRESS_CONFLICT2_STR("ERROR_IP_ADDRESS_CONFLICT2");
static const std::string ERROR_REGISTRY_QUOTA_LIMIT_STR("ERROR_REGISTRY_QUOTA_LIMIT");
static const std::string ERROR_NO_CALLBACK_ACTIVE_STR("ERROR_NO_CALLBACK_ACTIVE");
static const std::string ERROR_PWD_TOO_SHORT_STR("ERROR_PWD_TOO_SHORT");
static const std::string ERROR_PWD_TOO_RECENT_STR("ERROR_PWD_TOO_RECENT");
static const std::string ERROR_PWD_HISTORY_CONFLICT_STR("ERROR_PWD_HISTORY_CONFLICT");
static const std::string ERROR_UNSUPPORTED_COMPRESSION_STR("ERROR_UNSUPPORTED_COMPRESSION");
static const std::string ERROR_INVALID_HW_PROFILE_STR("ERROR_INVALID_HW_PROFILE");
static const std::string
    ERROR_INVALID_PLUGPLAY_DEVICE_PATH_STR("ERROR_INVALID_PLUGPLAY_DEVICE_PATH");
static const std::string ERROR_QUOTA_LIST_INCONSISTENT_STR("ERROR_QUOTA_LIST_INCONSISTENT");
static const std::string ERROR_EVALUATION_EXPIRATION_STR("ERROR_EVALUATION_EXPIRATION");
static const std::string ERROR_ILLEGAL_DLL_RELOCATION_STR("ERROR_ILLEGAL_DLL_RELOCATION");
static const std::string ERROR_DLL_INIT_FAILED_LOGOFF_STR("ERROR_DLL_INIT_FAILED_LOGOFF");
static const std::string ERROR_VALIDATE_CONTINUE_STR("ERROR_VALIDATE_CONTINUE");
static const std::string ERROR_NO_MORE_MATCHES_STR("ERROR_NO_MORE_MATCHES");
static const std::string ERROR_RANGE_LIST_CONFLICT_STR("ERROR_RANGE_LIST_CONFLICT");
static const std::string ERROR_SERVER_SID_MISMATCH_STR("ERROR_SERVER_SID_MISMATCH");
static const std::string ERROR_CANT_ENABLE_DENY_ONLY_STR("ERROR_CANT_ENABLE_DENY_ONLY");
static const std::string ERROR_FLOAT_MULTIPLE_FAULTS_STR("ERROR_FLOAT_MULTIPLE_FAULTS");
static const std::string ERROR_FLOAT_MULTIPLE_TRAPS_STR("ERROR_FLOAT_MULTIPLE_TRAPS");
static const std::string ERROR_NOINTERFACE_STR("ERROR_NOINTERFACE");
static const std::string ERROR_DRIVER_FAILED_SLEEP_STR("ERROR_DRIVER_FAILED_SLEEP");
static const std::string ERROR_CORRUPT_SYSTEM_FILE_STR("ERROR_CORRUPT_SYSTEM_FILE");
static const std::string ERROR_COMMITMENT_MINIMUM_STR("ERROR_COMMITMENT_MINIMUM");
static const std::string ERROR_PNP_RESTART_ENUMERATION_STR("ERROR_PNP_RESTART_ENUMERATION");
static const std::string ERROR_SYSTEM_IMAGE_BAD_SIGNATURE_STR("ERROR_SYSTEM_IMAGE_BAD_SIGNATURE");
static const std::string ERROR_PNP_REBOOT_REQUIRED_STR("ERROR_PNP_REBOOT_REQUIRED");
static const std::string ERROR_INSUFFICIENT_POWER_STR("ERROR_INSUFFICIENT_POWER");
static const std::string ERROR_MULTIPLE_FAULT_VIOLATION_STR("ERROR_MULTIPLE_FAULT_VIOLATION");
static const std::string ERROR_SYSTEM_SHUTDOWN_STR("ERROR_SYSTEM_SHUTDOWN");
static const std::string ERROR_PORT_NOT_SET_STR("ERROR_PORT_NOT_SET");
static const std::string ERROR_DS_VERSION_CHECK_FAILURE_STR("ERROR_DS_VERSION_CHECK_FAILURE");
static const std::string ERROR_RANGE_NOT_FOUND_STR("ERROR_RANGE_NOT_FOUND");
static const std::string ERROR_NOT_SAFE_MODE_DRIVER_STR("ERROR_NOT_SAFE_MODE_DRIVER");
static const std::string ERROR_FAILED_DRIVER_ENTRY_STR("ERROR_FAILED_DRIVER_ENTRY");
static const std::string ERROR_DEVICE_ENUMERATION_ERROR_STR("ERROR_DEVICE_ENUMERATION_ERROR");
static const std::string ERROR_MOUNT_POINT_NOT_RESOLVED_STR("ERROR_MOUNT_POINT_NOT_RESOLVED");
static const std::string
    ERROR_INVALID_DEVICE_OBJECT_PARAMETER_STR("ERROR_INVALID_DEVICE_OBJECT_PARAMETER");
static const std::string ERROR_MCA_OCCURED_STR("ERROR_MCA_OCCURED");
static const std::string ERROR_DRIVER_DATABASE_ERROR_STR("ERROR_DRIVER_DATABASE_ERROR");
static const std::string ERROR_SYSTEM_HIVE_TOO_LARGE_STR("ERROR_SYSTEM_HIVE_TOO_LARGE");
static const std::string ERROR_DRIVER_FAILED_PRIOR_UNLOAD_STR("ERROR_DRIVER_FAILED_PRIOR_UNLOAD");
static const std::string ERROR_VOLSNAP_PREPARE_HIBERNATE_STR("ERROR_VOLSNAP_PREPARE_HIBERNATE");
static const std::string ERROR_HIBERNATION_FAILURE_STR("ERROR_HIBERNATION_FAILURE");
static const std::string ERROR_FILE_SYSTEM_LIMITATION_STR("ERROR_FILE_SYSTEM_LIMITATION");
static const std::string ERROR_ASSERTION_FAILURE_STR("ERROR_ASSERTION_FAILURE");
static const std::string ERROR_ACPI_ERROR_STR("ERROR_ACPI_ERROR");
static const std::string ERROR_WOW_ASSERTION_STR("ERROR_WOW_ASSERTION");
static const std::string ERROR_PNP_BAD_MPS_TABLE_STR("ERROR_PNP_BAD_MPS_TABLE");
static const std::string ERROR_PNP_TRANSLATION_FAILED_STR("ERROR_PNP_TRANSLATION_FAILED");
static const std::string ERROR_PNP_IRQ_TRANSLATION_FAILED_STR("ERROR_PNP_IRQ_TRANSLATION_FAILED");
static const std::string ERROR_PNP_INVALID_ID_STR("ERROR_PNP_INVALID_ID");
static const std::string ERROR_WAKE_SYSTEM_DEBUGGER_STR("ERROR_WAKE_SYSTEM_DEBUGGER");
static const std::string ERROR_HANDLES_CLOSED_STR("ERROR_HANDLES_CLOSED");
static const std::string ERROR_EXTRANEOUS_INFORMATION_STR("ERROR_EXTRANEOUS_INFORMATION");
static const std::string ERROR_RXACT_COMMIT_NECESSARY_STR("ERROR_RXACT_COMMIT_NECESSARY");
static const std::string ERROR_MEDIA_CHECK_STR("ERROR_MEDIA_CHECK");
static const std::string ERROR_GUID_SUBSTITUTION_MADE_STR("ERROR_GUID_SUBSTITUTION_MADE");
static const std::string ERROR_STOPPED_ON_SYMLINK_STR("ERROR_STOPPED_ON_SYMLINK");
static const std::string ERROR_LONGJUMP_STR("ERROR_LONGJUMP");
static const std::string ERROR_PLUGPLAY_QUERY_VETOED_STR("ERROR_PLUGPLAY_QUERY_VETOED");
static const std::string ERROR_UNWIND_CONSOLIDATE_STR("ERROR_UNWIND_CONSOLIDATE");
static const std::string ERROR_REGISTRY_HIVE_RECOVERED_STR("ERROR_REGISTRY_HIVE_RECOVERED");
static const std::string ERROR_DLL_MIGHT_BE_INSECURE_STR("ERROR_DLL_MIGHT_BE_INSECURE");
static const std::string ERROR_DLL_MIGHT_BE_INCOMPATIBLE_STR("ERROR_DLL_MIGHT_BE_INCOMPATIBLE");
static const std::string ERROR_DBG_EXCEPTION_NOT_HANDLED_STR("ERROR_DBG_EXCEPTION_NOT_HANDLED");
static const std::string ERROR_DBG_REPLY_LATER_STR("ERROR_DBG_REPLY_LATER");
static const std::string
    ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE_STR("ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE");
static const std::string ERROR_DBG_TERMINATE_THREAD_STR("ERROR_DBG_TERMINATE_THREAD");
static const std::string ERROR_DBG_TERMINATE_PROCESS_STR("ERROR_DBG_TERMINATE_PROCESS");
static const std::string ERROR_DBG_CONTROL_C_STR("ERROR_DBG_CONTROL_C");
static const std::string ERROR_DBG_PRINTEXCEPTION_C_STR("ERROR_DBG_PRINTEXCEPTION_C");
static const std::string ERROR_DBG_RIPEXCEPTION_STR("ERROR_DBG_RIPEXCEPTION");
static const std::string ERROR_DBG_CONTROL_BREAK_STR("ERROR_DBG_CONTROL_BREAK");
static const std::string ERROR_DBG_COMMAND_EXCEPTION_STR("ERROR_DBG_COMMAND_EXCEPTION");
static const std::string ERROR_OBJECT_NAME_EXISTS_STR("ERROR_OBJECT_NAME_EXISTS");
static const std::string ERROR_THREAD_WAS_SUSPENDED_STR("ERROR_THREAD_WAS_SUSPENDED");
static const std::string ERROR_IMAGE_NOT_AT_BASE_STR("ERROR_IMAGE_NOT_AT_BASE");
static const std::string ERROR_RXACT_STATE_CREATED_STR("ERROR_RXACT_STATE_CREATED");
static const std::string ERROR_SEGMENT_NOTIFICATION_STR("ERROR_SEGMENT_NOTIFICATION");
static const std::string ERROR_BAD_CURRENT_DIRECTORY_STR("ERROR_BAD_CURRENT_DIRECTORY");
static const std::string
    ERROR_FT_READ_RECOVERY_FROM_BACKUP_STR("ERROR_FT_READ_RECOVERY_FROM_BACKUP");
static const std::string ERROR_FT_WRITE_RECOVERY_STR("ERROR_FT_WRITE_RECOVERY");
static const std::string ERROR_IMAGE_MACHINE_TYPE_MISMATCH_STR("ERROR_IMAGE_MACHINE_TYPE_MISMATCH");
static const std::string ERROR_RECEIVE_PARTIAL_STR("ERROR_RECEIVE_PARTIAL");
static const std::string ERROR_RECEIVE_EXPEDITED_STR("ERROR_RECEIVE_EXPEDITED");
static const std::string ERROR_RECEIVE_PARTIAL_EXPEDITED_STR("ERROR_RECEIVE_PARTIAL_EXPEDITED");
static const std::string ERROR_EVENT_DONE_STR("ERROR_EVENT_DONE");
static const std::string ERROR_EVENT_PENDING_STR("ERROR_EVENT_PENDING");
static const std::string ERROR_CHECKING_FILE_SYSTEM_STR("ERROR_CHECKING_FILE_SYSTEM");
static const std::string ERROR_FATAL_APP_EXIT_STR("ERROR_FATAL_APP_EXIT");
static const std::string ERROR_PREDEFINED_HANDLE_STR("ERROR_PREDEFINED_HANDLE");
static const std::string ERROR_WAS_UNLOCKED_STR("ERROR_WAS_UNLOCKED");
static const std::string ERROR_SERVICE_NOTIFICATION_STR("ERROR_SERVICE_NOTIFICATION");
static const std::string ERROR_WAS_LOCKED_STR("ERROR_WAS_LOCKED");
static const std::string ERROR_LOG_HARD_ERROR_STR("ERROR_LOG_HARD_ERROR");
static const std::string ERROR_ALREADY_WIN32_STR("ERROR_ALREADY_WIN32");
static const std::string
    ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE_STR("ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE");
static const std::string ERROR_NO_YIELD_PERFORMED_STR("ERROR_NO_YIELD_PERFORMED");
static const std::string ERROR_TIMER_RESUME_IGNORED_STR("ERROR_TIMER_RESUME_IGNORED");
static const std::string ERROR_ARBITRATION_UNHANDLED_STR("ERROR_ARBITRATION_UNHANDLED");
static const std::string ERROR_CARDBUS_NOT_SUPPORTED_STR("ERROR_CARDBUS_NOT_SUPPORTED");
static const std::string ERROR_MP_PROCESSOR_MISMATCH_STR("ERROR_MP_PROCESSOR_MISMATCH");
static const std::string ERROR_HIBERNATED_STR("ERROR_HIBERNATED");
static const std::string ERROR_RESUME_HIBERNATION_STR("ERROR_RESUME_HIBERNATION");
static const std::string ERROR_FIRMWARE_UPDATED_STR("ERROR_FIRMWARE_UPDATED");
static const std::string
    ERROR_DRIVERS_LEAKING_LOCKED_PAGES_STR("ERROR_DRIVERS_LEAKING_LOCKED_PAGES");
static const std::string ERROR_WAKE_SYSTEM_STR("ERROR_WAKE_SYSTEM");
static const std::string ERROR_WAIT_1_STR("ERROR_WAIT_1");
static const std::string ERROR_WAIT_2_STR("ERROR_WAIT_2");
static const std::string ERROR_WAIT_3_STR("ERROR_WAIT_3");
static const std::string ERROR_WAIT_63_STR("ERROR_WAIT_63");
static const std::string ERROR_ABANDONED_WAIT_0_STR("ERROR_ABANDONED_WAIT_0");
static const std::string ERROR_ABANDONED_WAIT_63_STR("ERROR_ABANDONED_WAIT_63");
static const std::string ERROR_USER_APC_STR("ERROR_USER_APC");
static const std::string ERROR_KERNEL_APC_STR("ERROR_KERNEL_APC");
static const std::string ERROR_ALERTED_STR("ERROR_ALERTED");
static const std::string ERROR_ELEVATION_REQUIRED_STR("ERROR_ELEVATION_REQUIRED");
static const std::string ERROR_REPARSE_STR("ERROR_REPARSE");
static const std::string ERROR_OPLOCK_BREAK_IN_PROGRESS_STR("ERROR_OPLOCK_BREAK_IN_PROGRESS");
static const std::string ERROR_VOLUME_MOUNTED_STR("ERROR_VOLUME_MOUNTED");
static const std::string ERROR_RXACT_COMMITTED_STR("ERROR_RXACT_COMMITTED");
static const std::string ERROR_NOTIFY_CLEANUP_STR("ERROR_NOTIFY_CLEANUP");
static const std::string
    ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED_STR("ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED");
static const std::string ERROR_PAGE_FAULT_TRANSITION_STR("ERROR_PAGE_FAULT_TRANSITION");
static const std::string ERROR_PAGE_FAULT_DEMAND_ZERO_STR("ERROR_PAGE_FAULT_DEMAND_ZERO");
static const std::string ERROR_PAGE_FAULT_COPY_ON_WRITE_STR("ERROR_PAGE_FAULT_COPY_ON_WRITE");
static const std::string ERROR_PAGE_FAULT_GUARD_PAGE_STR("ERROR_PAGE_FAULT_GUARD_PAGE");
static const std::string ERROR_PAGE_FAULT_PAGING_FILE_STR("ERROR_PAGE_FAULT_PAGING_FILE");
static const std::string ERROR_CACHE_PAGE_LOCKED_STR("ERROR_CACHE_PAGE_LOCKED");
static const std::string ERROR_CRASH_DUMP_STR("ERROR_CRASH_DUMP");
static const std::string ERROR_BUFFER_ALL_ZEROS_STR("ERROR_BUFFER_ALL_ZEROS");
static const std::string ERROR_REPARSE_OBJECT_STR("ERROR_REPARSE_OBJECT");
static const std::string
    ERROR_RESOURCE_REQUIREMENTS_CHANGED_STR("ERROR_RESOURCE_REQUIREMENTS_CHANGED");
static const std::string ERROR_TRANSLATION_COMPLETE_STR("ERROR_TRANSLATION_COMPLETE");
static const std::string ERROR_NOTHING_TO_TERMINATE_STR("ERROR_NOTHING_TO_TERMINATE");
static const std::string ERROR_PROCESS_NOT_IN_JOB_STR("ERROR_PROCESS_NOT_IN_JOB");
static const std::string ERROR_PROCESS_IN_JOB_STR("ERROR_PROCESS_IN_JOB");
static const std::string ERROR_VOLSNAP_HIBERNATE_READY_STR("ERROR_VOLSNAP_HIBERNATE_READY");
static const std::string
    ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY_STR("ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY");
static const std::string
    ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED_STR("ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED");
static const std::string ERROR_INTERRUPT_STILL_CONNECTED_STR("ERROR_INTERRUPT_STILL_CONNECTED");
static const std::string ERROR_WAIT_FOR_OPLOCK_STR("ERROR_WAIT_FOR_OPLOCK");
static const std::string ERROR_DBG_EXCEPTION_HANDLED_STR("ERROR_DBG_EXCEPTION_HANDLED");
static const std::string ERROR_DBG_CONTINUE_STR("ERROR_DBG_CONTINUE");
static const std::string ERROR_CALLBACK_POP_STACK_STR("ERROR_CALLBACK_POP_STACK");
static const std::string ERROR_COMPRESSION_DISABLED_STR("ERROR_COMPRESSION_DISABLED");
static const std::string ERROR_CANTFETCHBACKWARDS_STR("ERROR_CANTFETCHBACKWARDS");
static const std::string ERROR_CANTSCROLLBACKWARDS_STR("ERROR_CANTSCROLLBACKWARDS");
static const std::string ERROR_ROWSNOTRELEASED_STR("ERROR_ROWSNOTRELEASED");
static const std::string ERROR_BAD_ACCESSOR_FLAGS_STR("ERROR_BAD_ACCESSOR_FLAGS");
static const std::string ERROR_ERRORS_ENCOUNTERED_STR("ERROR_ERRORS_ENCOUNTERED");
static const std::string ERROR_NOT_CAPABLE_STR("ERROR_NOT_CAPABLE");
static const std::string ERROR_REQUEST_OUT_OF_SEQUENCE_STR("ERROR_REQUEST_OUT_OF_SEQUENCE");
static const std::string ERROR_VERSION_PARSE_ERROR_STR("ERROR_VERSION_PARSE_ERROR");
static const std::string ERROR_BADSTARTPOSITION_STR("ERROR_BADSTARTPOSITION");
static const std::string ERROR_MEMORY_HARDWARE_STR("ERROR_MEMORY_HARDWARE");
static const std::string ERROR_DISK_REPAIR_DISABLED_STR("ERROR_DISK_REPAIR_DISABLED");
static const std::string ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE_STR(
    "ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE");
static const std::string
    ERROR_SYSTEM_POWERSTATE_TRANSITION_STR("ERROR_SYSTEM_POWERSTATE_TRANSITION");
static const std::string
    ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION_STR("ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION");
static const std::string ERROR_MCA_EXCEPTION_STR("ERROR_MCA_EXCEPTION");
static const std::string ERROR_ACCESS_AUDIT_BY_POLICY_STR("ERROR_ACCESS_AUDIT_BY_POLICY");
static const std::string
    ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY_STR("ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY");
static const std::string ERROR_ABANDON_HIBERFILE_STR("ERROR_ABANDON_HIBERFILE");
static const std::string ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED_STR(
    "ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED");
static const std::string ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR_STR(
    "ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR");
static const std::string ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR_STR(
    "ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR");
static const std::string ERROR_NO_ACE_CONDITION_STR("ERROR_NO_ACE_CONDITION");
static const std::string ERROR_INVALID_ACE_CONDITION_STR("ERROR_INVALID_ACE_CONDITION");
static const std::string ERROR_EA_ACCESS_DENIED_STR("ERROR_EA_ACCESS_DENIED");
static const std::string ERROR_OPERATION_ABORTED_STR("ERROR_OPERATION_ABORTED");
static const std::string ERROR_IO_INCOMPLETE_STR("ERROR_IO_INCOMPLETE");
static const std::string ERROR_IO_PENDING_STR("ERROR_IO_PENDING");
static const std::string ERROR_NOACCESS_STR("ERROR_NOACCESS");
static const std::string ERROR_SWAPERROR_STR("ERROR_SWAPERROR");
static const std::string ERROR_STACK_OVERFLOW_STR("ERROR_STACK_OVERFLOW");
static const std::string ERROR_INVALID_MESSAGE_STR("ERROR_INVALID_MESSAGE");
static const std::string ERROR_CAN_NOT_COMPLETE_STR("ERROR_CAN_NOT_COMPLETE");
static const std::string ERROR_INVALID_FLAGS_STR("ERROR_INVALID_FLAGS");
static const std::string ERROR_UNRECOGNIZED_VOLUME_STR("ERROR_UNRECOGNIZED_VOLUME");
static const std::string ERROR_FILE_INVALID_STR("ERROR_FILE_INVALID");
static const std::string ERROR_FULLSCREEN_MODE_STR("ERROR_FULLSCREEN_MODE");
static const std::string ERROR_NO_TOKEN_STR("ERROR_NO_TOKEN");
static const std::string ERROR_BADDB_STR("ERROR_BADDB");
static const std::string ERROR_BADKEY_STR("ERROR_BADKEY");
static const std::string ERROR_CANTOPEN_STR("ERROR_CANTOPEN");
static const std::string ERROR_CANTREAD_STR("ERROR_CANTREAD");
static const std::string ERROR_CANTWRITE_STR("ERROR_CANTWRITE");
static const std::string ERROR_REGISTRY_RECOVERED_STR("ERROR_REGISTRY_RECOVERED");
static const std::string ERROR_REGISTRY_CORRUPT_STR("ERROR_REGISTRY_CORRUPT");
static const std::string ERROR_REGISTRY_IO_FAILED_STR("ERROR_REGISTRY_IO_FAILED");
static const std::string ERROR_NOT_REGISTRY_FILE_STR("ERROR_NOT_REGISTRY_FILE");
static const std::string ERROR_KEY_DELETED_STR("ERROR_KEY_DELETED");
static const std::string ERROR_NO_LOG_SPACE_STR("ERROR_NO_LOG_SPACE");
static const std::string ERROR_KEY_HAS_CHILDREN_STR("ERROR_KEY_HAS_CHILDREN");
static const std::string ERROR_CHILD_MUST_BE_VOLATILE_STR("ERROR_CHILD_MUST_BE_VOLATILE");
static const std::string ERROR_NOTIFY_ENUM_DIR_STR("ERROR_NOTIFY_ENUM_DIR");
static const std::string ERROR_DEPENDENT_SERVICES_RUNNING_STR("ERROR_DEPENDENT_SERVICES_RUNNING");
static const std::string ERROR_INVALID_SERVICE_CONTROL_STR("ERROR_INVALID_SERVICE_CONTROL");
static const std::string ERROR_SERVICE_REQUEST_TIMEOUT_STR("ERROR_SERVICE_REQUEST_TIMEOUT");
static const std::string ERROR_SERVICE_NO_THREAD_STR("ERROR_SERVICE_NO_THREAD");
static const std::string ERROR_SERVICE_DATABASE_LOCKED_STR("ERROR_SERVICE_DATABASE_LOCKED");
static const std::string ERROR_SERVICE_ALREADY_RUNNING_STR("ERROR_SERVICE_ALREADY_RUNNING");
static const std::string ERROR_INVALID_SERVICE_ACCOUNT_STR("ERROR_INVALID_SERVICE_ACCOUNT");
static const std::string ERROR_SERVICE_DISABLED_STR("ERROR_SERVICE_DISABLED");
static const std::string ERROR_CIRCULAR_DEPENDENCY_STR("ERROR_CIRCULAR_DEPENDENCY");
static const std::string ERROR_SERVICE_DOES_NOT_EXIST_STR("ERROR_SERVICE_DOES_NOT_EXIST");
static const std::string ERROR_SERVICE_CANNOT_ACCEPT_CTRL_STR("ERROR_SERVICE_CANNOT_ACCEPT_CTRL");
static const std::string ERROR_SERVICE_NOT_ACTIVE_STR("ERROR_SERVICE_NOT_ACTIVE");
static const std::string
    ERROR_FAILED_SERVICE_CONTROLLER_CONNECT_STR("ERROR_FAILED_SERVICE_CONTROLLER_CONNECT");
static const std::string ERROR_EXCEPTION_IN_SERVICE_STR("ERROR_EXCEPTION_IN_SERVICE");
static const std::string ERROR_DATABASE_DOES_NOT_EXIST_STR("ERROR_DATABASE_DOES_NOT_EXIST");
static const std::string ERROR_SERVICE_SPECIFIC_ERROR_STR("ERROR_SERVICE_SPECIFIC_ERROR");
static const std::string ERROR_PROCESS_ABORTED_STR("ERROR_PROCESS_ABORTED");
static const std::string ERROR_SERVICE_DEPENDENCY_FAIL_STR("ERROR_SERVICE_DEPENDENCY_FAIL");
static const std::string ERROR_SERVICE_LOGON_FAILED_STR("ERROR_SERVICE_LOGON_FAILED");
static const std::string ERROR_SERVICE_START_HANG_STR("ERROR_SERVICE_START_HANG");
static const std::string ERROR_INVALID_SERVICE_LOCK_STR("ERROR_INVALID_SERVICE_LOCK");
static const std::string ERROR_SERVICE_MARKED_FOR_DELETE_STR("ERROR_SERVICE_MARKED_FOR_DELETE");
static const std::string ERROR_SERVICE_EXISTS_STR("ERROR_SERVICE_EXISTS");
static const std::string ERROR_ALREADY_RUNNING_LKG_STR("ERROR_ALREADY_RUNNING_LKG");
static const std::string ERROR_SERVICE_DEPENDENCY_DELETED_STR("ERROR_SERVICE_DEPENDENCY_DELETED");
static const std::string ERROR_BOOT_ALREADY_ACCEPTED_STR("ERROR_BOOT_ALREADY_ACCEPTED");
static const std::string ERROR_SERVICE_NEVER_STARTED_STR("ERROR_SERVICE_NEVER_STARTED");
static const std::string ERROR_DUPLICATE_SERVICE_NAME_STR("ERROR_DUPLICATE_SERVICE_NAME");
static const std::string ERROR_DIFFERENT_SERVICE_ACCOUNT_STR("ERROR_DIFFERENT_SERVICE_ACCOUNT");
static const std::string
    ERROR_CANNOT_DETECT_DRIVER_FAILURE_STR("ERROR_CANNOT_DETECT_DRIVER_FAILURE");
static const std::string ERROR_CANNOT_DETECT_PROCESS_ABORT_STR("ERROR_CANNOT_DETECT_PROCESS_ABORT");
static const std::string ERROR_NO_RECOVERY_PROGRAM_STR("ERROR_NO_RECOVERY_PROGRAM");
static const std::string ERROR_SERVICE_NOT_IN_EXE_STR("ERROR_SERVICE_NOT_IN_EXE");
static const std::string ERROR_END_OF_MEDIA_STR("ERROR_END_OF_MEDIA");
static const std::string ERROR_FILEMARK_DETECTED_STR("ERROR_FILEMARK_DETECTED");
static const std::string ERROR_BEGINNING_OF_MEDIA_STR("ERROR_BEGINNING_OF_MEDIA");
static const std::string ERROR_SETMARK_DETECTED_STR("ERROR_SETMARK_DETECTED");
static const std::string ERROR_NO_DATA_DETECTED_STR("ERROR_NO_DATA_DETECTED");
static const std::string ERROR_PARTITION_FAILURE_STR("ERROR_PARTITION_FAILURE");
static const std::string ERROR_INVALID_BLOCK_LENGTH_STR("ERROR_INVALID_BLOCK_LENGTH");
static const std::string ERROR_DEVICE_NOT_PARTITIONED_STR("ERROR_DEVICE_NOT_PARTITIONED");
static const std::string ERROR_UNABLE_TO_LOCK_MEDIA_STR("ERROR_UNABLE_TO_LOCK_MEDIA");
static const std::string ERROR_UNABLE_TO_UNLOAD_MEDIA_STR("ERROR_UNABLE_TO_UNLOAD_MEDIA");
static const std::string ERROR_MEDIA_CHANGED_STR("ERROR_MEDIA_CHANGED");
static const std::string ERROR_BUS_RESET_STR("ERROR_BUS_RESET");
static const std::string ERROR_NO_MEDIA_IN_DRIVE_STR("ERROR_NO_MEDIA_IN_DRIVE");
static const std::string ERROR_NO_UNICODE_TRANSLATION_STR("ERROR_NO_UNICODE_TRANSLATION");
static const std::string ERROR_DLL_INIT_FAILED_STR("ERROR_DLL_INIT_FAILED");
static const std::string ERROR_SHUTDOWN_IN_PROGRESS_STR("ERROR_SHUTDOWN_IN_PROGRESS");
static const std::string ERROR_NO_SHUTDOWN_IN_PROGRESS_STR("ERROR_NO_SHUTDOWN_IN_PROGRESS");
static const std::string ERROR_IO_DEVICE_STR("ERROR_IO_DEVICE");
static const std::string ERROR_SERIAL_NO_DEVICE_STR("ERROR_SERIAL_NO_DEVICE");
static const std::string ERROR_IRQ_BUSY_STR("ERROR_IRQ_BUSY");
static const std::string ERROR_MORE_WRITES_STR("ERROR_MORE_WRITES");
static const std::string ERROR_COUNTER_TIMEOUT_STR("ERROR_COUNTER_TIMEOUT");
static const std::string ERROR_FLOPPY_ID_MARK_NOT_FOUND_STR("ERROR_FLOPPY_ID_MARK_NOT_FOUND");
static const std::string ERROR_FLOPPY_WRONG_CYLINDER_STR("ERROR_FLOPPY_WRONG_CYLINDER");
static const std::string ERROR_FLOPPY_UNKNOWN_ERROR_STR("ERROR_FLOPPY_UNKNOWN_ERROR");
static const std::string ERROR_FLOPPY_BAD_REGISTERS_STR("ERROR_FLOPPY_BAD_REGISTERS");
static const std::string ERROR_DISK_RECALIBRATE_FAILED_STR("ERROR_DISK_RECALIBRATE_FAILED");
static const std::string ERROR_DISK_OPERATION_FAILED_STR("ERROR_DISK_OPERATION_FAILED");
static const std::string ERROR_DISK_RESET_FAILED_STR("ERROR_DISK_RESET_FAILED");
static const std::string ERROR_EOM_OVERFLOW_STR("ERROR_EOM_OVERFLOW");
static const std::string ERROR_NOT_ENOUGH_SERVER_MEMORY_STR("ERROR_NOT_ENOUGH_SERVER_MEMORY");
static const std::string ERROR_POSSIBLE_DEADLOCK_STR("ERROR_POSSIBLE_DEADLOCK");
static const std::string ERROR_MAPPED_ALIGNMENT_STR("ERROR_MAPPED_ALIGNMENT");
static const std::string ERROR_SET_POWER_STATE_VETOED_STR("ERROR_SET_POWER_STATE_VETOED");
static const std::string ERROR_SET_POWER_STATE_FAILED_STR("ERROR_SET_POWER_STATE_FAILED");
static const std::string ERROR_TOO_MANY_LINKS_STR("ERROR_TOO_MANY_LINKS");
static const std::string ERROR_OLD_WIN_VERSION_STR("ERROR_OLD_WIN_VERSION");
static const std::string ERROR_APP_WRONG_OS_STR("ERROR_APP_WRONG_OS");
static const std::string ERROR_SINGLE_INSTANCE_APP_STR("ERROR_SINGLE_INSTANCE_APP");
static const std::string ERROR_RMODE_APP_STR("ERROR_RMODE_APP");
static const std::string ERROR_INVALID_DLL_STR("ERROR_INVALID_DLL");
static const std::string ERROR_NO_ASSOCIATION_STR("ERROR_NO_ASSOCIATION");
static const std::string ERROR_DDE_FAIL_STR("ERROR_DDE_FAIL");
static const std::string ERROR_DLL_NOT_FOUND_STR("ERROR_DLL_NOT_FOUND");
static const std::string ERROR_NO_MORE_USER_HANDLES_STR("ERROR_NO_MORE_USER_HANDLES");
static const std::string ERROR_MESSAGE_SYNC_ONLY_STR("ERROR_MESSAGE_SYNC_ONLY");
static const std::string ERROR_SOURCE_ELEMENT_EMPTY_STR("ERROR_SOURCE_ELEMENT_EMPTY");
static const std::string ERROR_DESTINATION_ELEMENT_FULL_STR("ERROR_DESTINATION_ELEMENT_FULL");
static const std::string ERROR_ILLEGAL_ELEMENT_ADDRESS_STR("ERROR_ILLEGAL_ELEMENT_ADDRESS");
static const std::string ERROR_MAGAZINE_NOT_PRESENT_STR("ERROR_MAGAZINE_NOT_PRESENT");
static const std::string
    ERROR_DEVICE_REINITIALIZATION_NEEDED_STR("ERROR_DEVICE_REINITIALIZATION_NEEDED");
static const std::string ERROR_DEVICE_REQUIRES_CLEANING_STR("ERROR_DEVICE_REQUIRES_CLEANING");
static const std::string ERROR_DEVICE_DOOR_OPEN_STR("ERROR_DEVICE_DOOR_OPEN");
static const std::string ERROR_DEVICE_NOT_CONNECTED_STR("ERROR_DEVICE_NOT_CONNECTED");
static const std::string ERROR_NOT_FOUND_STR("ERROR_NOT_FOUND");
static const std::string ERROR_NO_MATCH_STR("ERROR_NO_MATCH");
static const std::string ERROR_SET_NOT_FOUND_STR("ERROR_SET_NOT_FOUND");
static const std::string ERROR_POINT_NOT_FOUND_STR("ERROR_POINT_NOT_FOUND");
static const std::string ERROR_NO_TRACKING_SERVICE_STR("ERROR_NO_TRACKING_SERVICE");
static const std::string ERROR_NO_VOLUME_ID_STR("ERROR_NO_VOLUME_ID");
static const std::string ERROR_UNABLE_TO_REMOVE_REPLACED_STR("ERROR_UNABLE_TO_REMOVE_REPLACED");
static const std::string ERROR_UNABLE_TO_MOVE_REPLACEMENT_STR("ERROR_UNABLE_TO_MOVE_REPLACEMENT");
static const std::string
    ERROR_UNABLE_TO_MOVE_REPLACEMENT_2_STR("ERROR_UNABLE_TO_MOVE_REPLACEMENT_2");
static const std::string ERROR_JOURNAL_DELETE_IN_PROGRESS_STR("ERROR_JOURNAL_DELETE_IN_PROGRESS");
static const std::string ERROR_JOURNAL_NOT_ACTIVE_STR("ERROR_JOURNAL_NOT_ACTIVE");
static const std::string ERROR_POTENTIAL_FILE_FOUND_STR("ERROR_POTENTIAL_FILE_FOUND");
static const std::string ERROR_JOURNAL_ENTRY_DELETED_STR("ERROR_JOURNAL_ENTRY_DELETED");
static const std::string ERROR_BAD_DEVICE_STR("ERROR_BAD_DEVICE");
static const std::string ERROR_CONNECTION_UNAVAIL_STR("ERROR_CONNECTION_UNAVAIL");
static const std::string ERROR_DEVICE_ALREADY_REMEMBERED_STR("ERROR_DEVICE_ALREADY_REMEMBERED");
static const std::string ERROR_NO_NET_OR_BAD_PATH_STR("ERROR_NO_NET_OR_BAD_PATH");
static const std::string ERROR_BAD_PROVIDER_STR("ERROR_BAD_PROVIDER");
static const std::string ERROR_CANNOT_OPEN_PROFILE_STR("ERROR_CANNOT_OPEN_PROFILE");
static const std::string ERROR_BAD_PROFILE_STR("ERROR_BAD_PROFILE");
static const std::string ERROR_NOT_CONTAINER_STR("ERROR_NOT_CONTAINER");
static const std::string ERROR_EXTENDED_ERROR_STR("ERROR_EXTENDED_ERROR");
static const std::string ERROR_INVALID_GROUPNAME_STR("ERROR_INVALID_GROUPNAME");
static const std::string ERROR_INVALID_COMPUTERNAME_STR("ERROR_INVALID_COMPUTERNAME");
static const std::string ERROR_INVALID_EVENTNAME_STR("ERROR_INVALID_EVENTNAME");
static const std::string ERROR_INVALID_DOMAINNAME_STR("ERROR_INVALID_DOMAINNAME");
static const std::string ERROR_INVALID_SERVICENAME_STR("ERROR_INVALID_SERVICENAME");
static const std::string ERROR_INVALID_NETNAME_STR("ERROR_INVALID_NETNAME");
static const std::string ERROR_INVALID_SHARENAME_STR("ERROR_INVALID_SHARENAME");
static const std::string ERROR_INVALID_PASSWORDNAME_STR("ERROR_INVALID_PASSWORDNAME");
static const std::string ERROR_INVALID_MESSAGENAME_STR("ERROR_INVALID_MESSAGENAME");
static const std::string ERROR_INVALID_MESSAGEDEST_STR("ERROR_INVALID_MESSAGEDEST");
static const std::string ERROR_SESSION_CREDENTIAL_CONFLICT_STR("ERROR_SESSION_CREDENTIAL_CONFLICT");
static const std::string
    ERROR_REMOTE_SESSION_LIMIT_EXCEEDED_STR("ERROR_REMOTE_SESSION_LIMIT_EXCEEDED");
static const std::string ERROR_DUP_DOMAINNAME_STR("ERROR_DUP_DOMAINNAME");
static const std::string ERROR_NO_NETWORK_STR("ERROR_NO_NETWORK");
static const std::string ERROR_CANCELLED_STR("ERROR_CANCELLED");
static const std::string ERROR_USER_MAPPED_FILE_STR("ERROR_USER_MAPPED_FILE");
static const std::string ERROR_CONNECTION_REFUSED_STR("ERROR_CONNECTION_REFUSED");
static const std::string ERROR_GRACEFUL_DISCONNECT_STR("ERROR_GRACEFUL_DISCONNECT");
static const std::string ERROR_ADDRESS_ALREADY_ASSOCIATED_STR("ERROR_ADDRESS_ALREADY_ASSOCIATED");
static const std::string ERROR_ADDRESS_NOT_ASSOCIATED_STR("ERROR_ADDRESS_NOT_ASSOCIATED");
static const std::string ERROR_CONNECTION_INVALID_STR("ERROR_CONNECTION_INVALID");
static const std::string ERROR_CONNECTION_ACTIVE_STR("ERROR_CONNECTION_ACTIVE");
static const std::string ERROR_NETWORK_UNREACHABLE_STR("ERROR_NETWORK_UNREACHABLE");
static const std::string ERROR_HOST_UNREACHABLE_STR("ERROR_HOST_UNREACHABLE");
static const std::string ERROR_PROTOCOL_UNREACHABLE_STR("ERROR_PROTOCOL_UNREACHABLE");
static const std::string ERROR_PORT_UNREACHABLE_STR("ERROR_PORT_UNREACHABLE");
static const std::string ERROR_REQUEST_ABORTED_STR("ERROR_REQUEST_ABORTED");
static const std::string ERROR_CONNECTION_ABORTED_STR("ERROR_CONNECTION_ABORTED");
static const std::string ERROR_RETRY_STR("ERROR_RETRY");
static const std::string ERROR_CONNECTION_COUNT_LIMIT_STR("ERROR_CONNECTION_COUNT_LIMIT");
static const std::string ERROR_LOGIN_TIME_RESTRICTION_STR("ERROR_LOGIN_TIME_RESTRICTION");
static const std::string ERROR_LOGIN_WKSTA_RESTRICTION_STR("ERROR_LOGIN_WKSTA_RESTRICTION");
static const std::string ERROR_INCORRECT_ADDRESS_STR("ERROR_INCORRECT_ADDRESS");
static const std::string ERROR_ALREADY_REGISTERED_STR("ERROR_ALREADY_REGISTERED");
static const std::string ERROR_SERVICE_NOT_FOUND_STR("ERROR_SERVICE_NOT_FOUND");
static const std::string ERROR_NOT_AUTHENTICATED_STR("ERROR_NOT_AUTHENTICATED");
static const std::string ERROR_NOT_LOGGED_ON_STR("ERROR_NOT_LOGGED_ON");
static const std::string ERROR_CONTINUE_STR("ERROR_CONTINUE");
static const std::string ERROR_ALREADY_INITIALIZED_STR("ERROR_ALREADY_INITIALIZED");
static const std::string ERROR_NO_MORE_DEVICES_STR("ERROR_NO_MORE_DEVICES");
static const std::string ERROR_NO_SUCH_SITE_STR("ERROR_NO_SUCH_SITE");
static const std::string ERROR_DOMAIN_CONTROLLER_EXISTS_STR("ERROR_DOMAIN_CONTROLLER_EXISTS");
static const std::string ERROR_ONLY_IF_CONNECTED_STR("ERROR_ONLY_IF_CONNECTED");
static const std::string ERROR_OVERRIDE_NOCHANGES_STR("ERROR_OVERRIDE_NOCHANGES");
static const std::string ERROR_BAD_USER_PROFILE_STR("ERROR_BAD_USER_PROFILE");
static const std::string ERROR_NOT_SUPPORTED_ON_SBS_STR("ERROR_NOT_SUPPORTED_ON_SBS");
static const std::string ERROR_SERVER_SHUTDOWN_IN_PROGRESS_STR("ERROR_SERVER_SHUTDOWN_IN_PROGRESS");
static const std::string ERROR_HOST_DOWN_STR("ERROR_HOST_DOWN");
static const std::string ERROR_NON_ACCOUNT_SID_STR("ERROR_NON_ACCOUNT_SID");
static const std::string ERROR_NON_DOMAIN_SID_STR("ERROR_NON_DOMAIN_SID");
static const std::string ERROR_ACCESS_DISABLED_BY_POLICY_STR("ERROR_ACCESS_DISABLED_BY_POLICY");
static const std::string ERROR_REG_NAT_CONSUMPTION_STR("ERROR_REG_NAT_CONSUMPTION");
static const std::string ERROR_PKINIT_FAILURE_STR("ERROR_PKINIT_FAILURE");
static const std::string ERROR_SMARTCARD_SUBSYSTEM_FAILURE_STR("ERROR_SMARTCARD_SUBSYSTEM_FAILURE");
static const std::string ERROR_DOWNGRADE_DETECTED_STR("ERROR_DOWNGRADE_DETECTED");
static const std::string ERROR_MACHINE_LOCKED_STR("ERROR_MACHINE_LOCKED");
static const std::string
    ERROR_CALLBACK_SUPPLIED_INVALID_DATA_STR("ERROR_CALLBACK_SUPPLIED_INVALID_DATA");
static const std::string
    ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED_STR("ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED");
static const std::string ERROR_DRIVER_BLOCKED_STR("ERROR_DRIVER_BLOCKED");
static const std::string ERROR_INVALID_IMPORT_OF_NON_DLL_STR("ERROR_INVALID_IMPORT_OF_NON_DLL");
static const std::string ERROR_NOT_ALL_ASSIGNED_STR("ERROR_NOT_ALL_ASSIGNED");
static const std::string ERROR_SOME_NOT_MAPPED_STR("ERROR_SOME_NOT_MAPPED");
static const std::string ERROR_NO_QUOTAS_FOR_ACCOUNT_STR("ERROR_NO_QUOTAS_FOR_ACCOUNT");
static const std::string ERROR_LOCAL_USER_SESSION_KEY_STR("ERROR_LOCAL_USER_SESSION_KEY");
static const std::string ERROR_NULL_LM_PASSWORD_STR("ERROR_NULL_LM_PASSWORD");
static const std::string ERROR_UNKNOWN_REVISION_STR("ERROR_UNKNOWN_REVISION");
static const std::string ERROR_REVISION_MISMATCH_STR("ERROR_REVISION_MISMATCH");
static const std::string ERROR_INVALID_OWNER_STR("ERROR_INVALID_OWNER");
static const std::string ERROR_INVALID_PRIMARY_GROUP_STR("ERROR_INVALID_PRIMARY_GROUP");
static const std::string ERROR_NO_IMPERSONATION_TOKEN_STR("ERROR_NO_IMPERSONATION_TOKEN");
static const std::string ERROR_CANT_DISABLE_MANDATORY_STR("ERROR_CANT_DISABLE_MANDATORY");
static const std::string ERROR_NO_LOGON_SERVERS_STR("ERROR_NO_LOGON_SERVERS");
static const std::string ERROR_NO_SUCH_LOGON_SESSION_STR("ERROR_NO_SUCH_LOGON_SESSION");
static const std::string ERROR_NO_SUCH_PRIVILEGE_STR("ERROR_NO_SUCH_PRIVILEGE");
static const std::string ERROR_PRIVILEGE_NOT_HELD_STR("ERROR_PRIVILEGE_NOT_HELD");
static const std::string ERROR_INVALID_ACCOUNT_NAME_STR("ERROR_INVALID_ACCOUNT_NAME");
static const std::string ERROR_USER_EXISTS_STR("ERROR_USER_EXISTS");
static const std::string ERROR_NO_SUCH_USER_STR("ERROR_NO_SUCH_USER");
static const std::string ERROR_GROUP_EXISTS_STR("ERROR_GROUP_EXISTS");
static const std::string ERROR_NO_SUCH_GROUP_STR("ERROR_NO_SUCH_GROUP");
static const std::string ERROR_MEMBER_IN_GROUP_STR("ERROR_MEMBER_IN_GROUP");
static const std::string ERROR_MEMBER_NOT_IN_GROUP_STR("ERROR_MEMBER_NOT_IN_GROUP");
static const std::string ERROR_LAST_ADMIN_STR("ERROR_LAST_ADMIN");
static const std::string ERROR_WRONG_PASSWORD_STR("ERROR_WRONG_PASSWORD");
static const std::string ERROR_ILL_FORMED_PASSWORD_STR("ERROR_ILL_FORMED_PASSWORD");
static const std::string ERROR_PASSWORD_RESTRICTION_STR("ERROR_PASSWORD_RESTRICTION");
static const std::string ERROR_LOGON_FAILURE_STR("ERROR_LOGON_FAILURE");
static const std::string ERROR_ACCOUNT_RESTRICTION_STR("ERROR_ACCOUNT_RESTRICTION");
static const std::string ERROR_INVALID_LOGON_HOURS_STR("ERROR_INVALID_LOGON_HOURS");
static const std::string ERROR_INVALID_WORKSTATION_STR("ERROR_INVALID_WORKSTATION");
static const std::string ERROR_PASSWORD_EXPIRED_STR("ERROR_PASSWORD_EXPIRED");
static const std::string ERROR_ACCOUNT_DISABLED_STR("ERROR_ACCOUNT_DISABLED");
static const std::string ERROR_NONE_MAPPED_STR("ERROR_NONE_MAPPED");
static const std::string ERROR_TOO_MANY_LUIDS_REQUESTED_STR("ERROR_TOO_MANY_LUIDS_REQUESTED");
static const std::string ERROR_LUIDS_EXHAUSTED_STR("ERROR_LUIDS_EXHAUSTED");
static const std::string ERROR_INVALID_SUB_AUTHORITY_STR("ERROR_INVALID_SUB_AUTHORITY");
static const std::string ERROR_INVALID_ACL_STR("ERROR_INVALID_ACL");
static const std::string ERROR_INVALID_SID_STR("ERROR_INVALID_SID");
static const std::string ERROR_INVALID_SECURITY_DESCR_STR("ERROR_INVALID_SECURITY_DESCR");
static const std::string ERROR_BAD_INHERITANCE_ACL_STR("ERROR_BAD_INHERITANCE_ACL");
static const std::string ERROR_SERVER_DISABLED_STR("ERROR_SERVER_DISABLED");
static const std::string ERROR_SERVER_NOT_DISABLED_STR("ERROR_SERVER_NOT_DISABLED");
static const std::string ERROR_INVALID_ID_AUTHORITY_STR("ERROR_INVALID_ID_AUTHORITY");
static const std::string ERROR_ALLOTTED_SPACE_EXCEEDED_STR("ERROR_ALLOTTED_SPACE_EXCEEDED");
static const std::string ERROR_INVALID_GROUP_ATTRIBUTES_STR("ERROR_INVALID_GROUP_ATTRIBUTES");
static const std::string ERROR_BAD_IMPERSONATION_LEVEL_STR("ERROR_BAD_IMPERSONATION_LEVEL");
static const std::string ERROR_CANT_OPEN_ANONYMOUS_STR("ERROR_CANT_OPEN_ANONYMOUS");
static const std::string ERROR_BAD_VALIDATION_CLASS_STR("ERROR_BAD_VALIDATION_CLASS");
static const std::string ERROR_BAD_TOKEN_TYPE_STR("ERROR_BAD_TOKEN_TYPE");
static const std::string ERROR_NO_SECURITY_ON_OBJECT_STR("ERROR_NO_SECURITY_ON_OBJECT");
static const std::string ERROR_CANT_ACCESS_DOMAIN_INFO_STR("ERROR_CANT_ACCESS_DOMAIN_INFO");
static const std::string ERROR_INVALID_SERVER_STATE_STR("ERROR_INVALID_SERVER_STATE");
static const std::string ERROR_INVALID_DOMAIN_STATE_STR("ERROR_INVALID_DOMAIN_STATE");
static const std::string ERROR_INVALID_DOMAIN_ROLE_STR("ERROR_INVALID_DOMAIN_ROLE");
static const std::string ERROR_NO_SUCH_DOMAIN_STR("ERROR_NO_SUCH_DOMAIN");
static const std::string ERROR_DOMAIN_EXISTS_STR("ERROR_DOMAIN_EXISTS");
static const std::string ERROR_DOMAIN_LIMIT_EXCEEDED_STR("ERROR_DOMAIN_LIMIT_EXCEEDED");
static const std::string ERROR_INTERNAL_DB_CORRUPTION_STR("ERROR_INTERNAL_DB_CORRUPTION");
static const std::string ERROR_INTERNAL_ERROR_STR("ERROR_INTERNAL_ERROR");
static const std::string ERROR_GENERIC_NOT_MAPPED_STR("ERROR_GENERIC_NOT_MAPPED");
static const std::string ERROR_BAD_DESCRIPTOR_FORMAT_STR("ERROR_BAD_DESCRIPTOR_FORMAT");
static const std::string ERROR_NOT_LOGON_PROCESS_STR("ERROR_NOT_LOGON_PROCESS");
static const std::string ERROR_LOGON_SESSION_EXISTS_STR("ERROR_LOGON_SESSION_EXISTS");
static const std::string ERROR_NO_SUCH_PACKAGE_STR("ERROR_NO_SUCH_PACKAGE");
static const std::string ERROR_BAD_LOGON_SESSION_STATE_STR("ERROR_BAD_LOGON_SESSION_STATE");
static const std::string ERROR_LOGON_SESSION_COLLISION_STR("ERROR_LOGON_SESSION_COLLISION");
static const std::string ERROR_INVALID_LOGON_TYPE_STR("ERROR_INVALID_LOGON_TYPE");
static const std::string ERROR_CANNOT_IMPERSONATE_STR("ERROR_CANNOT_IMPERSONATE");
static const std::string ERROR_RXACT_INVALID_STATE_STR("ERROR_RXACT_INVALID_STATE");
static const std::string ERROR_RXACT_COMMIT_FAILURE_STR("ERROR_RXACT_COMMIT_FAILURE");
static const std::string ERROR_SPECIAL_ACCOUNT_STR("ERROR_SPECIAL_ACCOUNT");
static const std::string ERROR_SPECIAL_GROUP_STR("ERROR_SPECIAL_GROUP");
static const std::string ERROR_SPECIAL_USER_STR("ERROR_SPECIAL_USER");
static const std::string ERROR_MEMBERS_PRIMARY_GROUP_STR("ERROR_MEMBERS_PRIMARY_GROUP");
static const std::string ERROR_TOKEN_ALREADY_IN_USE_STR("ERROR_TOKEN_ALREADY_IN_USE");
static const std::string ERROR_NO_SUCH_ALIAS_STR("ERROR_NO_SUCH_ALIAS");
static const std::string ERROR_MEMBER_NOT_IN_ALIAS_STR("ERROR_MEMBER_NOT_IN_ALIAS");
static const std::string ERROR_MEMBER_IN_ALIAS_STR("ERROR_MEMBER_IN_ALIAS");
static const std::string ERROR_ALIAS_EXISTS_STR("ERROR_ALIAS_EXISTS");
static const std::string ERROR_LOGON_NOT_GRANTED_STR("ERROR_LOGON_NOT_GRANTED");
static const std::string ERROR_TOO_MANY_SECRETS_STR("ERROR_TOO_MANY_SECRETS");
static const std::string ERROR_SECRET_TOO_LONG_STR("ERROR_SECRET_TOO_LONG");
static const std::string ERROR_INTERNAL_DB_ERROR_STR("ERROR_INTERNAL_DB_ERROR");
static const std::string ERROR_TOO_MANY_CONTEXT_IDS_STR("ERROR_TOO_MANY_CONTEXT_IDS");
static const std::string ERROR_LOGON_TYPE_NOT_GRANTED_STR("ERROR_LOGON_TYPE_NOT_GRANTED");
static const std::string
    ERROR_NT_CROSS_ENCRYPTION_REQUIRED_STR("ERROR_NT_CROSS_ENCRYPTION_REQUIRED");
static const std::string ERROR_NO_SUCH_MEMBER_STR("ERROR_NO_SUCH_MEMBER");
static const std::string ERROR_INVALID_MEMBER_STR("ERROR_INVALID_MEMBER");
static const std::string ERROR_TOO_MANY_SIDS_STR("ERROR_TOO_MANY_SIDS");
static const std::string
    ERROR_LM_CROSS_ENCRYPTION_REQUIRED_STR("ERROR_LM_CROSS_ENCRYPTION_REQUIRED");
static const std::string ERROR_NO_INHERITANCE_STR("ERROR_NO_INHERITANCE");
static const std::string ERROR_FILE_CORRUPT_STR("ERROR_FILE_CORRUPT");
static const std::string ERROR_DISK_CORRUPT_STR("ERROR_DISK_CORRUPT");
static const std::string ERROR_NO_USER_SESSION_KEY_STR("ERROR_NO_USER_SESSION_KEY");
static const std::string ERROR_LICENSE_QUOTA_EXCEEDED_STR("ERROR_LICENSE_QUOTA_EXCEEDED");
static const std::string ERROR_WRONG_TARGET_NAME_STR("ERROR_WRONG_TARGET_NAME");
static const std::string ERROR_MUTUAL_AUTH_FAILED_STR("ERROR_MUTUAL_AUTH_FAILED");
static const std::string ERROR_TIME_SKEW_STR("ERROR_TIME_SKEW");
static const std::string ERROR_CURRENT_DOMAIN_NOT_ALLOWED_STR("ERROR_CURRENT_DOMAIN_NOT_ALLOWED");
static const std::string ERROR_INVALID_WINDOW_HANDLE_STR("ERROR_INVALID_WINDOW_HANDLE");
static const std::string ERROR_INVALID_MENU_HANDLE_STR("ERROR_INVALID_MENU_HANDLE");
static const std::string ERROR_INVALID_CURSOR_HANDLE_STR("ERROR_INVALID_CURSOR_HANDLE");
static const std::string ERROR_INVALID_ACCEL_HANDLE_STR("ERROR_INVALID_ACCEL_HANDLE");
static const std::string ERROR_INVALID_HOOK_HANDLE_STR("ERROR_INVALID_HOOK_HANDLE");
static const std::string ERROR_INVALID_DWP_HANDLE_STR("ERROR_INVALID_DWP_HANDLE");
static const std::string ERROR_TLW_WITH_WSCHILD_STR("ERROR_TLW_WITH_WSCHILD");
static const std::string ERROR_CANNOT_FIND_WND_CLASS_STR("ERROR_CANNOT_FIND_WND_CLASS");
static const std::string ERROR_WINDOW_OF_OTHER_THREAD_STR("ERROR_WINDOW_OF_OTHER_THREAD");
static const std::string ERROR_HOTKEY_ALREADY_REGISTERED_STR("ERROR_HOTKEY_ALREADY_REGISTERED");
static const std::string ERROR_CLASS_ALREADY_EXISTS_STR("ERROR_CLASS_ALREADY_EXISTS");
static const std::string ERROR_CLASS_DOES_NOT_EXIST_STR("ERROR_CLASS_DOES_NOT_EXIST");
static const std::string ERROR_CLASS_HAS_WINDOWS_STR("ERROR_CLASS_HAS_WINDOWS");
static const std::string ERROR_INVALID_INDEX_STR("ERROR_INVALID_INDEX");
static const std::string ERROR_INVALID_ICON_HANDLE_STR("ERROR_INVALID_ICON_HANDLE");
static const std::string ERROR_PRIVATE_DIALOG_INDEX_STR("ERROR_PRIVATE_DIALOG_INDEX");
static const std::string ERROR_LISTBOX_ID_NOT_FOUND_STR("ERROR_LISTBOX_ID_NOT_FOUND");
static const std::string ERROR_NO_WILDCARD_CHARACTERS_STR("ERROR_NO_WILDCARD_CHARACTERS");
static const std::string ERROR_CLIPBOARD_NOT_OPEN_STR("ERROR_CLIPBOARD_NOT_OPEN");
static const std::string ERROR_HOTKEY_NOT_REGISTERED_STR("ERROR_HOTKEY_NOT_REGISTERED");
static const std::string ERROR_WINDOW_NOT_DIALOG_STR("ERROR_WINDOW_NOT_DIALOG");
static const std::string ERROR_CONTROL_ID_NOT_FOUND_STR("ERROR_CONTROL_ID_NOT_FOUND");
static const std::string ERROR_INVALID_COMBOBOX_MESSAGE_STR("ERROR_INVALID_COMBOBOX_MESSAGE");
static const std::string ERROR_WINDOW_NOT_COMBOBOX_STR("ERROR_WINDOW_NOT_COMBOBOX");
static const std::string ERROR_INVALID_EDIT_HEIGHT_STR("ERROR_INVALID_EDIT_HEIGHT");
static const std::string ERROR_DC_NOT_FOUND_STR("ERROR_DC_NOT_FOUND");
static const std::string ERROR_INVALID_HOOK_FILTER_STR("ERROR_INVALID_HOOK_FILTER");
static const std::string ERROR_INVALID_FILTER_PROC_STR("ERROR_INVALID_FILTER_PROC");
static const std::string ERROR_HOOK_NEEDS_HMOD_STR("ERROR_HOOK_NEEDS_HMOD");
static const std::string ERROR_GLOBAL_ONLY_HOOK_STR("ERROR_GLOBAL_ONLY_HOOK");
static const std::string ERROR_JOURNAL_HOOK_SET_STR("ERROR_JOURNAL_HOOK_SET");
static const std::string ERROR_HOOK_NOT_INSTALLED_STR("ERROR_HOOK_NOT_INSTALLED");
static const std::string ERROR_INVALID_LB_MESSAGE_STR("ERROR_INVALID_LB_MESSAGE");
static const std::string ERROR_SETCOUNT_ON_BAD_LB_STR("ERROR_SETCOUNT_ON_BAD_LB");
static const std::string ERROR_LB_WITHOUT_TABSTOPS_STR("ERROR_LB_WITHOUT_TABSTOPS");
static const std::string
    ERROR_DESTROY_OBJECT_OF_OTHER_THREAD_STR("ERROR_DESTROY_OBJECT_OF_OTHER_THREAD");
static const std::string ERROR_CHILD_WINDOW_MENU_STR("ERROR_CHILD_WINDOW_MENU");
static const std::string ERROR_NO_SYSTEM_MENU_STR("ERROR_NO_SYSTEM_MENU");
static const std::string ERROR_INVALID_MSGBOX_STYLE_STR("ERROR_INVALID_MSGBOX_STYLE");
static const std::string ERROR_INVALID_SPI_VALUE_STR("ERROR_INVALID_SPI_VALUE");
static const std::string ERROR_SCREEN_ALREADY_LOCKED_STR("ERROR_SCREEN_ALREADY_LOCKED");
static const std::string ERROR_HWNDS_HAVE_DIFF_PARENT_STR("ERROR_HWNDS_HAVE_DIFF_PARENT");
static const std::string ERROR_NOT_CHILD_WINDOW_STR("ERROR_NOT_CHILD_WINDOW");
static const std::string ERROR_INVALID_GW_COMMAND_STR("ERROR_INVALID_GW_COMMAND");
static const std::string ERROR_INVALID_THREAD_ID_STR("ERROR_INVALID_THREAD_ID");
static const std::string ERROR_NON_MDICHILD_WINDOW_STR("ERROR_NON_MDICHILD_WINDOW");
static const std::string ERROR_POPUP_ALREADY_ACTIVE_STR("ERROR_POPUP_ALREADY_ACTIVE");
static const std::string ERROR_NO_SCROLLBARS_STR("ERROR_NO_SCROLLBARS");
static const std::string ERROR_INVALID_SCROLLBAR_RANGE_STR("ERROR_INVALID_SCROLLBAR_RANGE");
static const std::string ERROR_INVALID_SHOWWIN_COMMAND_STR("ERROR_INVALID_SHOWWIN_COMMAND");
static const std::string ERROR_NO_SYSTEM_RESOURCES_STR("ERROR_NO_SYSTEM_RESOURCES");
static const std::string ERROR_NONPAGED_SYSTEM_RESOURCES_STR("ERROR_NONPAGED_SYSTEM_RESOURCES");
static const std::string ERROR_PAGED_SYSTEM_RESOURCES_STR("ERROR_PAGED_SYSTEM_RESOURCES");
static const std::string ERROR_WORKING_SET_QUOTA_STR("ERROR_WORKING_SET_QUOTA");
static const std::string ERROR_PAGEFILE_QUOTA_STR("ERROR_PAGEFILE_QUOTA");
static const std::string ERROR_COMMITMENT_LIMIT_STR("ERROR_COMMITMENT_LIMIT");
static const std::string ERROR_MENU_ITEM_NOT_FOUND_STR("ERROR_MENU_ITEM_NOT_FOUND");
static const std::string ERROR_INVALID_KEYBOARD_HANDLE_STR("ERROR_INVALID_KEYBOARD_HANDLE");
static const std::string ERROR_HOOK_TYPE_NOT_ALLOWED_STR("ERROR_HOOK_TYPE_NOT_ALLOWED");
static const std::string
    ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION_STR("ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION");
static const std::string ERROR_TIMEOUT_STR("ERROR_TIMEOUT");
static const std::string ERROR_INVALID_MONITOR_HANDLE_STR("ERROR_INVALID_MONITOR_HANDLE");
static const std::string ERROR_INCORRECT_SIZE_STR("ERROR_INCORRECT_SIZE");
static const std::string ERROR_SYMLINK_CLASS_DISABLED_STR("ERROR_SYMLINK_CLASS_DISABLED");
static const std::string ERROR_SYMLINK_NOT_SUPPORTED_STR("ERROR_SYMLINK_NOT_SUPPORTED");
static const std::string ERROR_XML_PARSE_ERROR_STR("ERROR_XML_PARSE_ERROR");
static const std::string ERROR_XMLDSIG_ERROR_STR("ERROR_XMLDSIG_ERROR");
static const std::string ERROR_RESTART_APPLICATION_STR("ERROR_RESTART_APPLICATION");
static const std::string ERROR_WRONG_COMPARTMENT_STR("ERROR_WRONG_COMPARTMENT");
static const std::string ERROR_AUTHIP_FAILURE_STR("ERROR_AUTHIP_FAILURE");
static const std::string ERROR_NO_NVRAM_RESOURCES_STR("ERROR_NO_NVRAM_RESOURCES");
static const std::string ERROR_EVENTLOG_FILE_CORRUPT_STR("ERROR_EVENTLOG_FILE_CORRUPT");
static const std::string ERROR_EVENTLOG_CANT_START_STR("ERROR_EVENTLOG_CANT_START");
static const std::string ERROR_LOG_FILE_FULL_STR("ERROR_LOG_FILE_FULL");
static const std::string ERROR_EVENTLOG_FILE_CHANGED_STR("ERROR_EVENTLOG_FILE_CHANGED");
static const std::string ERROR_INVALID_TASK_NAME_STR("ERROR_INVALID_TASK_NAME");
static const std::string ERROR_INVALID_TASK_INDEX_STR("ERROR_INVALID_TASK_INDEX");
static const std::string ERROR_THREAD_ALREADY_IN_TASK_STR("ERROR_THREAD_ALREADY_IN_TASK");
static const std::string ERROR_INSTALL_SERVICE_FAILURE_STR("ERROR_INSTALL_SERVICE_FAILURE");
static const std::string ERROR_INSTALL_USEREXIT_STR("ERROR_INSTALL_USEREXIT");
static const std::string ERROR_INSTALL_FAILURE_STR("ERROR_INSTALL_FAILURE");
static const std::string ERROR_INSTALL_SUSPEND_STR("ERROR_INSTALL_SUSPEND");
static const std::string ERROR_UNKNOWN_PRODUCT_STR("ERROR_UNKNOWN_PRODUCT");
static const std::string ERROR_UNKNOWN_FEATURE_STR("ERROR_UNKNOWN_FEATURE");
static const std::string ERROR_UNKNOWN_COMPONENT_STR("ERROR_UNKNOWN_COMPONENT");
static const std::string ERROR_UNKNOWN_PROPERTY_STR("ERROR_UNKNOWN_PROPERTY");
static const std::string ERROR_INVALID_HANDLE_STATE_STR("ERROR_INVALID_HANDLE_STATE");
static const std::string ERROR_BAD_CONFIGURATION_STR("ERROR_BAD_CONFIGURATION");
static const std::string ERROR_INDEX_ABSENT_STR("ERROR_INDEX_ABSENT");
static const std::string ERROR_INSTALL_SOURCE_ABSENT_STR("ERROR_INSTALL_SOURCE_ABSENT");
static const std::string ERROR_INSTALL_PACKAGE_VERSION_STR("ERROR_INSTALL_PACKAGE_VERSION");
static const std::string ERROR_PRODUCT_UNINSTALLED_STR("ERROR_PRODUCT_UNINSTALLED");
static const std::string ERROR_BAD_QUERY_SYNTAX_STR("ERROR_BAD_QUERY_SYNTAX");
static const std::string ERROR_INVALID_FIELD_STR("ERROR_INVALID_FIELD");
static const std::string ERROR_DEVICE_REMOVED_STR("ERROR_DEVICE_REMOVED");
static const std::string ERROR_INSTALL_ALREADY_RUNNING_STR("ERROR_INSTALL_ALREADY_RUNNING");
static const std::string ERROR_INSTALL_PACKAGE_OPEN_FAILED_STR("ERROR_INSTALL_PACKAGE_OPEN_FAILED");
static const std::string ERROR_INSTALL_PACKAGE_INVALID_STR("ERROR_INSTALL_PACKAGE_INVALID");
static const std::string ERROR_INSTALL_UI_FAILURE_STR("ERROR_INSTALL_UI_FAILURE");
static const std::string ERROR_INSTALL_LOG_FAILURE_STR("ERROR_INSTALL_LOG_FAILURE");
static const std::string
    ERROR_INSTALL_LANGUAGE_UNSUPPORTED_STR("ERROR_INSTALL_LANGUAGE_UNSUPPORTED");
static const std::string ERROR_INSTALL_TRANSFORM_FAILURE_STR("ERROR_INSTALL_TRANSFORM_FAILURE");
static const std::string ERROR_INSTALL_PACKAGE_REJECTED_STR("ERROR_INSTALL_PACKAGE_REJECTED");
static const std::string ERROR_FUNCTION_NOT_CALLED_STR("ERROR_FUNCTION_NOT_CALLED");
static const std::string ERROR_FUNCTION_FAILED_STR("ERROR_FUNCTION_FAILED");
static const std::string ERROR_INVALID_TABLE_STR("ERROR_INVALID_TABLE");
static const std::string ERROR_DATATYPE_MISMATCH_STR("ERROR_DATATYPE_MISMATCH");
static const std::string ERROR_UNSUPPORTED_TYPE_STR("ERROR_UNSUPPORTED_TYPE");
static const std::string ERROR_CREATE_FAILED_STR("ERROR_CREATE_FAILED");
static const std::string ERROR_INSTALL_TEMP_UNWRITABLE_STR("ERROR_INSTALL_TEMP_UNWRITABLE");
static const std::string
    ERROR_INSTALL_PLATFORM_UNSUPPORTED_STR("ERROR_INSTALL_PLATFORM_UNSUPPORTED");
static const std::string ERROR_INSTALL_NOTUSED_STR("ERROR_INSTALL_NOTUSED");
static const std::string ERROR_PATCH_PACKAGE_OPEN_FAILED_STR("ERROR_PATCH_PACKAGE_OPEN_FAILED");
static const std::string ERROR_PATCH_PACKAGE_INVALID_STR("ERROR_PATCH_PACKAGE_INVALID");
static const std::string ERROR_PATCH_PACKAGE_UNSUPPORTED_STR("ERROR_PATCH_PACKAGE_UNSUPPORTED");
static const std::string ERROR_PRODUCT_VERSION_STR("ERROR_PRODUCT_VERSION");
static const std::string ERROR_INVALID_COMMAND_LINE_STR("ERROR_INVALID_COMMAND_LINE");
static const std::string ERROR_INSTALL_REMOTE_DISALLOWED_STR("ERROR_INSTALL_REMOTE_DISALLOWED");
static const std::string ERROR_SUCCESS_REBOOT_INITIATED_STR("ERROR_SUCCESS_REBOOT_INITIATED");
static const std::string ERROR_PATCH_TARGET_NOT_FOUND_STR("ERROR_PATCH_TARGET_NOT_FOUND");
static const std::string ERROR_PATCH_PACKAGE_REJECTED_STR("ERROR_PATCH_PACKAGE_REJECTED");
static const std::string ERROR_INSTALL_TRANSFORM_REJECTED_STR("ERROR_INSTALL_TRANSFORM_REJECTED");
static const std::string ERROR_INSTALL_REMOTE_PROHIBITED_STR("ERROR_INSTALL_REMOTE_PROHIBITED");
static const std::string ERROR_PATCH_REMOVAL_UNSUPPORTED_STR("ERROR_PATCH_REMOVAL_UNSUPPORTED");
static const std::string ERROR_UNKNOWN_PATCH_STR("ERROR_UNKNOWN_PATCH");
static const std::string ERROR_PATCH_NO_SEQUENCE_STR("ERROR_PATCH_NO_SEQUENCE");
static const std::string ERROR_PATCH_REMOVAL_DISALLOWED_STR("ERROR_PATCH_REMOVAL_DISALLOWED");
static const std::string ERROR_INVALID_PATCH_XML_STR("ERROR_INVALID_PATCH_XML");
static const std::string
    ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT_STR("ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT");
static const std::string ERROR_INSTALL_SERVICE_SAFEBOOT_STR("ERROR_INSTALL_SERVICE_SAFEBOOT");
static const std::string RPC_S_INVALID_STRING_BINDING_STR("RPC_S_INVALID_STRING_BINDING");
static const std::string RPC_S_WRONG_KIND_OF_BINDING_STR("RPC_S_WRONG_KIND_OF_BINDING");
static const std::string RPC_S_INVALID_BINDING_STR("RPC_S_INVALID_BINDING");
static const std::string RPC_S_PROTSEQ_NOT_SUPPORTED_STR("RPC_S_PROTSEQ_NOT_SUPPORTED");
static const std::string RPC_S_INVALID_RPC_PROTSEQ_STR("RPC_S_INVALID_RPC_PROTSEQ");
static const std::string RPC_S_INVALID_STRING_UUID_STR("RPC_S_INVALID_STRING_UUID");
static const std::string RPC_S_INVALID_ENDPOINT_FORMAT_STR("RPC_S_INVALID_ENDPOINT_FORMAT");
static const std::string RPC_S_INVALID_NET_ADDR_STR("RPC_S_INVALID_NET_ADDR");
static const std::string RPC_S_NO_ENDPOINT_FOUND_STR("RPC_S_NO_ENDPOINT_FOUND");
static const std::string RPC_S_INVALID_TIMEOUT_STR("RPC_S_INVALID_TIMEOUT");
static const std::string RPC_S_OBJECT_NOT_FOUND_STR("RPC_S_OBJECT_NOT_FOUND");
static const std::string RPC_S_ALREADY_REGISTERED_STR("RPC_S_ALREADY_REGISTERED");
static const std::string RPC_S_TYPE_ALREADY_REGISTERED_STR("RPC_S_TYPE_ALREADY_REGISTERED");
static const std::string RPC_S_ALREADY_LISTENING_STR("RPC_S_ALREADY_LISTENING");
static const std::string RPC_S_NO_PROTSEQS_REGISTERED_STR("RPC_S_NO_PROTSEQS_REGISTERED");
static const std::string RPC_S_NOT_LISTENING_STR("RPC_S_NOT_LISTENING");
static const std::string RPC_S_UNKNOWN_MGR_TYPE_STR("RPC_S_UNKNOWN_MGR_TYPE");
static const std::string RPC_S_UNKNOWN_IF_STR("RPC_S_UNKNOWN_IF");
static const std::string RPC_S_NO_BINDINGS_STR("RPC_S_NO_BINDINGS");
static const std::string RPC_S_NO_PROTSEQS_STR("RPC_S_NO_PROTSEQS");
static const std::string RPC_S_CANT_CREATE_ENDPOINT_STR("RPC_S_CANT_CREATE_ENDPOINT");
static const std::string RPC_S_OUT_OF_RESOURCES_STR("RPC_S_OUT_OF_RESOURCES");
static const std::string RPC_S_SERVER_UNAVAILABLE_STR("RPC_S_SERVER_UNAVAILABLE");
static const std::string RPC_S_SERVER_TOO_BUSY_STR("RPC_S_SERVER_TOO_BUSY");
static const std::string RPC_S_INVALID_NETWORK_OPTIONS_STR("RPC_S_INVALID_NETWORK_OPTIONS");
static const std::string RPC_S_NO_CALL_ACTIVE_STR("RPC_S_NO_CALL_ACTIVE");
static const std::string RPC_S_CALL_FAILED_STR("RPC_S_CALL_FAILED");
static const std::string RPC_S_CALL_FAILED_DNE_STR("RPC_S_CALL_FAILED_DNE");
static const std::string RPC_S_PROTOCOL_ERROR_STR("RPC_S_PROTOCOL_ERROR");
static const std::string RPC_S_UNSUPPORTED_TRANS_SYN_STR("RPC_S_UNSUPPORTED_TRANS_SYN");
static const std::string RPC_S_UNSUPPORTED_TYPE_STR("RPC_S_UNSUPPORTED_TYPE");
static const std::string RPC_S_INVALID_TAG_STR("RPC_S_INVALID_TAG");
static const std::string RPC_S_INVALID_BOUND_STR("RPC_S_INVALID_BOUND");
static const std::string RPC_S_NO_ENTRY_NAME_STR("RPC_S_NO_ENTRY_NAME");
static const std::string RPC_S_INVALID_NAME_SYNTAX_STR("RPC_S_INVALID_NAME_SYNTAX");
static const std::string RPC_S_UNSUPPORTED_NAME_SYNTAX_STR("RPC_S_UNSUPPORTED_NAME_SYNTAX");
static const std::string RPC_S_UUID_NO_ADDRESS_STR("RPC_S_UUID_NO_ADDRESS");
static const std::string RPC_S_DUPLICATE_ENDPOINT_STR("RPC_S_DUPLICATE_ENDPOINT");
static const std::string RPC_S_UNKNOWN_AUTHN_TYPE_STR("RPC_S_UNKNOWN_AUTHN_TYPE");
static const std::string RPC_S_MAX_CALLS_TOO_SMALL_STR("RPC_S_MAX_CALLS_TOO_SMALL");
static const std::string RPC_S_STRING_TOO_LONG_STR("RPC_S_STRING_TOO_LONG");
static const std::string RPC_S_PROTSEQ_NOT_FOUND_STR("RPC_S_PROTSEQ_NOT_FOUND");
static const std::string RPC_S_PROCNUM_OUT_OF_RANGE_STR("RPC_S_PROCNUM_OUT_OF_RANGE");
static const std::string RPC_S_BINDING_HAS_NO_AUTH_STR("RPC_S_BINDING_HAS_NO_AUTH");
static const std::string RPC_S_UNKNOWN_AUTHN_SERVICE_STR("RPC_S_UNKNOWN_AUTHN_SERVICE");
static const std::string RPC_S_UNKNOWN_AUTHN_LEVEL_STR("RPC_S_UNKNOWN_AUTHN_LEVEL");
static const std::string RPC_S_INVALID_AUTH_IDENTITY_STR("RPC_S_INVALID_AUTH_IDENTITY");
static const std::string RPC_S_UNKNOWN_AUTHZ_SERVICE_STR("RPC_S_UNKNOWN_AUTHZ_SERVICE");
static const std::string EPT_S_INVALID_ENTRY_STR("EPT_S_INVALID_ENTRY");
static const std::string EPT_S_CANT_PERFORM_OP_STR("EPT_S_CANT_PERFORM_OP");
static const std::string EPT_S_NOT_REGISTERED_STR("EPT_S_NOT_REGISTERED");
static const std::string RPC_S_NOTHING_TO_EXPORT_STR("RPC_S_NOTHING_TO_EXPORT");
static const std::string RPC_S_INCOMPLETE_NAME_STR("RPC_S_INCOMPLETE_NAME");
static const std::string RPC_S_INVALID_VERS_OPTION_STR("RPC_S_INVALID_VERS_OPTION");
static const std::string RPC_S_NO_MORE_MEMBERS_STR("RPC_S_NO_MORE_MEMBERS");
static const std::string RPC_S_NOT_ALL_OBJS_UNEXPORTED_STR("RPC_S_NOT_ALL_OBJS_UNEXPORTED");
static const std::string RPC_S_INTERFACE_NOT_FOUND_STR("RPC_S_INTERFACE_NOT_FOUND");
static const std::string RPC_S_ENTRY_ALREADY_EXISTS_STR("RPC_S_ENTRY_ALREADY_EXISTS");
static const std::string RPC_S_ENTRY_NOT_FOUND_STR("RPC_S_ENTRY_NOT_FOUND");
static const std::string RPC_S_NAME_SERVICE_UNAVAILABLE_STR("RPC_S_NAME_SERVICE_UNAVAILABLE");
static const std::string RPC_S_INVALID_NAF_ID_STR("RPC_S_INVALID_NAF_ID");
static const std::string RPC_S_CANNOT_SUPPORT_STR("RPC_S_CANNOT_SUPPORT");
static const std::string RPC_S_NO_CONTEXT_AVAILABLE_STR("RPC_S_NO_CONTEXT_AVAILABLE");
static const std::string RPC_S_INTERNAL_ERROR_STR("RPC_S_INTERNAL_ERROR");
static const std::string RPC_S_ZERO_DIVIDE_STR("RPC_S_ZERO_DIVIDE");
static const std::string RPC_S_ADDRESS_ERROR_STR("RPC_S_ADDRESS_ERROR");
static const std::string RPC_S_FP_DIV_ZERO_STR("RPC_S_FP_DIV_ZERO");
static const std::string RPC_S_FP_UNDERFLOW_STR("RPC_S_FP_UNDERFLOW");
static const std::string RPC_S_FP_OVERFLOW_STR("RPC_S_FP_OVERFLOW");
static const std::string RPC_X_NO_MORE_ENTRIES_STR("RPC_X_NO_MORE_ENTRIES");
static const std::string RPC_X_SS_CHAR_TRANS_OPEN_FAIL_STR("RPC_X_SS_CHAR_TRANS_OPEN_FAIL");
static const std::string RPC_X_SS_CHAR_TRANS_SHORT_FILE_STR("RPC_X_SS_CHAR_TRANS_SHORT_FILE");
static const std::string RPC_X_SS_IN_NULL_CONTEXT_STR("RPC_X_SS_IN_NULL_CONTEXT");
static const std::string RPC_X_SS_CONTEXT_DAMAGED_STR("RPC_X_SS_CONTEXT_DAMAGED");
static const std::string RPC_X_SS_HANDLES_MISMATCH_STR("RPC_X_SS_HANDLES_MISMATCH");
static const std::string RPC_X_SS_CANNOT_GET_CALL_HANDLE_STR("RPC_X_SS_CANNOT_GET_CALL_HANDLE");
static const std::string RPC_X_NULL_REF_POINTER_STR("RPC_X_NULL_REF_POINTER");
static const std::string RPC_X_ENUM_VALUE_OUT_OF_RANGE_STR("RPC_X_ENUM_VALUE_OUT_OF_RANGE");
static const std::string RPC_X_BYTE_COUNT_TOO_SMALL_STR("RPC_X_BYTE_COUNT_TOO_SMALL");
static const std::string RPC_X_BAD_STUB_DATA_STR("RPC_X_BAD_STUB_DATA");
static const std::string ERROR_INVALID_USER_BUFFER_STR("ERROR_INVALID_USER_BUFFER");
static const std::string ERROR_UNRECOGNIZED_MEDIA_STR("ERROR_UNRECOGNIZED_MEDIA");
static const std::string ERROR_NO_TRUST_LSA_SECRET_STR("ERROR_NO_TRUST_LSA_SECRET");
static const std::string ERROR_NO_TRUST_SAM_ACCOUNT_STR("ERROR_NO_TRUST_SAM_ACCOUNT");
static const std::string ERROR_TRUSTED_DOMAIN_FAILURE_STR("ERROR_TRUSTED_DOMAIN_FAILURE");
static const std::string
    ERROR_TRUSTED_RELATIONSHIP_FAILURE_STR("ERROR_TRUSTED_RELATIONSHIP_FAILURE");
static const std::string ERROR_TRUST_FAILURE_STR("ERROR_TRUST_FAILURE");
static const std::string RPC_S_CALL_IN_PROGRESS_STR("RPC_S_CALL_IN_PROGRESS");
static const std::string ERROR_NETLOGON_NOT_STARTED_STR("ERROR_NETLOGON_NOT_STARTED");
static const std::string ERROR_ACCOUNT_EXPIRED_STR("ERROR_ACCOUNT_EXPIRED");
static const std::string ERROR_REDIRECTOR_HAS_OPEN_HANDLES_STR("ERROR_REDIRECTOR_HAS_OPEN_HANDLES");
static const std::string
    ERROR_PRINTER_DRIVER_ALREADY_INSTALLED_STR("ERROR_PRINTER_DRIVER_ALREADY_INSTALLED");
static const std::string ERROR_UNKNOWN_PORT_STR("ERROR_UNKNOWN_PORT");
static const std::string ERROR_UNKNOWN_PRINTER_DRIVER_STR("ERROR_UNKNOWN_PRINTER_DRIVER");
static const std::string ERROR_UNKNOWN_PRINTPROCESSOR_STR("ERROR_UNKNOWN_PRINTPROCESSOR");
static const std::string ERROR_INVALID_SEPARATOR_FILE_STR("ERROR_INVALID_SEPARATOR_FILE");
static const std::string ERROR_INVALID_PRIORITY_STR("ERROR_INVALID_PRIORITY");
static const std::string ERROR_INVALID_PRINTER_NAME_STR("ERROR_INVALID_PRINTER_NAME");
static const std::string ERROR_PRINTER_ALREADY_EXISTS_STR("ERROR_PRINTER_ALREADY_EXISTS");
static const std::string ERROR_INVALID_PRINTER_COMMAND_STR("ERROR_INVALID_PRINTER_COMMAND");
static const std::string ERROR_INVALID_DATATYPE_STR("ERROR_INVALID_DATATYPE");
static const std::string ERROR_INVALID_ENVIRONMENT_STR("ERROR_INVALID_ENVIRONMENT");
static const std::string RPC_S_NO_MORE_BINDINGS_STR("RPC_S_NO_MORE_BINDINGS");
static const std::string
    ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT_STR("ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT");
static const std::string
    ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT_STR("ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT");
static const std::string
    ERROR_NOLOGON_SERVER_TRUST_ACCOUNT_STR("ERROR_NOLOGON_SERVER_TRUST_ACCOUNT");
static const std::string ERROR_DOMAIN_TRUST_INCONSISTENT_STR("ERROR_DOMAIN_TRUST_INCONSISTENT");
static const std::string ERROR_SERVER_HAS_OPEN_HANDLES_STR("ERROR_SERVER_HAS_OPEN_HANDLES");
static const std::string ERROR_RESOURCE_DATA_NOT_FOUND_STR("ERROR_RESOURCE_DATA_NOT_FOUND");
static const std::string ERROR_RESOURCE_TYPE_NOT_FOUND_STR("ERROR_RESOURCE_TYPE_NOT_FOUND");
static const std::string ERROR_RESOURCE_NAME_NOT_FOUND_STR("ERROR_RESOURCE_NAME_NOT_FOUND");
static const std::string ERROR_RESOURCE_LANG_NOT_FOUND_STR("ERROR_RESOURCE_LANG_NOT_FOUND");
static const std::string ERROR_NOT_ENOUGH_QUOTA_STR("ERROR_NOT_ENOUGH_QUOTA");
static const std::string RPC_S_NO_INTERFACES_STR("RPC_S_NO_INTERFACES");
static const std::string RPC_S_CALL_CANCELLED_STR("RPC_S_CALL_CANCELLED");
static const std::string RPC_S_BINDING_INCOMPLETE_STR("RPC_S_BINDING_INCOMPLETE");
static const std::string RPC_S_COMM_FAILURE_STR("RPC_S_COMM_FAILURE");
static const std::string RPC_S_UNSUPPORTED_AUTHN_LEVEL_STR("RPC_S_UNSUPPORTED_AUTHN_LEVEL");
static const std::string RPC_S_NO_PRINC_NAME_STR("RPC_S_NO_PRINC_NAME");
static const std::string RPC_S_NOT_RPC_ERROR_STR("RPC_S_NOT_RPC_ERROR");
static const std::string RPC_S_UUID_LOCAL_ONLY_STR("RPC_S_UUID_LOCAL_ONLY");
static const std::string RPC_S_SEC_PKG_ERROR_STR("RPC_S_SEC_PKG_ERROR");
static const std::string RPC_S_NOT_CANCELLED_STR("RPC_S_NOT_CANCELLED");
static const std::string RPC_X_INVALID_ES_ACTION_STR("RPC_X_INVALID_ES_ACTION");
static const std::string RPC_X_WRONG_ES_VERSION_STR("RPC_X_WRONG_ES_VERSION");
static const std::string RPC_X_WRONG_STUB_VERSION_STR("RPC_X_WRONG_STUB_VERSION");
static const std::string RPC_X_INVALID_PIPE_OBJECT_STR("RPC_X_INVALID_PIPE_OBJECT");
static const std::string RPC_X_WRONG_PIPE_ORDER_STR("RPC_X_WRONG_PIPE_ORDER");
static const std::string RPC_X_WRONG_PIPE_VERSION_STR("RPC_X_WRONG_PIPE_VERSION");
static const std::string RPC_S_GROUP_MEMBER_NOT_FOUND_STR("RPC_S_GROUP_MEMBER_NOT_FOUND");
static const std::string EPT_S_CANT_CREATE_STR("EPT_S_CANT_CREATE");
static const std::string RPC_S_INVALID_OBJECT_STR("RPC_S_INVALID_OBJECT");
static const std::string ERROR_INVALID_TIME_STR("ERROR_INVALID_TIME");
static const std::string ERROR_INVALID_FORM_NAME_STR("ERROR_INVALID_FORM_NAME");
static const std::string ERROR_INVALID_FORM_SIZE_STR("ERROR_INVALID_FORM_SIZE");
static const std::string ERROR_ALREADY_WAITING_STR("ERROR_ALREADY_WAITING");
static const std::string ERROR_PRINTER_DELETED_STR("ERROR_PRINTER_DELETED");
static const std::string ERROR_INVALID_PRINTER_STATE_STR("ERROR_INVALID_PRINTER_STATE");
static const std::string ERROR_PASSWORD_MUST_CHANGE_STR("ERROR_PASSWORD_MUST_CHANGE");
static const std::string ERROR_DOMAIN_CONTROLLER_NOT_FOUND_STR("ERROR_DOMAIN_CONTROLLER_NOT_FOUND");
static const std::string ERROR_ACCOUNT_LOCKED_OUT_STR("ERROR_ACCOUNT_LOCKED_OUT");
static const std::string OR_INVALID_OXID_STR("OR_INVALID_OXID");
static const std::string OR_INVALID_OID_STR("OR_INVALID_OID");
static const std::string OR_INVALID_SET_STR("OR_INVALID_SET");
static const std::string RPC_S_SEND_INCOMPLETE_STR("RPC_S_SEND_INCOMPLETE");
static const std::string RPC_S_INVALID_ASYNC_HANDLE_STR("RPC_S_INVALID_ASYNC_HANDLE");
static const std::string RPC_S_INVALID_ASYNC_CALL_STR("RPC_S_INVALID_ASYNC_CALL");
static const std::string RPC_X_PIPE_CLOSED_STR("RPC_X_PIPE_CLOSED");
static const std::string RPC_X_PIPE_DISCIPLINE_ERROR_STR("RPC_X_PIPE_DISCIPLINE_ERROR");
static const std::string RPC_X_PIPE_EMPTY_STR("RPC_X_PIPE_EMPTY");
static const std::string ERROR_NO_SITENAME_STR("ERROR_NO_SITENAME");
static const std::string ERROR_CANT_ACCESS_FILE_STR("ERROR_CANT_ACCESS_FILE");
static const std::string ERROR_CANT_RESOLVE_FILENAME_STR("ERROR_CANT_RESOLVE_FILENAME");
static const std::string RPC_S_ENTRY_TYPE_MISMATCH_STR("RPC_S_ENTRY_TYPE_MISMATCH");
static const std::string RPC_S_NOT_ALL_OBJS_EXPORTED_STR("RPC_S_NOT_ALL_OBJS_EXPORTED");
static const std::string RPC_S_INTERFACE_NOT_EXPORTED_STR("RPC_S_INTERFACE_NOT_EXPORTED");
static const std::string RPC_S_PROFILE_NOT_ADDED_STR("RPC_S_PROFILE_NOT_ADDED");
static const std::string RPC_S_PRF_ELT_NOT_ADDED_STR("RPC_S_PRF_ELT_NOT_ADDED");
static const std::string RPC_S_PRF_ELT_NOT_REMOVED_STR("RPC_S_PRF_ELT_NOT_REMOVED");
static const std::string RPC_S_GRP_ELT_NOT_ADDED_STR("RPC_S_GRP_ELT_NOT_ADDED");
static const std::string RPC_S_GRP_ELT_NOT_REMOVED_STR("RPC_S_GRP_ELT_NOT_REMOVED");
static const std::string ERROR_KM_DRIVER_BLOCKED_STR("ERROR_KM_DRIVER_BLOCKED");
static const std::string ERROR_CONTEXT_EXPIRED_STR("ERROR_CONTEXT_EXPIRED");
static const std::string
    ERROR_PER_USER_TRUST_QUOTA_EXCEEDED_STR("ERROR_PER_USER_TRUST_QUOTA_EXCEEDED");
static const std::string
    ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED_STR("ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED");
static const std::string
    ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED_STR("ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED");
static const std::string
    ERROR_AUTHENTICATION_FIREWALL_FAILED_STR("ERROR_AUTHENTICATION_FIREWALL_FAILED");
static const std::string
    ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED_STR("ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED");
static const std::string ERROR_INVALID_PIXEL_FORMAT_STR("ERROR_INVALID_PIXEL_FORMAT");
static const std::string ERROR_BAD_DRIVER_STR("ERROR_BAD_DRIVER");
static const std::string ERROR_INVALID_WINDOW_STYLE_STR("ERROR_INVALID_WINDOW_STYLE");
static const std::string ERROR_METAFILE_NOT_SUPPORTED_STR("ERROR_METAFILE_NOT_SUPPORTED");
static const std::string ERROR_TRANSFORM_NOT_SUPPORTED_STR("ERROR_TRANSFORM_NOT_SUPPORTED");
static const std::string ERROR_CLIPPING_NOT_SUPPORTED_STR("ERROR_CLIPPING_NOT_SUPPORTED");
static const std::string ERROR_INVALID_CMM_STR("ERROR_INVALID_CMM");
static const std::string ERROR_INVALID_PROFILE_STR("ERROR_INVALID_PROFILE");
static const std::string ERROR_TAG_NOT_FOUND_STR("ERROR_TAG_NOT_FOUND");
static const std::string ERROR_TAG_NOT_PRESENT_STR("ERROR_TAG_NOT_PRESENT");
static const std::string ERROR_DUPLICATE_TAG_STR("ERROR_DUPLICATE_TAG");
static const std::string
    ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE_STR("ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE");
static const std::string ERROR_PROFILE_NOT_FOUND_STR("ERROR_PROFILE_NOT_FOUND");
static const std::string ERROR_INVALID_COLORSPACE_STR("ERROR_INVALID_COLORSPACE");
static const std::string ERROR_ICM_NOT_ENABLED_STR("ERROR_ICM_NOT_ENABLED");
static const std::string ERROR_DELETING_ICM_XFORM_STR("ERROR_DELETING_ICM_XFORM");
static const std::string ERROR_INVALID_TRANSFORM_STR("ERROR_INVALID_TRANSFORM");
static const std::string ERROR_COLORSPACE_MISMATCH_STR("ERROR_COLORSPACE_MISMATCH");
static const std::string ERROR_INVALID_COLORINDEX_STR("ERROR_INVALID_COLORINDEX");
static const std::string ERROR_CONNECTED_OTHER_PASSWORD_STR("ERROR_CONNECTED_OTHER_PASSWORD");
static const std::string ERROR_BAD_USERNAME_STR("ERROR_BAD_USERNAME");
static const std::string ERROR_NOT_CONNECTED_STR("ERROR_NOT_CONNECTED");
static const std::string ERROR_OPEN_FILES_STR("ERROR_OPEN_FILES");
static const std::string ERROR_ACTIVE_CONNECTIONS_STR("ERROR_ACTIVE_CONNECTIONS");
static const std::string ERROR_DEVICE_IN_USE_STR("ERROR_DEVICE_IN_USE");
static const std::string ERROR_UNKNOWN_PRINT_MONITOR_STR("ERROR_UNKNOWN_PRINT_MONITOR");
static const std::string ERROR_PRINTER_DRIVER_IN_USE_STR("ERROR_PRINTER_DRIVER_IN_USE");
static const std::string ERROR_SPOOL_FILE_NOT_FOUND_STR("ERROR_SPOOL_FILE_NOT_FOUND");
static const std::string ERROR_SPL_NO_STARTDOC_STR("ERROR_SPL_NO_STARTDOC");
static const std::string ERROR_SPL_NO_ADDJOB_STR("ERROR_SPL_NO_ADDJOB");
static const std::string
    ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED_STR("ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED");
static const std::string
    ERROR_PRINT_MONITOR_ALREADY_INSTALLED_STR("ERROR_PRINT_MONITOR_ALREADY_INSTALLED");
static const std::string ERROR_INVALID_PRINT_MONITOR_STR("ERROR_INVALID_PRINT_MONITOR");
static const std::string ERROR_PRINT_MONITOR_IN_USE_STR("ERROR_PRINT_MONITOR_IN_USE");
static const std::string ERROR_PRINTER_HAS_JOBS_QUEUED_STR("ERROR_PRINTER_HAS_JOBS_QUEUED");
static const std::string ERROR_SUCCESS_REBOOT_REQUIRED_STR("ERROR_SUCCESS_REBOOT_REQUIRED");
static const std::string ERROR_SUCCESS_RESTART_REQUIRED_STR("ERROR_SUCCESS_RESTART_REQUIRED");
static const std::string ERROR_PRINTER_NOT_FOUND_STR("ERROR_PRINTER_NOT_FOUND");
static const std::string ERROR_PRINTER_DRIVER_WARNED_STR("ERROR_PRINTER_DRIVER_WARNED");
static const std::string ERROR_PRINTER_DRIVER_BLOCKED_STR("ERROR_PRINTER_DRIVER_BLOCKED");
static const std::string ERROR_REQUEST_PAUSED_STR("ERROR_REQUEST_PAUSED");
static const std::string ERROR_WINS_INTERNAL_STR("ERROR_WINS_INTERNAL");
static const std::string ERROR_CAN_NOT_DEL_LOCAL_WINS_STR("ERROR_CAN_NOT_DEL_LOCAL_WINS");
static const std::string ERROR_STATIC_INIT_STR("ERROR_STATIC_INIT");
static const std::string ERROR_INC_BACKUP_STR("ERROR_INC_BACKUP");
static const std::string ERROR_FULL_BACKUP_STR("ERROR_FULL_BACKUP");
static const std::string ERROR_REC_NON_EXISTENT_STR("ERROR_REC_NON_EXISTENT");
static const std::string ERROR_RPL_NOT_ALLOWED_STR("ERROR_RPL_NOT_ALLOWED");
static const std::string ERROR_DHCP_ADDRESS_CONFLICT_STR("ERROR_DHCP_ADDRESS_CONFLICT");
static const std::string ERROR_WMI_GUID_NOT_FOUND_STR("ERROR_WMI_GUID_NOT_FOUND");
static const std::string ERROR_WMI_INSTANCE_NOT_FOUND_STR("ERROR_WMI_INSTANCE_NOT_FOUND");
static const std::string ERROR_WMI_ITEMID_NOT_FOUND_STR("ERROR_WMI_ITEMID_NOT_FOUND");
static const std::string ERROR_WMI_TRY_AGAIN_STR("ERROR_WMI_TRY_AGAIN");
static const std::string ERROR_WMI_DP_NOT_FOUND_STR("ERROR_WMI_DP_NOT_FOUND");
static const std::string ERROR_WMI_UNRESOLVED_INSTANCE_REF_STR("ERROR_WMI_UNRESOLVED_INSTANCE_REF");
static const std::string ERROR_WMI_ALREADY_ENABLED_STR("ERROR_WMI_ALREADY_ENABLED");
static const std::string ERROR_WMI_GUID_DISCONNECTED_STR("ERROR_WMI_GUID_DISCONNECTED");
static const std::string ERROR_WMI_SERVER_UNAVAILABLE_STR("ERROR_WMI_SERVER_UNAVAILABLE");
static const std::string ERROR_WMI_DP_FAILED_STR("ERROR_WMI_DP_FAILED");
static const std::string ERROR_WMI_INVALID_MOF_STR("ERROR_WMI_INVALID_MOF");
static const std::string ERROR_WMI_INVALID_REGINFO_STR("ERROR_WMI_INVALID_REGINFO");
static const std::string ERROR_WMI_ALREADY_DISABLED_STR("ERROR_WMI_ALREADY_DISABLED");
static const std::string ERROR_WMI_READ_ONLY_STR("ERROR_WMI_READ_ONLY");
static const std::string ERROR_WMI_SET_FAILURE_STR("ERROR_WMI_SET_FAILURE");
static const std::string ERROR_INVALID_MEDIA_STR("ERROR_INVALID_MEDIA");
static const std::string ERROR_INVALID_LIBRARY_STR("ERROR_INVALID_LIBRARY");
static const std::string ERROR_INVALID_MEDIA_POOL_STR("ERROR_INVALID_MEDIA_POOL");
static const std::string ERROR_DRIVE_MEDIA_MISMATCH_STR("ERROR_DRIVE_MEDIA_MISMATCH");
static const std::string ERROR_MEDIA_OFFLINE_STR("ERROR_MEDIA_OFFLINE");
static const std::string ERROR_LIBRARY_OFFLINE_STR("ERROR_LIBRARY_OFFLINE");
static const std::string ERROR_EMPTY_STR("ERROR_EMPTY");
static const std::string ERROR_NOT_EMPTY_STR("ERROR_NOT_EMPTY");
static const std::string ERROR_MEDIA_UNAVAILABLE_STR("ERROR_MEDIA_UNAVAILABLE");
static const std::string ERROR_RESOURCE_DISABLED_STR("ERROR_RESOURCE_DISABLED");
static const std::string ERROR_INVALID_CLEANER_STR("ERROR_INVALID_CLEANER");
static const std::string ERROR_UNABLE_TO_CLEAN_STR("ERROR_UNABLE_TO_CLEAN");
static const std::string ERROR_OBJECT_NOT_FOUND_STR("ERROR_OBJECT_NOT_FOUND");
static const std::string ERROR_DATABASE_FAILURE_STR("ERROR_DATABASE_FAILURE");
static const std::string ERROR_DATABASE_FULL_STR("ERROR_DATABASE_FULL");
static const std::string ERROR_MEDIA_INCOMPATIBLE_STR("ERROR_MEDIA_INCOMPATIBLE");
static const std::string ERROR_RESOURCE_NOT_PRESENT_STR("ERROR_RESOURCE_NOT_PRESENT");
static const std::string ERROR_INVALID_OPERATION_STR("ERROR_INVALID_OPERATION");
static const std::string ERROR_MEDIA_NOT_AVAILABLE_STR("ERROR_MEDIA_NOT_AVAILABLE");
static const std::string ERROR_DEVICE_NOT_AVAILABLE_STR("ERROR_DEVICE_NOT_AVAILABLE");
static const std::string ERROR_REQUEST_REFUSED_STR("ERROR_REQUEST_REFUSED");
static const std::string ERROR_INVALID_DRIVE_OBJECT_STR("ERROR_INVALID_DRIVE_OBJECT");
static const std::string ERROR_LIBRARY_FULL_STR("ERROR_LIBRARY_FULL");
static const std::string ERROR_MEDIUM_NOT_ACCESSIBLE_STR("ERROR_MEDIUM_NOT_ACCESSIBLE");
static const std::string ERROR_UNABLE_TO_LOAD_MEDIUM_STR("ERROR_UNABLE_TO_LOAD_MEDIUM");
static const std::string ERROR_UNABLE_TO_INVENTORY_DRIVE_STR("ERROR_UNABLE_TO_INVENTORY_DRIVE");
static const std::string ERROR_UNABLE_TO_INVENTORY_SLOT_STR("ERROR_UNABLE_TO_INVENTORY_SLOT");
static const std::string
    ERROR_UNABLE_TO_INVENTORY_TRANSPORT_STR("ERROR_UNABLE_TO_INVENTORY_TRANSPORT");
static const std::string ERROR_TRANSPORT_FULL_STR("ERROR_TRANSPORT_FULL");
static const std::string ERROR_CONTROLLING_IEPORT_STR("ERROR_CONTROLLING_IEPORT");
static const std::string
    ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA_STR("ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA");
static const std::string ERROR_CLEANER_SLOT_SET_STR("ERROR_CLEANER_SLOT_SET");
static const std::string ERROR_CLEANER_SLOT_NOT_SET_STR("ERROR_CLEANER_SLOT_NOT_SET");
static const std::string ERROR_CLEANER_CARTRIDGE_SPENT_STR("ERROR_CLEANER_CARTRIDGE_SPENT");
static const std::string ERROR_UNEXPECTED_OMID_STR("ERROR_UNEXPECTED_OMID");
static const std::string ERROR_CANT_DELETE_LAST_ITEM_STR("ERROR_CANT_DELETE_LAST_ITEM");
static const std::string ERROR_MESSAGE_EXCEEDS_MAX_SIZE_STR("ERROR_MESSAGE_EXCEEDS_MAX_SIZE");
static const std::string ERROR_VOLUME_CONTAINS_SYS_FILES_STR("ERROR_VOLUME_CONTAINS_SYS_FILES");
static const std::string ERROR_INDIGENOUS_TYPE_STR("ERROR_INDIGENOUS_TYPE");
static const std::string ERROR_NO_SUPPORTING_DRIVES_STR("ERROR_NO_SUPPORTING_DRIVES");
static const std::string ERROR_CLEANER_CARTRIDGE_INSTALLED_STR("ERROR_CLEANER_CARTRIDGE_INSTALLED");
static const std::string ERROR_FILE_OFFLINE_STR("ERROR_FILE_OFFLINE");
static const std::string ERROR_REMOTE_STORAGE_NOT_ACTIVE_STR("ERROR_REMOTE_STORAGE_NOT_ACTIVE");
static const std::string ERROR_REMOTE_STORAGE_MEDIA_ERROR_STR("ERROR_REMOTE_STORAGE_MEDIA_ERROR");
static const std::string ERROR_NOT_A_REPARSE_POINT_STR("ERROR_NOT_A_REPARSE_POINT");
static const std::string ERROR_REPARSE_ATTRIBUTE_CONFLICT_STR("ERROR_REPARSE_ATTRIBUTE_CONFLICT");
static const std::string ERROR_INVALID_REPARSE_DATA_STR("ERROR_INVALID_REPARSE_DATA");
static const std::string ERROR_REPARSE_TAG_INVALID_STR("ERROR_REPARSE_TAG_INVALID");
static const std::string ERROR_REPARSE_TAG_MISMATCH_STR("ERROR_REPARSE_TAG_MISMATCH");
static const std::string ERROR_VOLUME_NOT_SIS_ENABLED_STR("ERROR_VOLUME_NOT_SIS_ENABLED");
static const std::string ERROR_DEPENDENT_RESOURCE_EXISTS_STR("ERROR_DEPENDENT_RESOURCE_EXISTS");
static const std::string ERROR_DEPENDENCY_NOT_FOUND_STR("ERROR_DEPENDENCY_NOT_FOUND");
static const std::string ERROR_DEPENDENCY_ALREADY_EXISTS_STR("ERROR_DEPENDENCY_ALREADY_EXISTS");
static const std::string ERROR_RESOURCE_NOT_ONLINE_STR("ERROR_RESOURCE_NOT_ONLINE");
static const std::string ERROR_HOST_NODE_NOT_AVAILABLE_STR("ERROR_HOST_NODE_NOT_AVAILABLE");
static const std::string ERROR_RESOURCE_NOT_AVAILABLE_STR("ERROR_RESOURCE_NOT_AVAILABLE");
static const std::string ERROR_RESOURCE_NOT_FOUND_STR("ERROR_RESOURCE_NOT_FOUND");
static const std::string ERROR_SHUTDOWN_CLUSTER_STR("ERROR_SHUTDOWN_CLUSTER");
static const std::string ERROR_CANT_EVICT_ACTIVE_NODE_STR("ERROR_CANT_EVICT_ACTIVE_NODE");
static const std::string ERROR_OBJECT_ALREADY_EXISTS_STR("ERROR_OBJECT_ALREADY_EXISTS");
static const std::string ERROR_OBJECT_IN_LIST_STR("ERROR_OBJECT_IN_LIST");
static const std::string ERROR_GROUP_NOT_AVAILABLE_STR("ERROR_GROUP_NOT_AVAILABLE");
static const std::string ERROR_GROUP_NOT_FOUND_STR("ERROR_GROUP_NOT_FOUND");
static const std::string ERROR_GROUP_NOT_ONLINE_STR("ERROR_GROUP_NOT_ONLINE");
static const std::string
    ERROR_HOST_NODE_NOT_RESOURCE_OWNER_STR("ERROR_HOST_NODE_NOT_RESOURCE_OWNER");
static const std::string ERROR_HOST_NODE_NOT_GROUP_OWNER_STR("ERROR_HOST_NODE_NOT_GROUP_OWNER");
static const std::string ERROR_RESMON_CREATE_FAILED_STR("ERROR_RESMON_CREATE_FAILED");
static const std::string ERROR_RESMON_ONLINE_FAILED_STR("ERROR_RESMON_ONLINE_FAILED");
static const std::string ERROR_RESOURCE_ONLINE_STR("ERROR_RESOURCE_ONLINE");
static const std::string ERROR_QUORUM_RESOURCE_STR("ERROR_QUORUM_RESOURCE");
static const std::string ERROR_NOT_QUORUM_CAPABLE_STR("ERROR_NOT_QUORUM_CAPABLE");
static const std::string ERROR_CLUSTER_SHUTTING_DOWN_STR("ERROR_CLUSTER_SHUTTING_DOWN");
static const std::string ERROR_INVALID_STATE_STR("ERROR_INVALID_STATE");
static const std::string ERROR_RESOURCE_PROPERTIES_STORED_STR("ERROR_RESOURCE_PROPERTIES_STORED");
static const std::string ERROR_NOT_QUORUM_CLASS_STR("ERROR_NOT_QUORUM_CLASS");
static const std::string ERROR_CORE_RESOURCE_STR("ERROR_CORE_RESOURCE");
static const std::string
    ERROR_QUORUM_RESOURCE_ONLINE_FAILED_STR("ERROR_QUORUM_RESOURCE_ONLINE_FAILED");
static const std::string ERROR_QUORUMLOG_OPEN_FAILED_STR("ERROR_QUORUMLOG_OPEN_FAILED");
static const std::string ERROR_CLUSTERLOG_CORRUPT_STR("ERROR_CLUSTERLOG_CORRUPT");
static const std::string
    ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE_STR("ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE");
static const std::string ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE_STR("ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE");
static const std::string
    ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND_STR("ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND");
static const std::string ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE_STR("ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE");
static const std::string ERROR_QUORUM_OWNER_ALIVE_STR("ERROR_QUORUM_OWNER_ALIVE");
static const std::string ERROR_NETWORK_NOT_AVAILABLE_STR("ERROR_NETWORK_NOT_AVAILABLE");
static const std::string ERROR_NODE_NOT_AVAILABLE_STR("ERROR_NODE_NOT_AVAILABLE");
static const std::string ERROR_ALL_NODES_NOT_AVAILABLE_STR("ERROR_ALL_NODES_NOT_AVAILABLE");
static const std::string ERROR_RESOURCE_FAILED_STR("ERROR_RESOURCE_FAILED");
static const std::string ERROR_CLUSTER_INVALID_NODE_STR("ERROR_CLUSTER_INVALID_NODE");
static const std::string ERROR_CLUSTER_NODE_EXISTS_STR("ERROR_CLUSTER_NODE_EXISTS");
static const std::string ERROR_CLUSTER_JOIN_IN_PROGRESS_STR("ERROR_CLUSTER_JOIN_IN_PROGRESS");
static const std::string ERROR_CLUSTER_NODE_NOT_FOUND_STR("ERROR_CLUSTER_NODE_NOT_FOUND");
static const std::string
    ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND_STR("ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND");
static const std::string ERROR_CLUSTER_NETWORK_EXISTS_STR("ERROR_CLUSTER_NETWORK_EXISTS");
static const std::string ERROR_CLUSTER_NETWORK_NOT_FOUND_STR("ERROR_CLUSTER_NETWORK_NOT_FOUND");
static const std::string ERROR_CLUSTER_NETINTERFACE_EXISTS_STR("ERROR_CLUSTER_NETINTERFACE_EXISTS");
static const std::string
    ERROR_CLUSTER_NETINTERFACE_NOT_FOUND_STR("ERROR_CLUSTER_NETINTERFACE_NOT_FOUND");
static const std::string ERROR_CLUSTER_INVALID_REQUEST_STR("ERROR_CLUSTER_INVALID_REQUEST");
static const std::string
    ERROR_CLUSTER_INVALID_NETWORK_PROVIDER_STR("ERROR_CLUSTER_INVALID_NETWORK_PROVIDER");
static const std::string ERROR_CLUSTER_NODE_DOWN_STR("ERROR_CLUSTER_NODE_DOWN");
static const std::string ERROR_CLUSTER_NODE_UNREACHABLE_STR("ERROR_CLUSTER_NODE_UNREACHABLE");
static const std::string ERROR_CLUSTER_NODE_NOT_MEMBER_STR("ERROR_CLUSTER_NODE_NOT_MEMBER");
static const std::string
    ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS_STR("ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS");
static const std::string ERROR_CLUSTER_INVALID_NETWORK_STR("ERROR_CLUSTER_INVALID_NETWORK");
static const std::string ERROR_CLUSTER_NODE_UP_STR("ERROR_CLUSTER_NODE_UP");
static const std::string ERROR_CLUSTER_IPADDR_IN_USE_STR("ERROR_CLUSTER_IPADDR_IN_USE");
static const std::string ERROR_CLUSTER_NODE_NOT_PAUSED_STR("ERROR_CLUSTER_NODE_NOT_PAUSED");
static const std::string ERROR_CLUSTER_NO_SECURITY_CONTEXT_STR("ERROR_CLUSTER_NO_SECURITY_CONTEXT");
static const std::string
    ERROR_CLUSTER_NETWORK_NOT_INTERNAL_STR("ERROR_CLUSTER_NETWORK_NOT_INTERNAL");
static const std::string ERROR_CLUSTER_NODE_ALREADY_UP_STR("ERROR_CLUSTER_NODE_ALREADY_UP");
static const std::string ERROR_CLUSTER_NODE_ALREADY_DOWN_STR("ERROR_CLUSTER_NODE_ALREADY_DOWN");
static const std::string
    ERROR_CLUSTER_NETWORK_ALREADY_ONLINE_STR("ERROR_CLUSTER_NETWORK_ALREADY_ONLINE");
static const std::string
    ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE_STR("ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE");
static const std::string ERROR_CLUSTER_NODE_ALREADY_MEMBER_STR("ERROR_CLUSTER_NODE_ALREADY_MEMBER");
static const std::string
    ERROR_CLUSTER_LAST_INTERNAL_NETWORK_STR("ERROR_CLUSTER_LAST_INTERNAL_NETWORK");
static const std::string
    ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS_STR("ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS");
static const std::string ERROR_INVALID_OPERATION_ON_QUORUM_STR("ERROR_INVALID_OPERATION_ON_QUORUM");
static const std::string ERROR_DEPENDENCY_NOT_ALLOWED_STR("ERROR_DEPENDENCY_NOT_ALLOWED");
static const std::string ERROR_CLUSTER_NODE_PAUSED_STR("ERROR_CLUSTER_NODE_PAUSED");
static const std::string ERROR_NODE_CANT_HOST_RESOURCE_STR("ERROR_NODE_CANT_HOST_RESOURCE");
static const std::string ERROR_CLUSTER_NODE_NOT_READY_STR("ERROR_CLUSTER_NODE_NOT_READY");
static const std::string ERROR_CLUSTER_NODE_SHUTTING_DOWN_STR("ERROR_CLUSTER_NODE_SHUTTING_DOWN");
static const std::string ERROR_CLUSTER_JOIN_ABORTED_STR("ERROR_CLUSTER_JOIN_ABORTED");
static const std::string
    ERROR_CLUSTER_INCOMPATIBLE_VERSIONS_STR("ERROR_CLUSTER_INCOMPATIBLE_VERSIONS");
static const std::string
    ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED_STR("ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED");
static const std::string
    ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED_STR("ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED");
static const std::string
    ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND_STR("ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND");
static const std::string
    ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED_STR("ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED");
static const std::string ERROR_CLUSTER_RESNAME_NOT_FOUND_STR("ERROR_CLUSTER_RESNAME_NOT_FOUND");
static const std::string
    ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED_STR("ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED");
static const std::string
    ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST_STR("ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST");
static const std::string
    ERROR_CLUSTER_DATABASE_SEQMISMATCH_STR("ERROR_CLUSTER_DATABASE_SEQMISMATCH");
static const std::string ERROR_RESMON_INVALID_STATE_STR("ERROR_RESMON_INVALID_STATE");
static const std::string ERROR_CLUSTER_GUM_NOT_LOCKER_STR("ERROR_CLUSTER_GUM_NOT_LOCKER");
static const std::string ERROR_QUORUM_DISK_NOT_FOUND_STR("ERROR_QUORUM_DISK_NOT_FOUND");
static const std::string ERROR_DATABASE_BACKUP_CORRUPT_STR("ERROR_DATABASE_BACKUP_CORRUPT");
static const std::string
    ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT_STR("ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT");
static const std::string
    ERROR_RESOURCE_PROPERTY_UNCHANGEABLE_STR("ERROR_RESOURCE_PROPERTY_UNCHANGEABLE");
static const std::string ERROR_ENCRYPTION_FAILED_STR("ERROR_ENCRYPTION_FAILED");
static const std::string ERROR_DECRYPTION_FAILED_STR("ERROR_DECRYPTION_FAILED");
static const std::string ERROR_FILE_ENCRYPTED_STR("ERROR_FILE_ENCRYPTED");
static const std::string ERROR_NO_RECOVERY_POLICY_STR("ERROR_NO_RECOVERY_POLICY");
static const std::string ERROR_NO_EFS_STR("ERROR_NO_EFS");
static const std::string ERROR_WRONG_EFS_STR("ERROR_WRONG_EFS");
static const std::string ERROR_NO_USER_KEYS_STR("ERROR_NO_USER_KEYS");
static const std::string ERROR_FILE_NOT_ENCRYPTED_STR("ERROR_FILE_NOT_ENCRYPTED");
static const std::string ERROR_NOT_EXPORT_FORMAT_STR("ERROR_NOT_EXPORT_FORMAT");
static const std::string ERROR_FILE_READ_ONLY_STR("ERROR_FILE_READ_ONLY");
static const std::string ERROR_DIR_EFS_DISALLOWED_STR("ERROR_DIR_EFS_DISALLOWED");
static const std::string ERROR_EFS_SERVER_NOT_TRUSTED_STR("ERROR_EFS_SERVER_NOT_TRUSTED");
static const std::string ERROR_EFS_ALG_BLOB_TOO_BIG_STR("ERROR_EFS_ALG_BLOB_TOO_BIG");
static const std::string ERROR_NO_BROWSER_SERVERS_FOUND_STR("ERROR_NO_BROWSER_SERVERS_FOUND");
static const std::string SCHED_E_SERVICE_NOT_LOCALSYSTEM_STR("SCHED_E_SERVICE_NOT_LOCALSYSTEM");
static const std::string ERROR_CTX_WINSTATION_NAME_INVALID_STR("ERROR_CTX_WINSTATION_NAME_INVALID");
static const std::string ERROR_CTX_INVALID_PD_STR("ERROR_CTX_INVALID_PD");
static const std::string ERROR_CTX_PD_NOT_FOUND_STR("ERROR_CTX_PD_NOT_FOUND");
static const std::string ERROR_CTX_WD_NOT_FOUND_STR("ERROR_CTX_WD_NOT_FOUND");
static const std::string
    ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY_STR("ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY");
static const std::string ERROR_CTX_SERVICE_NAME_COLLISION_STR("ERROR_CTX_SERVICE_NAME_COLLISION");
static const std::string ERROR_CTX_CLOSE_PENDING_STR("ERROR_CTX_CLOSE_PENDING");
static const std::string ERROR_CTX_NO_OUTBUF_STR("ERROR_CTX_NO_OUTBUF");
static const std::string ERROR_CTX_MODEM_INF_NOT_FOUND_STR("ERROR_CTX_MODEM_INF_NOT_FOUND");
static const std::string ERROR_CTX_INVALID_MODEMNAME_STR("ERROR_CTX_INVALID_MODEMNAME");
static const std::string ERROR_CTX_MODEM_RESPONSE_ERROR_STR("ERROR_CTX_MODEM_RESPONSE_ERROR");
static const std::string ERROR_CTX_MODEM_RESPONSE_TIMEOUT_STR("ERROR_CTX_MODEM_RESPONSE_TIMEOUT");
static const std::string
    ERROR_CTX_MODEM_RESPONSE_NO_CARRIER_STR("ERROR_CTX_MODEM_RESPONSE_NO_CARRIER");
static const std::string
    ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE_STR("ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE");
static const std::string ERROR_CTX_MODEM_RESPONSE_BUSY_STR("ERROR_CTX_MODEM_RESPONSE_BUSY");
static const std::string ERROR_CTX_MODEM_RESPONSE_VOICE_STR("ERROR_CTX_MODEM_RESPONSE_VOICE");
static const std::string ERROR_CTX_TD_ERROR_STR("ERROR_CTX_TD_ERROR");
static const std::string ERROR_CTX_WINSTATION_NOT_FOUND_STR("ERROR_CTX_WINSTATION_NOT_FOUND");
static const std::string
    ERROR_CTX_WINSTATION_ALREADY_EXISTS_STR("ERROR_CTX_WINSTATION_ALREADY_EXISTS");
static const std::string ERROR_CTX_WINSTATION_BUSY_STR("ERROR_CTX_WINSTATION_BUSY");
static const std::string ERROR_CTX_BAD_VIDEO_MODE_STR("ERROR_CTX_BAD_VIDEO_MODE");
static const std::string ERROR_CTX_GRAPHICS_INVALID_STR("ERROR_CTX_GRAPHICS_INVALID");
static const std::string ERROR_CTX_LOGON_DISABLED_STR("ERROR_CTX_LOGON_DISABLED");
static const std::string ERROR_CTX_NOT_CONSOLE_STR("ERROR_CTX_NOT_CONSOLE");
static const std::string ERROR_CTX_CLIENT_QUERY_TIMEOUT_STR("ERROR_CTX_CLIENT_QUERY_TIMEOUT");
static const std::string ERROR_CTX_CONSOLE_DISCONNECT_STR("ERROR_CTX_CONSOLE_DISCONNECT");
static const std::string ERROR_CTX_CONSOLE_CONNECT_STR("ERROR_CTX_CONSOLE_CONNECT");
static const std::string ERROR_CTX_SHADOW_DENIED_STR("ERROR_CTX_SHADOW_DENIED");
static const std::string
    ERROR_CTX_WINSTATION_ACCESS_DENIED_STR("ERROR_CTX_WINSTATION_ACCESS_DENIED");
static const std::string ERROR_CTX_INVALID_WD_STR("ERROR_CTX_INVALID_WD");
static const std::string ERROR_CTX_SHADOW_INVALID_STR("ERROR_CTX_SHADOW_INVALID");
static const std::string ERROR_CTX_SHADOW_DISABLED_STR("ERROR_CTX_SHADOW_DISABLED");
static const std::string ERROR_CTX_CLIENT_LICENSE_IN_USE_STR("ERROR_CTX_CLIENT_LICENSE_IN_USE");
static const std::string ERROR_CTX_CLIENT_LICENSE_NOT_SET_STR("ERROR_CTX_CLIENT_LICENSE_NOT_SET");
static const std::string ERROR_CTX_LICENSE_NOT_AVAILABLE_STR("ERROR_CTX_LICENSE_NOT_AVAILABLE");
static const std::string ERROR_CTX_LICENSE_CLIENT_INVALID_STR("ERROR_CTX_LICENSE_CLIENT_INVALID");
static const std::string ERROR_CTX_LICENSE_EXPIRED_STR("ERROR_CTX_LICENSE_EXPIRED");
static const std::string ERROR_CTX_SHADOW_NOT_RUNNING_STR("ERROR_CTX_SHADOW_NOT_RUNNING");
static const std::string
    ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE_STR("ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE");
static const std::string FRS_ERR_INVALID_API_SEQUENCE_STR("FRS_ERR_INVALID_API_SEQUENCE");
static const std::string FRS_ERR_STARTING_SERVICE_STR("FRS_ERR_STARTING_SERVICE");
static const std::string FRS_ERR_STOPPING_SERVICE_STR("FRS_ERR_STOPPING_SERVICE");
static const std::string FRS_ERR_INTERNAL_API_STR("FRS_ERR_INTERNAL_API");
static const std::string FRS_ERR_INTERNAL_STR("FRS_ERR_INTERNAL");
static const std::string FRS_ERR_SERVICE_COMM_STR("FRS_ERR_SERVICE_COMM");
static const std::string FRS_ERR_INSUFFICIENT_PRIV_STR("FRS_ERR_INSUFFICIENT_PRIV");
static const std::string FRS_ERR_AUTHENTICATION_STR("FRS_ERR_AUTHENTICATION");
static const std::string FRS_ERR_PARENT_INSUFFICIENT_PRIV_STR("FRS_ERR_PARENT_INSUFFICIENT_PRIV");
static const std::string FRS_ERR_PARENT_AUTHENTICATION_STR("FRS_ERR_PARENT_AUTHENTICATION");
static const std::string FRS_ERR_CHILD_TO_PARENT_COMM_STR("FRS_ERR_CHILD_TO_PARENT_COMM");
static const std::string FRS_ERR_PARENT_TO_CHILD_COMM_STR("FRS_ERR_PARENT_TO_CHILD_COMM");
static const std::string FRS_ERR_SYSVOL_POPULATE_STR("FRS_ERR_SYSVOL_POPULATE");
static const std::string FRS_ERR_SYSVOL_POPULATE_TIMEOUT_STR("FRS_ERR_SYSVOL_POPULATE_TIMEOUT");
static const std::string FRS_ERR_SYSVOL_IS_BUSY_STR("FRS_ERR_SYSVOL_IS_BUSY");
static const std::string FRS_ERR_SYSVOL_DEMOTE_STR("FRS_ERR_SYSVOL_DEMOTE");
static const std::string FRS_ERR_INVALID_SERVICE_PARAMETER_STR("FRS_ERR_INVALID_SERVICE_PARAMETER");
static const std::string ERROR_DS_NOT_INSTALLED_STR("ERROR_DS_NOT_INSTALLED");
static const std::string
    ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY_STR("ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY");
static const std::string ERROR_DS_NO_ATTRIBUTE_OR_VALUE_STR("ERROR_DS_NO_ATTRIBUTE_OR_VALUE");
static const std::string ERROR_DS_INVALID_ATTRIBUTE_SYNTAX_STR("ERROR_DS_INVALID_ATTRIBUTE_SYNTAX");
static const std::string ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED_STR("ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED");
static const std::string
    ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS_STR("ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS");
static const std::string ERROR_DS_BUSY_STR("ERROR_DS_BUSY");
static const std::string ERROR_DS_UNAVAILABLE_STR("ERROR_DS_UNAVAILABLE");
static const std::string ERROR_DS_NO_RIDS_ALLOCATED_STR("ERROR_DS_NO_RIDS_ALLOCATED");
static const std::string ERROR_DS_NO_MORE_RIDS_STR("ERROR_DS_NO_MORE_RIDS");
static const std::string ERROR_DS_INCORRECT_ROLE_OWNER_STR("ERROR_DS_INCORRECT_ROLE_OWNER");
static const std::string ERROR_DS_RIDMGR_INIT_ERROR_STR("ERROR_DS_RIDMGR_INIT_ERROR");
static const std::string ERROR_DS_OBJ_CLASS_VIOLATION_STR("ERROR_DS_OBJ_CLASS_VIOLATION");
static const std::string ERROR_DS_CANT_ON_NON_LEAF_STR("ERROR_DS_CANT_ON_NON_LEAF");
static const std::string ERROR_DS_CANT_ON_RDN_STR("ERROR_DS_CANT_ON_RDN");
static const std::string ERROR_DS_CANT_MOD_OBJ_CLASS_STR("ERROR_DS_CANT_MOD_OBJ_CLASS");
static const std::string ERROR_DS_CROSS_DOM_MOVE_ERROR_STR("ERROR_DS_CROSS_DOM_MOVE_ERROR");
static const std::string ERROR_DS_GC_NOT_AVAILABLE_STR("ERROR_DS_GC_NOT_AVAILABLE");
static const std::string ERROR_SHARED_POLICY_STR("ERROR_SHARED_POLICY");
static const std::string ERROR_POLICY_OBJECT_NOT_FOUND_STR("ERROR_POLICY_OBJECT_NOT_FOUND");
static const std::string ERROR_POLICY_ONLY_IN_DS_STR("ERROR_POLICY_ONLY_IN_DS");
static const std::string ERROR_PROMOTION_ACTIVE_STR("ERROR_PROMOTION_ACTIVE");
static const std::string ERROR_NO_PROMOTION_ACTIVE_STR("ERROR_NO_PROMOTION_ACTIVE");
static const std::string ERROR_DS_OPERATIONS_ERROR_STR("ERROR_DS_OPERATIONS_ERROR");
static const std::string ERROR_DS_PROTOCOL_ERROR_STR("ERROR_DS_PROTOCOL_ERROR");
static const std::string ERROR_DS_TIMELIMIT_EXCEEDED_STR("ERROR_DS_TIMELIMIT_EXCEEDED");
static const std::string ERROR_DS_SIZELIMIT_EXCEEDED_STR("ERROR_DS_SIZELIMIT_EXCEEDED");
static const std::string ERROR_DS_ADMIN_LIMIT_EXCEEDED_STR("ERROR_DS_ADMIN_LIMIT_EXCEEDED");
static const std::string ERROR_DS_COMPARE_FALSE_STR("ERROR_DS_COMPARE_FALSE");
static const std::string ERROR_DS_COMPARE_TRUE_STR("ERROR_DS_COMPARE_TRUE");
static const std::string
    ERROR_DS_AUTH_METHOD_NOT_SUPPORTED_STR("ERROR_DS_AUTH_METHOD_NOT_SUPPORTED");
static const std::string ERROR_DS_STRONG_AUTH_REQUIRED_STR("ERROR_DS_STRONG_AUTH_REQUIRED");
static const std::string ERROR_DS_INAPPROPRIATE_AUTH_STR("ERROR_DS_INAPPROPRIATE_AUTH");
static const std::string ERROR_DS_AUTH_UNKNOWN_STR("ERROR_DS_AUTH_UNKNOWN");
static const std::string ERROR_DS_REFERRAL_STR("ERROR_DS_REFERRAL");
static const std::string
    ERROR_DS_UNAVAILABLE_CRIT_EXTENSION_STR("ERROR_DS_UNAVAILABLE_CRIT_EXTENSION");
static const std::string ERROR_DS_CONFIDENTIALITY_REQUIRED_STR("ERROR_DS_CONFIDENTIALITY_REQUIRED");
static const std::string ERROR_DS_INAPPROPRIATE_MATCHING_STR("ERROR_DS_INAPPROPRIATE_MATCHING");
static const std::string ERROR_DS_CONSTRAINT_VIOLATION_STR("ERROR_DS_CONSTRAINT_VIOLATION");
static const std::string ERROR_DS_NO_SUCH_OBJECT_STR("ERROR_DS_NO_SUCH_OBJECT");
static const std::string ERROR_DS_ALIAS_PROBLEM_STR("ERROR_DS_ALIAS_PROBLEM");
static const std::string ERROR_DS_INVALID_DN_SYNTAX_STR("ERROR_DS_INVALID_DN_SYNTAX");
static const std::string ERROR_DS_IS_LEAF_STR("ERROR_DS_IS_LEAF");
static const std::string ERROR_DS_ALIAS_DEREF_PROBLEM_STR("ERROR_DS_ALIAS_DEREF_PROBLEM");
static const std::string ERROR_DS_UNWILLING_TO_PERFORM_STR("ERROR_DS_UNWILLING_TO_PERFORM");
static const std::string ERROR_DS_LOOP_DETECT_STR("ERROR_DS_LOOP_DETECT");
static const std::string ERROR_DS_NAMING_VIOLATION_STR("ERROR_DS_NAMING_VIOLATION");
static const std::string ERROR_DS_OBJECT_RESULTS_TOO_LARGE_STR("ERROR_DS_OBJECT_RESULTS_TOO_LARGE");
static const std::string ERROR_DS_AFFECTS_MULTIPLE_DSAS_STR("ERROR_DS_AFFECTS_MULTIPLE_DSAS");
static const std::string ERROR_DS_SERVER_DOWN_STR("ERROR_DS_SERVER_DOWN");
static const std::string ERROR_DS_LOCAL_ERROR_STR("ERROR_DS_LOCAL_ERROR");
static const std::string ERROR_DS_ENCODING_ERROR_STR("ERROR_DS_ENCODING_ERROR");
static const std::string ERROR_DS_DECODING_ERROR_STR("ERROR_DS_DECODING_ERROR");
static const std::string ERROR_DS_FILTER_UNKNOWN_STR("ERROR_DS_FILTER_UNKNOWN");
static const std::string ERROR_DS_PARAM_ERROR_STR("ERROR_DS_PARAM_ERROR");
static const std::string ERROR_DS_NOT_SUPPORTED_STR("ERROR_DS_NOT_SUPPORTED");
static const std::string ERROR_DS_NO_RESULTS_RETURNED_STR("ERROR_DS_NO_RESULTS_RETURNED");
static const std::string ERROR_DS_CONTROL_NOT_FOUND_STR("ERROR_DS_CONTROL_NOT_FOUND");
static const std::string ERROR_DS_CLIENT_LOOP_STR("ERROR_DS_CLIENT_LOOP");
static const std::string ERROR_DS_REFERRAL_LIMIT_EXCEEDED_STR("ERROR_DS_REFERRAL_LIMIT_EXCEEDED");
static const std::string ERROR_DS_ROOT_MUST_BE_NC_STR("ERROR_DS_ROOT_MUST_BE_NC");
static const std::string ERROR_DS_ADD_REPLICA_INHIBITED_STR("ERROR_DS_ADD_REPLICA_INHIBITED");
static const std::string ERROR_DS_ATT_NOT_DEF_IN_SCHEMA_STR("ERROR_DS_ATT_NOT_DEF_IN_SCHEMA");
static const std::string ERROR_DS_MAX_OBJ_SIZE_EXCEEDED_STR("ERROR_DS_MAX_OBJ_SIZE_EXCEEDED");
static const std::string ERROR_DS_OBJ_STRING_NAME_EXISTS_STR("ERROR_DS_OBJ_STRING_NAME_EXISTS");
static const std::string ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA_STR("ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA");
static const std::string ERROR_DS_RDN_DOESNT_MATCH_SCHEMA_STR("ERROR_DS_RDN_DOESNT_MATCH_SCHEMA");
static const std::string ERROR_DS_NO_REQUESTED_ATTS_FOUND_STR("ERROR_DS_NO_REQUESTED_ATTS_FOUND");
static const std::string ERROR_DS_USER_BUFFER_TO_SMALL_STR("ERROR_DS_USER_BUFFER_TO_SMALL");
static const std::string ERROR_DS_ATT_IS_NOT_ON_OBJ_STR("ERROR_DS_ATT_IS_NOT_ON_OBJ");
static const std::string ERROR_DS_ILLEGAL_MOD_OPERATION_STR("ERROR_DS_ILLEGAL_MOD_OPERATION");
static const std::string ERROR_DS_OBJ_TOO_LARGE_STR("ERROR_DS_OBJ_TOO_LARGE");
static const std::string ERROR_DS_BAD_INSTANCE_TYPE_STR("ERROR_DS_BAD_INSTANCE_TYPE");
static const std::string ERROR_DS_MASTERDSA_REQUIRED_STR("ERROR_DS_MASTERDSA_REQUIRED");
static const std::string ERROR_DS_OBJECT_CLASS_REQUIRED_STR("ERROR_DS_OBJECT_CLASS_REQUIRED");
static const std::string ERROR_DS_MISSING_REQUIRED_ATT_STR("ERROR_DS_MISSING_REQUIRED_ATT");
static const std::string ERROR_DS_ATT_NOT_DEF_FOR_CLASS_STR("ERROR_DS_ATT_NOT_DEF_FOR_CLASS");
static const std::string ERROR_DS_ATT_ALREADY_EXISTS_STR("ERROR_DS_ATT_ALREADY_EXISTS");
static const std::string ERROR_DS_CANT_ADD_ATT_VALUES_STR("ERROR_DS_CANT_ADD_ATT_VALUES");
static const std::string ERROR_DS_SINGLE_VALUE_CONSTRAINT_STR("ERROR_DS_SINGLE_VALUE_CONSTRAINT");
static const std::string ERROR_DS_RANGE_CONSTRAINT_STR("ERROR_DS_RANGE_CONSTRAINT");
static const std::string ERROR_DS_ATT_VAL_ALREADY_EXISTS_STR("ERROR_DS_ATT_VAL_ALREADY_EXISTS");
static const std::string ERROR_DS_CANT_REM_MISSING_ATT_STR("ERROR_DS_CANT_REM_MISSING_ATT");
static const std::string ERROR_DS_CANT_REM_MISSING_ATT_VAL_STR("ERROR_DS_CANT_REM_MISSING_ATT_VAL");
static const std::string ERROR_DS_ROOT_CANT_BE_SUBREF_STR("ERROR_DS_ROOT_CANT_BE_SUBREF");
static const std::string ERROR_DS_NO_CHAINING_STR("ERROR_DS_NO_CHAINING");
static const std::string ERROR_DS_NO_CHAINED_EVAL_STR("ERROR_DS_NO_CHAINED_EVAL");
static const std::string ERROR_DS_NO_PARENT_OBJECT_STR("ERROR_DS_NO_PARENT_OBJECT");
static const std::string ERROR_DS_PARENT_IS_AN_ALIAS_STR("ERROR_DS_PARENT_IS_AN_ALIAS");
static const std::string ERROR_DS_CANT_MIX_MASTER_AND_REPS_STR("ERROR_DS_CANT_MIX_MASTER_AND_REPS");
static const std::string ERROR_DS_CHILDREN_EXIST_STR("ERROR_DS_CHILDREN_EXIST");
static const std::string ERROR_DS_OBJ_NOT_FOUND_STR("ERROR_DS_OBJ_NOT_FOUND");
static const std::string ERROR_DS_ALIASED_OBJ_MISSING_STR("ERROR_DS_ALIASED_OBJ_MISSING");
static const std::string ERROR_DS_BAD_NAME_SYNTAX_STR("ERROR_DS_BAD_NAME_SYNTAX");
static const std::string ERROR_DS_ALIAS_POINTS_TO_ALIAS_STR("ERROR_DS_ALIAS_POINTS_TO_ALIAS");
static const std::string ERROR_DS_CANT_DEREF_ALIAS_STR("ERROR_DS_CANT_DEREF_ALIAS");
static const std::string ERROR_DS_OUT_OF_SCOPE_STR("ERROR_DS_OUT_OF_SCOPE");
static const std::string ERROR_DS_CANT_DELETE_DSA_OBJ_STR("ERROR_DS_CANT_DELETE_DSA_OBJ");
static const std::string ERROR_DS_GENERIC_ERROR_STR("ERROR_DS_GENERIC_ERROR");
static const std::string ERROR_DS_DSA_MUST_BE_INT_MASTER_STR("ERROR_DS_DSA_MUST_BE_INT_MASTER");
static const std::string ERROR_DS_CLASS_NOT_DSA_STR("ERROR_DS_CLASS_NOT_DSA");
static const std::string ERROR_DS_INSUFF_ACCESS_RIGHTS_STR("ERROR_DS_INSUFF_ACCESS_RIGHTS");
static const std::string ERROR_DS_ILLEGAL_SUPERIOR_STR("ERROR_DS_ILLEGAL_SUPERIOR");
static const std::string ERROR_DS_ATTRIBUTE_OWNED_BY_SAM_STR("ERROR_DS_ATTRIBUTE_OWNED_BY_SAM");
static const std::string ERROR_DS_NAME_TOO_MANY_PARTS_STR("ERROR_DS_NAME_TOO_MANY_PARTS");
static const std::string ERROR_DS_NAME_TOO_LONG_STR("ERROR_DS_NAME_TOO_LONG");
static const std::string ERROR_DS_NAME_VALUE_TOO_LONG_STR("ERROR_DS_NAME_VALUE_TOO_LONG");
static const std::string ERROR_DS_NAME_UNPARSEABLE_STR("ERROR_DS_NAME_UNPARSEABLE");
static const std::string ERROR_DS_NAME_TYPE_UNKNOWN_STR("ERROR_DS_NAME_TYPE_UNKNOWN");
static const std::string ERROR_DS_NOT_AN_OBJECT_STR("ERROR_DS_NOT_AN_OBJECT");
static const std::string ERROR_DS_SEC_DESC_TOO_SHORT_STR("ERROR_DS_SEC_DESC_TOO_SHORT");
static const std::string ERROR_DS_SEC_DESC_INVALID_STR("ERROR_DS_SEC_DESC_INVALID");
static const std::string ERROR_DS_NO_DELETED_NAME_STR("ERROR_DS_NO_DELETED_NAME");
static const std::string ERROR_DS_SUBREF_MUST_HAVE_PARENT_STR("ERROR_DS_SUBREF_MUST_HAVE_PARENT");
static const std::string ERROR_DS_NCNAME_MUST_BE_NC_STR("ERROR_DS_NCNAME_MUST_BE_NC");
static const std::string ERROR_DS_CANT_ADD_SYSTEM_ONLY_STR("ERROR_DS_CANT_ADD_SYSTEM_ONLY");
static const std::string ERROR_DS_CLASS_MUST_BE_CONCRETE_STR("ERROR_DS_CLASS_MUST_BE_CONCRETE");
static const std::string ERROR_DS_INVALID_DMD_STR("ERROR_DS_INVALID_DMD");
static const std::string ERROR_DS_OBJ_GUID_EXISTS_STR("ERROR_DS_OBJ_GUID_EXISTS");
static const std::string ERROR_DS_NOT_ON_BACKLINK_STR("ERROR_DS_NOT_ON_BACKLINK");
static const std::string ERROR_DS_NO_CROSSREF_FOR_NC_STR("ERROR_DS_NO_CROSSREF_FOR_NC");
static const std::string ERROR_DS_SHUTTING_DOWN_STR("ERROR_DS_SHUTTING_DOWN");
static const std::string ERROR_DS_UNKNOWN_OPERATION_STR("ERROR_DS_UNKNOWN_OPERATION");
static const std::string ERROR_DS_INVALID_ROLE_OWNER_STR("ERROR_DS_INVALID_ROLE_OWNER");
static const std::string ERROR_DS_COULDNT_CONTACT_FSMO_STR("ERROR_DS_COULDNT_CONTACT_FSMO");
static const std::string ERROR_DS_CROSS_NC_DN_RENAME_STR("ERROR_DS_CROSS_NC_DN_RENAME");
static const std::string ERROR_DS_CANT_MOD_SYSTEM_ONLY_STR("ERROR_DS_CANT_MOD_SYSTEM_ONLY");
static const std::string ERROR_DS_REPLICATOR_ONLY_STR("ERROR_DS_REPLICATOR_ONLY");
static const std::string ERROR_DS_OBJ_CLASS_NOT_DEFINED_STR("ERROR_DS_OBJ_CLASS_NOT_DEFINED");
static const std::string ERROR_DS_OBJ_CLASS_NOT_SUBCLASS_STR("ERROR_DS_OBJ_CLASS_NOT_SUBCLASS");
static const std::string ERROR_DS_NAME_REFERENCE_INVALID_STR("ERROR_DS_NAME_REFERENCE_INVALID");
static const std::string ERROR_DS_CROSS_REF_EXISTS_STR("ERROR_DS_CROSS_REF_EXISTS");
static const std::string ERROR_DS_CANT_DEL_MASTER_CROSSREF_STR("ERROR_DS_CANT_DEL_MASTER_CROSSREF");
static const std::string
    ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD_STR("ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD");
static const std::string
    ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX_STR("ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX");
static const std::string ERROR_DS_DUP_RDN_STR("ERROR_DS_DUP_RDN");
static const std::string ERROR_DS_DUP_OID_STR("ERROR_DS_DUP_OID");
static const std::string ERROR_DS_DUP_MAPI_ID_STR("ERROR_DS_DUP_MAPI_ID");
static const std::string ERROR_DS_DUP_SCHEMA_ID_GUID_STR("ERROR_DS_DUP_SCHEMA_ID_GUID");
static const std::string ERROR_DS_DUP_LDAP_DISPLAY_NAME_STR("ERROR_DS_DUP_LDAP_DISPLAY_NAME");
static const std::string ERROR_DS_SEMANTIC_ATT_TEST_STR("ERROR_DS_SEMANTIC_ATT_TEST");
static const std::string ERROR_DS_SYNTAX_MISMATCH_STR("ERROR_DS_SYNTAX_MISMATCH");
static const std::string ERROR_DS_EXISTS_IN_MUST_HAVE_STR("ERROR_DS_EXISTS_IN_MUST_HAVE");
static const std::string ERROR_DS_EXISTS_IN_MAY_HAVE_STR("ERROR_DS_EXISTS_IN_MAY_HAVE");
static const std::string ERROR_DS_NONEXISTENT_MAY_HAVE_STR("ERROR_DS_NONEXISTENT_MAY_HAVE");
static const std::string ERROR_DS_NONEXISTENT_MUST_HAVE_STR("ERROR_DS_NONEXISTENT_MUST_HAVE");
static const std::string ERROR_DS_AUX_CLS_TEST_FAIL_STR("ERROR_DS_AUX_CLS_TEST_FAIL");
static const std::string ERROR_DS_NONEXISTENT_POSS_SUP_STR("ERROR_DS_NONEXISTENT_POSS_SUP");
static const std::string ERROR_DS_SUB_CLS_TEST_FAIL_STR("ERROR_DS_SUB_CLS_TEST_FAIL");
static const std::string ERROR_DS_BAD_RDN_ATT_ID_SYNTAX_STR("ERROR_DS_BAD_RDN_ATT_ID_SYNTAX");
static const std::string ERROR_DS_EXISTS_IN_AUX_CLS_STR("ERROR_DS_EXISTS_IN_AUX_CLS");
static const std::string ERROR_DS_EXISTS_IN_SUB_CLS_STR("ERROR_DS_EXISTS_IN_SUB_CLS");
static const std::string ERROR_DS_EXISTS_IN_POSS_SUP_STR("ERROR_DS_EXISTS_IN_POSS_SUP");
static const std::string ERROR_DS_RECALCSCHEMA_FAILED_STR("ERROR_DS_RECALCSCHEMA_FAILED");
static const std::string ERROR_DS_TREE_DELETE_NOT_FINISHED_STR("ERROR_DS_TREE_DELETE_NOT_FINISHED");
static const std::string ERROR_DS_CANT_DELETE_STR("ERROR_DS_CANT_DELETE");
static const std::string ERROR_DS_ATT_SCHEMA_REQ_ID_STR("ERROR_DS_ATT_SCHEMA_REQ_ID");
static const std::string ERROR_DS_BAD_ATT_SCHEMA_SYNTAX_STR("ERROR_DS_BAD_ATT_SCHEMA_SYNTAX");
static const std::string ERROR_DS_CANT_CACHE_ATT_STR("ERROR_DS_CANT_CACHE_ATT");
static const std::string ERROR_DS_CANT_CACHE_CLASS_STR("ERROR_DS_CANT_CACHE_CLASS");
static const std::string ERROR_DS_CANT_REMOVE_ATT_CACHE_STR("ERROR_DS_CANT_REMOVE_ATT_CACHE");
static const std::string ERROR_DS_CANT_REMOVE_CLASS_CACHE_STR("ERROR_DS_CANT_REMOVE_CLASS_CACHE");
static const std::string ERROR_DS_CANT_RETRIEVE_DN_STR("ERROR_DS_CANT_RETRIEVE_DN");
static const std::string ERROR_DS_MISSING_SUPREF_STR("ERROR_DS_MISSING_SUPREF");
static const std::string ERROR_DS_CANT_RETRIEVE_INSTANCE_STR("ERROR_DS_CANT_RETRIEVE_INSTANCE");
static const std::string ERROR_DS_CODE_INCONSISTENCY_STR("ERROR_DS_CODE_INCONSISTENCY");
static const std::string ERROR_DS_DATABASE_ERROR_STR("ERROR_DS_DATABASE_ERROR");
static const std::string ERROR_DS_GOVERNSID_MISSING_STR("ERROR_DS_GOVERNSID_MISSING");
static const std::string ERROR_DS_MISSING_EXPECTED_ATT_STR("ERROR_DS_MISSING_EXPECTED_ATT");
static const std::string ERROR_DS_NCNAME_MISSING_CR_REF_STR("ERROR_DS_NCNAME_MISSING_CR_REF");
static const std::string ERROR_DS_SECURITY_CHECKING_ERROR_STR("ERROR_DS_SECURITY_CHECKING_ERROR");
static const std::string ERROR_DS_SCHEMA_NOT_LOADED_STR("ERROR_DS_SCHEMA_NOT_LOADED");
static const std::string ERROR_DS_SCHEMA_ALLOC_FAILED_STR("ERROR_DS_SCHEMA_ALLOC_FAILED");
static const std::string ERROR_DS_ATT_SCHEMA_REQ_SYNTAX_STR("ERROR_DS_ATT_SCHEMA_REQ_SYNTAX");
static const std::string ERROR_DS_GCVERIFY_ERROR_STR("ERROR_DS_GCVERIFY_ERROR");
static const std::string ERROR_DS_DRA_SCHEMA_MISMATCH_STR("ERROR_DS_DRA_SCHEMA_MISMATCH");
static const std::string ERROR_DS_CANT_FIND_DSA_OBJ_STR("ERROR_DS_CANT_FIND_DSA_OBJ");
static const std::string ERROR_DS_CANT_FIND_EXPECTED_NC_STR("ERROR_DS_CANT_FIND_EXPECTED_NC");
static const std::string ERROR_DS_CANT_FIND_NC_IN_CACHE_STR("ERROR_DS_CANT_FIND_NC_IN_CACHE");
static const std::string ERROR_DS_CANT_RETRIEVE_CHILD_STR("ERROR_DS_CANT_RETRIEVE_CHILD");
static const std::string ERROR_DS_SECURITY_ILLEGAL_MODIFY_STR("ERROR_DS_SECURITY_ILLEGAL_MODIFY");
static const std::string ERROR_DS_CANT_REPLACE_HIDDEN_REC_STR("ERROR_DS_CANT_REPLACE_HIDDEN_REC");
static const std::string ERROR_DS_BAD_HIERARCHY_FILE_STR("ERROR_DS_BAD_HIERARCHY_FILE");
static const std::string
    ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED_STR("ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED");
static const std::string ERROR_DS_CONFIG_PARAM_MISSING_STR("ERROR_DS_CONFIG_PARAM_MISSING");
static const std::string
    ERROR_DS_COUNTING_AB_INDICES_FAILED_STR("ERROR_DS_COUNTING_AB_INDICES_FAILED");
static const std::string
    ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED_STR("ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED");
static const std::string ERROR_DS_INTERNAL_FAILURE_STR("ERROR_DS_INTERNAL_FAILURE");
static const std::string ERROR_DS_UNKNOWN_ERROR_STR("ERROR_DS_UNKNOWN_ERROR");
static const std::string ERROR_DS_ROOT_REQUIRES_CLASS_TOP_STR("ERROR_DS_ROOT_REQUIRES_CLASS_TOP");
static const std::string ERROR_DS_REFUSING_FSMO_ROLES_STR("ERROR_DS_REFUSING_FSMO_ROLES");
static const std::string ERROR_DS_MISSING_FSMO_SETTINGS_STR("ERROR_DS_MISSING_FSMO_SETTINGS");
static const std::string
    ERROR_DS_UNABLE_TO_SURRENDER_ROLES_STR("ERROR_DS_UNABLE_TO_SURRENDER_ROLES");
static const std::string ERROR_DS_DRA_GENERIC_STR("ERROR_DS_DRA_GENERIC");
static const std::string ERROR_DS_DRA_INVALID_PARAMETER_STR("ERROR_DS_DRA_INVALID_PARAMETER");
static const std::string ERROR_DS_DRA_BUSY_STR("ERROR_DS_DRA_BUSY");
static const std::string ERROR_DS_DRA_BAD_DN_STR("ERROR_DS_DRA_BAD_DN");
static const std::string ERROR_DS_DRA_BAD_NC_STR("ERROR_DS_DRA_BAD_NC");
static const std::string ERROR_DS_DRA_DN_EXISTS_STR("ERROR_DS_DRA_DN_EXISTS");
static const std::string ERROR_DS_DRA_INTERNAL_ERROR_STR("ERROR_DS_DRA_INTERNAL_ERROR");
static const std::string ERROR_DS_DRA_INCONSISTENT_DIT_STR("ERROR_DS_DRA_INCONSISTENT_DIT");
static const std::string ERROR_DS_DRA_CONNECTION_FAILED_STR("ERROR_DS_DRA_CONNECTION_FAILED");
static const std::string ERROR_DS_DRA_BAD_INSTANCE_TYPE_STR("ERROR_DS_DRA_BAD_INSTANCE_TYPE");
static const std::string ERROR_DS_DRA_OUT_OF_MEM_STR("ERROR_DS_DRA_OUT_OF_MEM");
static const std::string ERROR_DS_DRA_MAIL_PROBLEM_STR("ERROR_DS_DRA_MAIL_PROBLEM");
static const std::string ERROR_DS_DRA_REF_ALREADY_EXISTS_STR("ERROR_DS_DRA_REF_ALREADY_EXISTS");
static const std::string ERROR_DS_DRA_REF_NOT_FOUND_STR("ERROR_DS_DRA_REF_NOT_FOUND");
static const std::string ERROR_DS_DRA_OBJ_IS_REP_SOURCE_STR("ERROR_DS_DRA_OBJ_IS_REP_SOURCE");
static const std::string ERROR_DS_DRA_DB_ERROR_STR("ERROR_DS_DRA_DB_ERROR");
static const std::string ERROR_DS_DRA_NO_REPLICA_STR("ERROR_DS_DRA_NO_REPLICA");
static const std::string ERROR_DS_DRA_ACCESS_DENIED_STR("ERROR_DS_DRA_ACCESS_DENIED");
static const std::string ERROR_DS_DRA_NOT_SUPPORTED_STR("ERROR_DS_DRA_NOT_SUPPORTED");
static const std::string ERROR_DS_DRA_RPC_CANCELLED_STR("ERROR_DS_DRA_RPC_CANCELLED");
static const std::string ERROR_DS_DRA_SOURCE_DISABLED_STR("ERROR_DS_DRA_SOURCE_DISABLED");
static const std::string ERROR_DS_DRA_SINK_DISABLED_STR("ERROR_DS_DRA_SINK_DISABLED");
static const std::string ERROR_DS_DRA_NAME_COLLISION_STR("ERROR_DS_DRA_NAME_COLLISION");
static const std::string ERROR_DS_DRA_SOURCE_REINSTALLED_STR("ERROR_DS_DRA_SOURCE_REINSTALLED");
static const std::string ERROR_DS_DRA_MISSING_PARENT_STR("ERROR_DS_DRA_MISSING_PARENT");
static const std::string ERROR_DS_DRA_PREEMPTED_STR("ERROR_DS_DRA_PREEMPTED");
static const std::string ERROR_DS_DRA_ABANDON_SYNC_STR("ERROR_DS_DRA_ABANDON_SYNC");
static const std::string ERROR_DS_DRA_SHUTDOWN_STR("ERROR_DS_DRA_SHUTDOWN");
static const std::string
    ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET_STR("ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET");
static const std::string
    ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA_STR("ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA");
static const std::string
    ERROR_DS_DRA_EXTN_CONNECTION_FAILED_STR("ERROR_DS_DRA_EXTN_CONNECTION_FAILED");
static const std::string ERROR_DS_INSTALL_SCHEMA_MISMATCH_STR("ERROR_DS_INSTALL_SCHEMA_MISMATCH");
static const std::string ERROR_DS_DUP_LINK_ID_STR("ERROR_DS_DUP_LINK_ID");
static const std::string ERROR_DS_NAME_ERROR_RESOLVING_STR("ERROR_DS_NAME_ERROR_RESOLVING");
static const std::string ERROR_DS_NAME_ERROR_NOT_FOUND_STR("ERROR_DS_NAME_ERROR_NOT_FOUND");
static const std::string ERROR_DS_NAME_ERROR_NOT_UNIQUE_STR("ERROR_DS_NAME_ERROR_NOT_UNIQUE");
static const std::string ERROR_DS_NAME_ERROR_NO_MAPPING_STR("ERROR_DS_NAME_ERROR_NO_MAPPING");
static const std::string ERROR_DS_NAME_ERROR_DOMAIN_ONLY_STR("ERROR_DS_NAME_ERROR_DOMAIN_ONLY");
static const std::string
    ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING_STR("ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING");
static const std::string ERROR_DS_CONSTRUCTED_ATT_MOD_STR("ERROR_DS_CONSTRUCTED_ATT_MOD");
static const std::string ERROR_DS_WRONG_OM_OBJ_CLASS_STR("ERROR_DS_WRONG_OM_OBJ_CLASS");
static const std::string ERROR_DS_DRA_REPL_PENDING_STR("ERROR_DS_DRA_REPL_PENDING");
static const std::string ERROR_DS_DS_REQUIRED_STR("ERROR_DS_DS_REQUIRED");
static const std::string
    ERROR_DS_INVALID_LDAP_DISPLAY_NAME_STR("ERROR_DS_INVALID_LDAP_DISPLAY_NAME");
static const std::string ERROR_DS_NON_BASE_SEARCH_STR("ERROR_DS_NON_BASE_SEARCH");
static const std::string ERROR_DS_CANT_RETRIEVE_ATTS_STR("ERROR_DS_CANT_RETRIEVE_ATTS");
static const std::string ERROR_DS_BACKLINK_WITHOUT_LINK_STR("ERROR_DS_BACKLINK_WITHOUT_LINK");
static const std::string ERROR_DS_EPOCH_MISMATCH_STR("ERROR_DS_EPOCH_MISMATCH");
static const std::string ERROR_DS_SRC_NAME_MISMATCH_STR("ERROR_DS_SRC_NAME_MISMATCH");
static const std::string ERROR_DS_SRC_AND_DST_NC_IDENTICAL_STR("ERROR_DS_SRC_AND_DST_NC_IDENTICAL");
static const std::string ERROR_DS_DST_NC_MISMATCH_STR("ERROR_DS_DST_NC_MISMATCH");
static const std::string
    ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC_STR("ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC");
static const std::string ERROR_DS_SRC_GUID_MISMATCH_STR("ERROR_DS_SRC_GUID_MISMATCH");
static const std::string ERROR_DS_CANT_MOVE_DELETED_OBJECT_STR("ERROR_DS_CANT_MOVE_DELETED_OBJECT");
static const std::string
    ERROR_DS_PDC_OPERATION_IN_PROGRESS_STR("ERROR_DS_PDC_OPERATION_IN_PROGRESS");
static const std::string
    ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD_STR("ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD");
static const std::string
    ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION_STR("ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION");
static const std::string
    ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS_STR("ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS");
static const std::string ERROR_DS_NC_MUST_HAVE_NC_PARENT_STR("ERROR_DS_NC_MUST_HAVE_NC_PARENT");
static const std::string
    ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_STR("ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE");
static const std::string ERROR_DS_DST_DOMAIN_NOT_NATIVE_STR("ERROR_DS_DST_DOMAIN_NOT_NATIVE");
static const std::string
    ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER_STR("ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER");
static const std::string ERROR_DS_CANT_MOVE_ACCOUNT_GROUP_STR("ERROR_DS_CANT_MOVE_ACCOUNT_GROUP");
static const std::string ERROR_DS_CANT_MOVE_RESOURCE_GROUP_STR("ERROR_DS_CANT_MOVE_RESOURCE_GROUP");
static const std::string ERROR_DS_INVALID_SEARCH_FLAG_STR("ERROR_DS_INVALID_SEARCH_FLAG");
static const std::string ERROR_DS_NO_TREE_DELETE_ABOVE_NC_STR("ERROR_DS_NO_TREE_DELETE_ABOVE_NC");
static const std::string
    ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE_STR("ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE");
static const std::string ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE_STR(
    "ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE");
static const std::string ERROR_DS_SAM_INIT_FAILURE_STR("ERROR_DS_SAM_INIT_FAILURE");
static const std::string
    ERROR_DS_SENSITIVE_GROUP_VIOLATION_STR("ERROR_DS_SENSITIVE_GROUP_VIOLATION");
static const std::string ERROR_DS_CANT_MOD_PRIMARYGROUPID_STR("ERROR_DS_CANT_MOD_PRIMARYGROUPID");
static const std::string ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD_STR("ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD");
static const std::string ERROR_DS_NONSAFE_SCHEMA_CHANGE_STR("ERROR_DS_NONSAFE_SCHEMA_CHANGE");
static const std::string ERROR_DS_SCHEMA_UPDATE_DISALLOWED_STR("ERROR_DS_SCHEMA_UPDATE_DISALLOWED");
static const std::string ERROR_DS_CANT_CREATE_UNDER_SCHEMA_STR("ERROR_DS_CANT_CREATE_UNDER_SCHEMA");
static const std::string
    ERROR_DS_INSTALL_NO_SRC_SCH_VERSION_STR("ERROR_DS_INSTALL_NO_SRC_SCH_VERSION");
static const std::string
    ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE_STR("ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE");
static const std::string ERROR_DS_INVALID_GROUP_TYPE_STR("ERROR_DS_INVALID_GROUP_TYPE");
static const std::string
    ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN_STR("ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN");
static const std::string
    ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN_STR("ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN");
static const std::string
    ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER_STR("ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER");
static const std::string
    ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER_STR("ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER");
static const std::string
    ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER_STR("ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER");
static const std::string ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER_STR(
    "ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER");
static const std::string ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER_STR(
    "ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER");
static const std::string ERROR_DS_HAVE_PRIMARY_MEMBERS_STR("ERROR_DS_HAVE_PRIMARY_MEMBERS");
static const std::string
    ERROR_DS_STRING_SD_CONVERSION_FAILED_STR("ERROR_DS_STRING_SD_CONVERSION_FAILED");
static const std::string ERROR_DS_NAMING_MASTER_GC_STR("ERROR_DS_NAMING_MASTER_GC");
static const std::string ERROR_DS_LOOKUP_FAILURE_STR("ERROR_DS_LOOKUP_FAILURE");
static const std::string ERROR_DS_COULDNT_UPDATE_SPNS_STR("ERROR_DS_COULDNT_UPDATE_SPNS");
static const std::string ERROR_DS_CANT_RETRIEVE_SD_STR("ERROR_DS_CANT_RETRIEVE_SD");
static const std::string ERROR_DS_KEY_NOT_UNIQUE_STR("ERROR_DS_KEY_NOT_UNIQUE");
static const std::string ERROR_DS_WRONG_LINKED_ATT_SYNTAX_STR("ERROR_DS_WRONG_LINKED_ATT_SYNTAX");
static const std::string
    ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD_STR("ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD");
static const std::string ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY_STR("ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY");
static const std::string ERROR_DS_CANT_START_STR("ERROR_DS_CANT_START");
static const std::string ERROR_DS_INIT_FAILURE_STR("ERROR_DS_INIT_FAILURE");
static const std::string
    ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION_STR("ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION");
static const std::string ERROR_DS_SOURCE_DOMAIN_IN_FOREST_STR("ERROR_DS_SOURCE_DOMAIN_IN_FOREST");
static const std::string
    ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST_STR("ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST");
static const std::string
    ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED_STR("ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED");
static const std::string
    ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN_STR("ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN");
static const std::string
    ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER_STR("ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER");
static const std::string ERROR_DS_SRC_SID_EXISTS_IN_FOREST_STR("ERROR_DS_SRC_SID_EXISTS_IN_FOREST");
static const std::string
    ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH_STR("ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH");
static const std::string ERROR_SAM_INIT_FAILURE_STR("ERROR_SAM_INIT_FAILURE");
static const std::string ERROR_DS_DRA_SCHEMA_INFO_SHIP_STR("ERROR_DS_DRA_SCHEMA_INFO_SHIP");
static const std::string ERROR_DS_DRA_SCHEMA_CONFLICT_STR("ERROR_DS_DRA_SCHEMA_CONFLICT");
static const std::string
    ERROR_DS_DRA_EARLIER_SCHEMA_CONLICT_STR("ERROR_DS_DRA_EARLIER_SCHEMA_CONLICT");
static const std::string ERROR_DS_DRA_OBJ_NC_MISMATCH_STR("ERROR_DS_DRA_OBJ_NC_MISMATCH");
static const std::string ERROR_DS_NC_STILL_HAS_DSAS_STR("ERROR_DS_NC_STILL_HAS_DSAS");
static const std::string ERROR_DS_GC_REQUIRED_STR("ERROR_DS_GC_REQUIRED");
static const std::string
    ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY_STR("ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY");
static const std::string
    ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS_STR("ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS");
static const std::string ERROR_DS_CANT_ADD_TO_GC_STR("ERROR_DS_CANT_ADD_TO_GC");
static const std::string ERROR_DS_NO_CHECKPOINT_WITH_PDC_STR("ERROR_DS_NO_CHECKPOINT_WITH_PDC");
static const std::string
    ERROR_DS_SOURCE_AUDITING_NOT_ENABLED_STR("ERROR_DS_SOURCE_AUDITING_NOT_ENABLED");
static const std::string
    ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC_STR("ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC");
static const std::string ERROR_DS_INVALID_NAME_FOR_SPN_STR("ERROR_DS_INVALID_NAME_FOR_SPN");
static const std::string
    ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS_STR("ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS");
static const std::string ERROR_DS_UNICODEPWD_NOT_IN_QUOTES_STR("ERROR_DS_UNICODEPWD_NOT_IN_QUOTES");
static const std::string
    ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED_STR("ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED");
static const std::string ERROR_DS_MUST_BE_RUN_ON_DST_DC_STR("ERROR_DS_MUST_BE_RUN_ON_DST_DC");
static const std::string
    ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER_STR("ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER");
static const std::string
    ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ_STR("ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ");
static const std::string ERROR_DS_INIT_FAILURE_CONSOLE_STR("ERROR_DS_INIT_FAILURE_CONSOLE");
static const std::string ERROR_DS_SAM_INIT_FAILURE_CONSOLE_STR("ERROR_DS_SAM_INIT_FAILURE_CONSOLE");
static const std::string
    ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4_STR("ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4");
static const std::string
    ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER_STR("ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER");
static const std::string DNS_ERROR_RCODE_FORMAT_ERROR_STR("DNS_ERROR_RCODE_FORMAT_ERROR");
static const std::string DNS_ERROR_RCODE_SERVER_FAILURE_STR("DNS_ERROR_RCODE_SERVER_FAILURE");
static const std::string DNS_ERROR_RCODE_NAME_ERROR_STR("DNS_ERROR_RCODE_NAME_ERROR");
static const std::string DNS_ERROR_RCODE_NOT_IMPLEMENTED_STR("DNS_ERROR_RCODE_NOT_IMPLEMENTED");
static const std::string DNS_ERROR_RCODE_REFUSED_STR("DNS_ERROR_RCODE_REFUSED");
static const std::string DNS_ERROR_RCODE_YXDOMAIN_STR("DNS_ERROR_RCODE_YXDOMAIN");
static const std::string DNS_ERROR_RCODE_YXRRSET_STR("DNS_ERROR_RCODE_YXRRSET");
static const std::string DNS_ERROR_RCODE_NXRRSET_STR("DNS_ERROR_RCODE_NXRRSET");
static const std::string DNS_ERROR_RCODE_NOTAUTH_STR("DNS_ERROR_RCODE_NOTAUTH");
static const std::string DNS_ERROR_RCODE_NOTZONE_STR("DNS_ERROR_RCODE_NOTZONE");
static const std::string DNS_ERROR_RCODE_BADSIG_STR("DNS_ERROR_RCODE_BADSIG");
static const std::string DNS_ERROR_RCODE_BADKEY_STR("DNS_ERROR_RCODE_BADKEY");
static const std::string DNS_ERROR_RCODE_BADTIME_STR("DNS_ERROR_RCODE_BADTIME");
static const std::string DNS_INFO_NO_RECORDS_STR("DNS_INFO_NO_RECORDS");
static const std::string DNS_ERROR_BAD_PACKET_STR("DNS_ERROR_BAD_PACKET");
static const std::string DNS_ERROR_NO_PACKET_STR("DNS_ERROR_NO_PACKET");
static const std::string DNS_ERROR_RCODE_STR("DNS_ERROR_RCODE");
static const std::string DNS_ERROR_UNSECURE_PACKET_STR("DNS_ERROR_UNSECURE_PACKET");
static const std::string DNS_REQUEST_PENDING_STR("DNS_REQUEST_PENDING");
static const std::string DNS_ERROR_INVALID_TYPE_STR("DNS_ERROR_INVALID_TYPE");
static const std::string DNS_ERROR_INVALID_IP_ADDRESS_STR("DNS_ERROR_INVALID_IP_ADDRESS");
static const std::string DNS_ERROR_INVALID_PROPERTY_STR("DNS_ERROR_INVALID_PROPERTY");
static const std::string DNS_ERROR_TRY_AGAIN_LATER_STR("DNS_ERROR_TRY_AGAIN_LATER");
static const std::string DNS_ERROR_NOT_UNIQUE_STR("DNS_ERROR_NOT_UNIQUE");
static const std::string DNS_ERROR_NON_RFC_NAME_STR("DNS_ERROR_NON_RFC_NAME");
static const std::string DNS_STATUS_FQDN_STR("DNS_STATUS_FQDN");
static const std::string DNS_STATUS_DOTTED_NAME_STR("DNS_STATUS_DOTTED_NAME");
static const std::string DNS_STATUS_SINGLE_PART_NAME_STR("DNS_STATUS_SINGLE_PART_NAME");
static const std::string DNS_ERROR_INVALID_NAME_CHAR_STR("DNS_ERROR_INVALID_NAME_CHAR");
static const std::string DNS_ERROR_NUMERIC_NAME_STR("DNS_ERROR_NUMERIC_NAME");
static const std::string DNS_ERROR_ZONE_DOES_NOT_EXIST_STR("DNS_ERROR_ZONE_DOES_NOT_EXIST");
static const std::string DNS_ERROR_NO_ZONE_INFO_STR("DNS_ERROR_NO_ZONE_INFO");
static const std::string DNS_ERROR_INVALID_ZONE_OPERATION_STR("DNS_ERROR_INVALID_ZONE_OPERATION");
static const std::string
    DNS_ERROR_ZONE_CONFIGURATION_ERROR_STR("DNS_ERROR_ZONE_CONFIGURATION_ERROR");
static const std::string DNS_ERROR_ZONE_HAS_NO_SOA_RECORD_STR("DNS_ERROR_ZONE_HAS_NO_SOA_RECORD");
static const std::string DNS_ERROR_ZONE_HAS_NO_NS_RECORDS_STR("DNS_ERROR_ZONE_HAS_NO_NS_RECORDS");
static const std::string DNS_ERROR_ZONE_LOCKED_STR("DNS_ERROR_ZONE_LOCKED");
static const std::string DNS_ERROR_ZONE_CREATION_FAILED_STR("DNS_ERROR_ZONE_CREATION_FAILED");
static const std::string DNS_ERROR_ZONE_ALREADY_EXISTS_STR("DNS_ERROR_ZONE_ALREADY_EXISTS");
static const std::string DNS_ERROR_AUTOZONE_ALREADY_EXISTS_STR("DNS_ERROR_AUTOZONE_ALREADY_EXISTS");
static const std::string DNS_ERROR_INVALID_ZONE_TYPE_STR("DNS_ERROR_INVALID_ZONE_TYPE");
static const std::string
    DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP_STR("DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP");
static const std::string DNS_ERROR_ZONE_NOT_SECONDARY_STR("DNS_ERROR_ZONE_NOT_SECONDARY");
static const std::string
    DNS_ERROR_NEED_SECONDARY_ADDRESSES_STR("DNS_ERROR_NEED_SECONDARY_ADDRESSES");
static const std::string DNS_ERROR_WINS_INIT_FAILED_STR("DNS_ERROR_WINS_INIT_FAILED");
static const std::string DNS_ERROR_NEED_WINS_SERVERS_STR("DNS_ERROR_NEED_WINS_SERVERS");
static const std::string DNS_ERROR_NBSTAT_INIT_FAILED_STR("DNS_ERROR_NBSTAT_INIT_FAILED");
static const std::string DNS_ERROR_SOA_DELETE_INVALID_STR("DNS_ERROR_SOA_DELETE_INVALID");
static const std::string
    DNS_ERROR_PRIMARY_REQUIRES_DATAFILE_STR("DNS_ERROR_PRIMARY_REQUIRES_DATAFILE");
static const std::string DNS_ERROR_INVALID_DATAFILE_NAME_STR("DNS_ERROR_INVALID_DATAFILE_NAME");
static const std::string DNS_ERROR_DATAFILE_OPEN_FAILURE_STR("DNS_ERROR_DATAFILE_OPEN_FAILURE");
static const std::string DNS_ERROR_FILE_WRITEBACK_FAILED_STR("DNS_ERROR_FILE_WRITEBACK_FAILED");
static const std::string DNS_ERROR_DATAFILE_PARSING_STR("DNS_ERROR_DATAFILE_PARSING");
static const std::string DNS_ERROR_RECORD_DOES_NOT_EXIST_STR("DNS_ERROR_RECORD_DOES_NOT_EXIST");
static const std::string DNS_ERROR_RECORD_FORMAT_STR("DNS_ERROR_RECORD_FORMAT");
static const std::string DNS_ERROR_NODE_CREATION_FAILED_STR("DNS_ERROR_NODE_CREATION_FAILED");
static const std::string DNS_ERROR_UNKNOWN_RECORD_TYPE_STR("DNS_ERROR_UNKNOWN_RECORD_TYPE");
static const std::string DNS_ERROR_RECORD_TIMED_OUT_STR("DNS_ERROR_RECORD_TIMED_OUT");
static const std::string DNS_ERROR_NAME_NOT_IN_ZONE_STR("DNS_ERROR_NAME_NOT_IN_ZONE");
static const std::string DNS_ERROR_CNAME_LOOP_STR("DNS_ERROR_CNAME_LOOP");
static const std::string DNS_ERROR_NODE_IS_CNAME_STR("DNS_ERROR_NODE_IS_CNAME");
static const std::string DNS_ERROR_CNAME_COLLISION_STR("DNS_ERROR_CNAME_COLLISION");
static const std::string
    DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT_STR("DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT");
static const std::string DNS_ERROR_RECORD_ALREADY_EXISTS_STR("DNS_ERROR_RECORD_ALREADY_EXISTS");
static const std::string DNS_ERROR_SECONDARY_DATA_STR("DNS_ERROR_SECONDARY_DATA");
static const std::string DNS_ERROR_NO_CREATE_CACHE_DATA_STR("DNS_ERROR_NO_CREATE_CACHE_DATA");
static const std::string DNS_ERROR_NAME_DOES_NOT_EXIST_STR("DNS_ERROR_NAME_DOES_NOT_EXIST");
static const std::string DNS_WARNING_PTR_CREATE_FAILED_STR("DNS_WARNING_PTR_CREATE_FAILED");
static const std::string DNS_WARNING_DOMAIN_UNDELETED_STR("DNS_WARNING_DOMAIN_UNDELETED");
static const std::string DNS_ERROR_DS_UNAVAILABLE_STR("DNS_ERROR_DS_UNAVAILABLE");
static const std::string DNS_ERROR_DS_ZONE_ALREADY_EXISTS_STR("DNS_ERROR_DS_ZONE_ALREADY_EXISTS");
static const std::string DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE_STR("DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE");
static const std::string DNS_INFO_AXFR_COMPLETE_STR("DNS_INFO_AXFR_COMPLETE");
static const std::string DNS_ERROR_AXFR_STR("DNS_ERROR_AXFR");
static const std::string DNS_INFO_ADDED_LOCAL_WINS_STR("DNS_INFO_ADDED_LOCAL_WINS");
static const std::string DNS_STATUS_CONTINUE_NEEDED_STR("DNS_STATUS_CONTINUE_NEEDED");
static const std::string DNS_ERROR_NO_TCPIP_STR("DNS_ERROR_NO_TCPIP");
static const std::string DNS_ERROR_NO_DNS_SERVERS_STR("DNS_ERROR_NO_DNS_SERVERS");

static const std::string WIN_ERROR_UNKNOWN_STR("UNKNOWN");

const std::string& to_string(WinError error_code) {

    switch (error_code) {
    case WinError::ERROR_SUCCESS:
        return ERROR_SUCCESS_STR;
    case WinError::ERROR_INVALID_FUNCTION:
        return ERROR_INVALID_FUNCTION_STR;
    case WinError::ERROR_FILE_NOT_FOUND:
        return ERROR_FILE_NOT_FOUND_STR;
    case WinError::ERROR_PATH_NOT_FOUND:
        return ERROR_PATH_NOT_FOUND_STR;
    case WinError::ERROR_TOO_MANY_OPEN_FILES:
        return ERROR_TOO_MANY_OPEN_FILES_STR;
    case WinError::ERROR_ACCESS_DENIED:
        return ERROR_ACCESS_DENIED_STR;
    case WinError::ERROR_INVALID_HANDLE:
        return ERROR_INVALID_HANDLE_STR;
    case WinError::ERROR_ARENA_TRASHED:
        return ERROR_ARENA_TRASHED_STR;
    case WinError::ERROR_NOT_ENOUGH_MEMORY:
        return ERROR_NOT_ENOUGH_MEMORY_STR;
    case WinError::ERROR_INVALID_BLOCK:
        return ERROR_INVALID_BLOCK_STR;
    case WinError::ERROR_BAD_ENVIRONMENT:
        return ERROR_BAD_ENVIRONMENT_STR;
    case WinError::ERROR_BAD_FORMAT:
        return ERROR_BAD_FORMAT_STR;
    case WinError::ERROR_INVALID_ACCESS:
        return ERROR_INVALID_ACCESS_STR;
    case WinError::ERROR_INVALID_DATA:
        return ERROR_INVALID_DATA_STR;
    case WinError::ERROR_OUTOFMEMORY:
        return ERROR_OUTOFMEMORY_STR;
    case WinError::ERROR_INVALID_DRIVE:
        return ERROR_INVALID_DRIVE_STR;
    case WinError::ERROR_CURRENT_DIRECTORY:
        return ERROR_CURRENT_DIRECTORY_STR;
    case WinError::ERROR_NOT_SAME_DEVICE:
        return ERROR_NOT_SAME_DEVICE_STR;
    case WinError::ERROR_NO_MORE_FILES:
        return ERROR_NO_MORE_FILES_STR;
    case WinError::ERROR_WRITE_PROTECT:
        return ERROR_WRITE_PROTECT_STR;
    case WinError::ERROR_BAD_UNIT:
        return ERROR_BAD_UNIT_STR;
    case WinError::ERROR_NOT_READY:
        return ERROR_NOT_READY_STR;
    case WinError::ERROR_BAD_COMMAND:
        return ERROR_BAD_COMMAND_STR;
    case WinError::ERROR_CRC:
        return ERROR_CRC_STR;
    case WinError::ERROR_BAD_LENGTH:
        return ERROR_BAD_LENGTH_STR;
    case WinError::ERROR_SEEK:
        return ERROR_SEEK_STR;
    case WinError::ERROR_NOT_DOS_DISK:
        return ERROR_NOT_DOS_DISK_STR;
    case WinError::ERROR_SECTOR_NOT_FOUND:
        return ERROR_SECTOR_NOT_FOUND_STR;
    case WinError::ERROR_OUT_OF_PAPER:
        return ERROR_OUT_OF_PAPER_STR;
    case WinError::ERROR_WRITE_FAULT:
        return ERROR_WRITE_FAULT_STR;
    case WinError::ERROR_READ_FAULT:
        return ERROR_READ_FAULT_STR;
    case WinError::ERROR_GEN_FAILURE:
        return ERROR_GEN_FAILURE_STR;
    case WinError::ERROR_SHARING_VIOLATION:
        return ERROR_SHARING_VIOLATION_STR;
    case WinError::ERROR_LOCK_VIOLATION:
        return ERROR_LOCK_VIOLATION_STR;
    case WinError::ERROR_WRONG_DISK:
        return ERROR_WRONG_DISK_STR;
    case WinError::ERROR_FCB_UNAVAILABLE:
        return ERROR_FCB_UNAVAILABLE_STR;
    case WinError::ERROR_SHARING_BUFFER_EXCEEDED:
        return ERROR_SHARING_BUFFER_EXCEEDED_STR;
    case WinError::ERROR_HANDLE_EOF:
        return ERROR_HANDLE_EOF_STR;
    case WinError::ERROR_HANDLE_DISK_FULL:
        return ERROR_HANDLE_DISK_FULL_STR;
    case WinError::ERROR_NOT_SUPPORTED:
        return ERROR_NOT_SUPPORTED_STR;
    case WinError::ERROR_REM_NOT_LIST:
        return ERROR_REM_NOT_LIST_STR;
    case WinError::ERROR_DUP_NAME:
        return ERROR_DUP_NAME_STR;
    case WinError::ERROR_BAD_NETPATH:
        return ERROR_BAD_NETPATH_STR;
    case WinError::ERROR_NETWORK_BUSY:
        return ERROR_NETWORK_BUSY_STR;
    case WinError::ERROR_DEV_NOT_EXIST:
        return ERROR_DEV_NOT_EXIST_STR;
    case WinError::ERROR_TOO_MANY_CMDS:
        return ERROR_TOO_MANY_CMDS_STR;
    case WinError::ERROR_ADAP_HDW_ERR:
        return ERROR_ADAP_HDW_ERR_STR;
    case WinError::ERROR_BAD_NET_RESP:
        return ERROR_BAD_NET_RESP_STR;
    case WinError::ERROR_UNEXP_NET_ERR:
        return ERROR_UNEXP_NET_ERR_STR;
    case WinError::ERROR_BAD_REM_ADAP:
        return ERROR_BAD_REM_ADAP_STR;
    case WinError::ERROR_PRINTQ_FULL:
        return ERROR_PRINTQ_FULL_STR;
    case WinError::ERROR_NO_SPOOL_SPACE:
        return ERROR_NO_SPOOL_SPACE_STR;
    case WinError::ERROR_PRINT_CANCELLED:
        return ERROR_PRINT_CANCELLED_STR;
    case WinError::ERROR_NETNAME_DELETED:
        return ERROR_NETNAME_DELETED_STR;
    case WinError::ERROR_NETWORK_ACCESS_DENIED:
        return ERROR_NETWORK_ACCESS_DENIED_STR;
    case WinError::ERROR_BAD_DEV_TYPE:
        return ERROR_BAD_DEV_TYPE_STR;
    case WinError::ERROR_BAD_NET_NAME:
        return ERROR_BAD_NET_NAME_STR;
    case WinError::ERROR_TOO_MANY_NAMES:
        return ERROR_TOO_MANY_NAMES_STR;
    case WinError::ERROR_TOO_MANY_SESS:
        return ERROR_TOO_MANY_SESS_STR;
    case WinError::ERROR_SHARING_PAUSED:
        return ERROR_SHARING_PAUSED_STR;
    case WinError::ERROR_REQ_NOT_ACCEP:
        return ERROR_REQ_NOT_ACCEP_STR;
    case WinError::ERROR_REDIR_PAUSED:
        return ERROR_REDIR_PAUSED_STR;
    case WinError::ERROR_FILE_EXISTS:
        return ERROR_FILE_EXISTS_STR;
    case WinError::ERROR_CANNOT_MAKE:
        return ERROR_CANNOT_MAKE_STR;
    case WinError::ERROR_FAIL_I24:
        return ERROR_FAIL_I24_STR;
    case WinError::ERROR_OUT_OF_STRUCTURES:
        return ERROR_OUT_OF_STRUCTURES_STR;
    case WinError::ERROR_ALREADY_ASSIGNED:
        return ERROR_ALREADY_ASSIGNED_STR;
    case WinError::ERROR_INVALID_PASSWORD:
        return ERROR_INVALID_PASSWORD_STR;
    case WinError::ERROR_INVALID_PARAMETER:
        return ERROR_INVALID_PARAMETER_STR;
    case WinError::ERROR_NET_WRITE_FAULT:
        return ERROR_NET_WRITE_FAULT_STR;
    case WinError::ERROR_NO_PROC_SLOTS:
        return ERROR_NO_PROC_SLOTS_STR;
    case WinError::ERROR_TOO_MANY_SEMAPHORES:
        return ERROR_TOO_MANY_SEMAPHORES_STR;
    case WinError::ERROR_EXCL_SEM_ALREADY_OWNED:
        return ERROR_EXCL_SEM_ALREADY_OWNED_STR;
    case WinError::ERROR_SEM_IS_SET:
        return ERROR_SEM_IS_SET_STR;
    case WinError::ERROR_TOO_MANY_SEM_REQUESTS:
        return ERROR_TOO_MANY_SEM_REQUESTS_STR;
    case WinError::ERROR_INVALID_AT_INTERRUPT_TIME:
        return ERROR_INVALID_AT_INTERRUPT_TIME_STR;
    case WinError::ERROR_SEM_OWNER_DIED:
        return ERROR_SEM_OWNER_DIED_STR;
    case WinError::ERROR_SEM_USER_LIMIT:
        return ERROR_SEM_USER_LIMIT_STR;
    case WinError::ERROR_DISK_CHANGE:
        return ERROR_DISK_CHANGE_STR;
    case WinError::ERROR_DRIVE_LOCKED:
        return ERROR_DRIVE_LOCKED_STR;
    case WinError::ERROR_BROKEN_PIPE:
        return ERROR_BROKEN_PIPE_STR;
    case WinError::ERROR_OPEN_FAILED:
        return ERROR_OPEN_FAILED_STR;
    case WinError::ERROR_BUFFER_OVERFLOW:
        return ERROR_BUFFER_OVERFLOW_STR;
    case WinError::ERROR_DISK_FULL:
        return ERROR_DISK_FULL_STR;
    case WinError::ERROR_NO_MORE_SEARCH_HANDLES:
        return ERROR_NO_MORE_SEARCH_HANDLES_STR;
    case WinError::ERROR_INVALID_TARGET_HANDLE:
        return ERROR_INVALID_TARGET_HANDLE_STR;
    case WinError::ERROR_INVALID_CATEGORY:
        return ERROR_INVALID_CATEGORY_STR;
    case WinError::ERROR_INVALID_VERIFY_SWITCH:
        return ERROR_INVALID_VERIFY_SWITCH_STR;
    case WinError::ERROR_BAD_DRIVER_LEVEL:
        return ERROR_BAD_DRIVER_LEVEL_STR;
    case WinError::ERROR_CALL_NOT_IMPLEMENTED:
        return ERROR_CALL_NOT_IMPLEMENTED_STR;
    case WinError::ERROR_SEM_TIMEOUT:
        return ERROR_SEM_TIMEOUT_STR;
    case WinError::ERROR_INSUFFICIENT_BUFFER:
        return ERROR_INSUFFICIENT_BUFFER_STR;
    case WinError::ERROR_INVALID_NAME:
        return ERROR_INVALID_NAME_STR;
    case WinError::ERROR_INVALID_LEVEL:
        return ERROR_INVALID_LEVEL_STR;
    case WinError::ERROR_NO_VOLUME_LABEL:
        return ERROR_NO_VOLUME_LABEL_STR;
    case WinError::ERROR_MOD_NOT_FOUND:
        return ERROR_MOD_NOT_FOUND_STR;
    case WinError::ERROR_PROC_NOT_FOUND:
        return ERROR_PROC_NOT_FOUND_STR;
    case WinError::ERROR_WAIT_NO_CHILDREN:
        return ERROR_WAIT_NO_CHILDREN_STR;
    case WinError::ERROR_CHILD_NOT_COMPLETE:
        return ERROR_CHILD_NOT_COMPLETE_STR;
    case WinError::ERROR_DIRECT_ACCESS_HANDLE:
        return ERROR_DIRECT_ACCESS_HANDLE_STR;
    case WinError::ERROR_NEGATIVE_SEEK:
        return ERROR_NEGATIVE_SEEK_STR;
    case WinError::ERROR_SEEK_ON_DEVICE:
        return ERROR_SEEK_ON_DEVICE_STR;
    case WinError::ERROR_IS_JOIN_TARGET:
        return ERROR_IS_JOIN_TARGET_STR;
    case WinError::ERROR_IS_JOINED:
        return ERROR_IS_JOINED_STR;
    case WinError::ERROR_IS_SUBSTED:
        return ERROR_IS_SUBSTED_STR;
    case WinError::ERROR_NOT_JOINED:
        return ERROR_NOT_JOINED_STR;
    case WinError::ERROR_NOT_SUBSTED:
        return ERROR_NOT_SUBSTED_STR;
    case WinError::ERROR_JOIN_TO_JOIN:
        return ERROR_JOIN_TO_JOIN_STR;
    case WinError::ERROR_SUBST_TO_SUBST:
        return ERROR_SUBST_TO_SUBST_STR;
    case WinError::ERROR_JOIN_TO_SUBST:
        return ERROR_JOIN_TO_SUBST_STR;
    case WinError::ERROR_SUBST_TO_JOIN:
        return ERROR_SUBST_TO_JOIN_STR;
    case WinError::ERROR_BUSY_DRIVE:
        return ERROR_BUSY_DRIVE_STR;
    case WinError::ERROR_SAME_DRIVE:
        return ERROR_SAME_DRIVE_STR;
    case WinError::ERROR_DIR_NOT_ROOT:
        return ERROR_DIR_NOT_ROOT_STR;
    case WinError::ERROR_DIR_NOT_EMPTY:
        return ERROR_DIR_NOT_EMPTY_STR;
    case WinError::ERROR_IS_SUBST_PATH:
        return ERROR_IS_SUBST_PATH_STR;
    case WinError::ERROR_IS_JOIN_PATH:
        return ERROR_IS_JOIN_PATH_STR;
    case WinError::ERROR_PATH_BUSY:
        return ERROR_PATH_BUSY_STR;
    case WinError::ERROR_IS_SUBST_TARGET:
        return ERROR_IS_SUBST_TARGET_STR;
    case WinError::ERROR_SYSTEM_TRACE:
        return ERROR_SYSTEM_TRACE_STR;
    case WinError::ERROR_INVALID_EVENT_COUNT:
        return ERROR_INVALID_EVENT_COUNT_STR;
    case WinError::ERROR_TOO_MANY_MUXWAITERS:
        return ERROR_TOO_MANY_MUXWAITERS_STR;
    case WinError::ERROR_INVALID_LIST_FORMAT:
        return ERROR_INVALID_LIST_FORMAT_STR;
    case WinError::ERROR_LABEL_TOO_LONG:
        return ERROR_LABEL_TOO_LONG_STR;
    case WinError::ERROR_TOO_MANY_TCBS:
        return ERROR_TOO_MANY_TCBS_STR;
    case WinError::ERROR_SIGNAL_REFUSED:
        return ERROR_SIGNAL_REFUSED_STR;
    case WinError::ERROR_DISCARDED:
        return ERROR_DISCARDED_STR;
    case WinError::ERROR_NOT_LOCKED:
        return ERROR_NOT_LOCKED_STR;
    case WinError::ERROR_BAD_THREADID_ADDR:
        return ERROR_BAD_THREADID_ADDR_STR;
    case WinError::ERROR_BAD_ARGUMENTS:
        return ERROR_BAD_ARGUMENTS_STR;
    case WinError::ERROR_BAD_PATHNAME:
        return ERROR_BAD_PATHNAME_STR;
    case WinError::ERROR_SIGNAL_PENDING:
        return ERROR_SIGNAL_PENDING_STR;
    case WinError::ERROR_MAX_THRDS_REACHED:
        return ERROR_MAX_THRDS_REACHED_STR;
    case WinError::ERROR_LOCK_FAILED:
        return ERROR_LOCK_FAILED_STR;
    case WinError::ERROR_BUSY:
        return ERROR_BUSY_STR;
    case WinError::ERROR_DEVICE_SUPPORT_IN_PROGRESS:
        return ERROR_DEVICE_SUPPORT_IN_PROGRESS_STR;
    case WinError::ERROR_CANCEL_VIOLATION:
        return ERROR_CANCEL_VIOLATION_STR;
    case WinError::ERROR_ATOMIC_LOCKS_NOT_SUPPORTED:
        return ERROR_ATOMIC_LOCKS_NOT_SUPPORTED_STR;
    case WinError::ERROR_INVALID_SEGMENT_NUMBER:
        return ERROR_INVALID_SEGMENT_NUMBER_STR;
    case WinError::ERROR_INVALID_ORDINAL:
        return ERROR_INVALID_ORDINAL_STR;
    case WinError::ERROR_ALREADY_EXISTS:
        return ERROR_ALREADY_EXISTS_STR;
    case WinError::ERROR_INVALID_FLAG_NUMBER:
        return ERROR_INVALID_FLAG_NUMBER_STR;
    case WinError::ERROR_SEM_NOT_FOUND:
        return ERROR_SEM_NOT_FOUND_STR;
    case WinError::ERROR_INVALID_STARTING_CODESEG:
        return ERROR_INVALID_STARTING_CODESEG_STR;
    case WinError::ERROR_INVALID_STACKSEG:
        return ERROR_INVALID_STACKSEG_STR;
    case WinError::ERROR_INVALID_MODULETYPE:
        return ERROR_INVALID_MODULETYPE_STR;
    case WinError::ERROR_INVALID_EXE_SIGNATURE:
        return ERROR_INVALID_EXE_SIGNATURE_STR;
    case WinError::ERROR_EXE_MARKED_INVALID:
        return ERROR_EXE_MARKED_INVALID_STR;
    case WinError::ERROR_BAD_EXE_FORMAT:
        return ERROR_BAD_EXE_FORMAT_STR;
    case WinError::ERROR_ITERATED_DATA_EXCEEDS_64k:
        return ERROR_ITERATED_DATA_EXCEEDS_64k_STR;
    case WinError::ERROR_INVALID_MINALLOCSIZE:
        return ERROR_INVALID_MINALLOCSIZE_STR;
    case WinError::ERROR_DYNLINK_FROM_INVALID_RING:
        return ERROR_DYNLINK_FROM_INVALID_RING_STR;
    case WinError::ERROR_IOPL_NOT_ENABLED:
        return ERROR_IOPL_NOT_ENABLED_STR;
    case WinError::ERROR_INVALID_SEGDPL:
        return ERROR_INVALID_SEGDPL_STR;
    case WinError::ERROR_AUTODATASEG_EXCEEDS_64k:
        return ERROR_AUTODATASEG_EXCEEDS_64k_STR;
    case WinError::ERROR_RING2SEG_MUST_BE_MOVABLE:
        return ERROR_RING2SEG_MUST_BE_MOVABLE_STR;
    case WinError::ERROR_RELOC_CHAIN_XEEDS_SEGLIM:
        return ERROR_RELOC_CHAIN_XEEDS_SEGLIM_STR;
    case WinError::ERROR_INFLOOP_IN_RELOC_CHAIN:
        return ERROR_INFLOOP_IN_RELOC_CHAIN_STR;
    case WinError::ERROR_ENVVAR_NOT_FOUND:
        return ERROR_ENVVAR_NOT_FOUND_STR;
    case WinError::ERROR_NO_SIGNAL_SENT:
        return ERROR_NO_SIGNAL_SENT_STR;
    case WinError::ERROR_FILENAME_EXCED_RANGE:
        return ERROR_FILENAME_EXCED_RANGE_STR;
    case WinError::ERROR_RING2_STACK_IN_USE:
        return ERROR_RING2_STACK_IN_USE_STR;
    case WinError::ERROR_META_EXPANSION_TOO_LONG:
        return ERROR_META_EXPANSION_TOO_LONG_STR;
    case WinError::ERROR_INVALID_SIGNAL_NUMBER:
        return ERROR_INVALID_SIGNAL_NUMBER_STR;
    case WinError::ERROR_THREAD_1_INACTIVE:
        return ERROR_THREAD_1_INACTIVE_STR;
    case WinError::ERROR_LOCKED:
        return ERROR_LOCKED_STR;
    case WinError::ERROR_TOO_MANY_MODULES:
        return ERROR_TOO_MANY_MODULES_STR;
    case WinError::ERROR_NESTING_NOT_ALLOWED:
        return ERROR_NESTING_NOT_ALLOWED_STR;
    case WinError::ERROR_EXE_MACHINE_TYPE_MISMATCH:
        return ERROR_EXE_MACHINE_TYPE_MISMATCH_STR;
    case WinError::ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY:
        return ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY_STR;
    case WinError::ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY:
        return ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY_STR;
    case WinError::ERROR_FILE_CHECKED_OUT:
        return ERROR_FILE_CHECKED_OUT_STR;
    case WinError::ERROR_CHECKOUT_REQUIRED:
        return ERROR_CHECKOUT_REQUIRED_STR;
    case WinError::ERROR_BAD_FILE_TYPE:
        return ERROR_BAD_FILE_TYPE_STR;
    case WinError::ERROR_FILE_TOO_LARGE:
        return ERROR_FILE_TOO_LARGE_STR;
    case WinError::ERROR_FORMS_AUTH_REQUIRED:
        return ERROR_FORMS_AUTH_REQUIRED_STR;
    case WinError::ERROR_VIRUS_INFECTED:
        return ERROR_VIRUS_INFECTED_STR;
    case WinError::ERROR_VIRUS_DELETED:
        return ERROR_VIRUS_DELETED_STR;
    case WinError::ERROR_PIPE_LOCAL:
        return ERROR_PIPE_LOCAL_STR;
    case WinError::ERROR_BAD_PIPE:
        return ERROR_BAD_PIPE_STR;
    case WinError::ERROR_PIPE_BUSY:
        return ERROR_PIPE_BUSY_STR;
    case WinError::ERROR_NO_DATA:
        return ERROR_NO_DATA_STR;
    case WinError::ERROR_PIPE_NOT_CONNECTED:
        return ERROR_PIPE_NOT_CONNECTED_STR;
    case WinError::ERROR_MORE_DATA:
        return ERROR_MORE_DATA_STR;
    case WinError::ERROR_NO_WORK_DONE:
        return ERROR_NO_WORK_DONE_STR;
    case WinError::ERROR_VC_DISCONNECTED:
        return ERROR_VC_DISCONNECTED_STR;
    case WinError::ERROR_INVALID_EA_NAME:
        return ERROR_INVALID_EA_NAME_STR;
    case WinError::ERROR_EA_LIST_INCONSISTENT:
        return ERROR_EA_LIST_INCONSISTENT_STR;
    case WinError::WAIT_TIMEOUT:
        return WAIT_TIMEOUT_STR;
    case WinError::ERROR_NO_MORE_ITEMS:
        return ERROR_NO_MORE_ITEMS_STR;
    case WinError::ERROR_CANNOT_COPY:
        return ERROR_CANNOT_COPY_STR;
    case WinError::ERROR_DIRECTORY:
        return ERROR_DIRECTORY_STR;
    case WinError::ERROR_EAS_DIDNT_FIT:
        return ERROR_EAS_DIDNT_FIT_STR;
    case WinError::ERROR_EA_FILE_CORRUPT:
        return ERROR_EA_FILE_CORRUPT_STR;
    case WinError::ERROR_EA_TABLE_FULL:
        return ERROR_EA_TABLE_FULL_STR;
    case WinError::ERROR_INVALID_EA_HANDLE:
        return ERROR_INVALID_EA_HANDLE_STR;
    case WinError::ERROR_EAS_NOT_SUPPORTED:
        return ERROR_EAS_NOT_SUPPORTED_STR;
    case WinError::ERROR_NOT_OWNER:
        return ERROR_NOT_OWNER_STR;
    case WinError::ERROR_TOO_MANY_POSTS:
        return ERROR_TOO_MANY_POSTS_STR;
    case WinError::ERROR_PARTIAL_COPY:
        return ERROR_PARTIAL_COPY_STR;
    case WinError::ERROR_OPLOCK_NOT_GRANTED:
        return ERROR_OPLOCK_NOT_GRANTED_STR;
    case WinError::ERROR_INVALID_OPLOCK_PROTOCOL:
        return ERROR_INVALID_OPLOCK_PROTOCOL_STR;
    case WinError::ERROR_DISK_TOO_FRAGMENTED:
        return ERROR_DISK_TOO_FRAGMENTED_STR;
    case WinError::ERROR_DELETE_PENDING:
        return ERROR_DELETE_PENDING_STR;
    case WinError::ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING:
        return ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING_STR;
    case WinError::ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME:
        return ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME_STR;
    case WinError::ERROR_SECURITY_STREAM_IS_INCONSISTENT:
        return ERROR_SECURITY_STREAM_IS_INCONSISTENT_STR;
    case WinError::ERROR_INVALID_LOCK_RANGE:
        return ERROR_INVALID_LOCK_RANGE_STR;
    case WinError::ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT:
        return ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT_STR;
    case WinError::ERROR_NOTIFICATION_GUID_ALREADY_DEFINED:
        return ERROR_NOTIFICATION_GUID_ALREADY_DEFINED_STR;
    case WinError::ERROR_INVALID_EXCEPTION_HANDLER:
        return ERROR_INVALID_EXCEPTION_HANDLER_STR;
    case WinError::ERROR_DUPLICATE_PRIVILEGES:
        return ERROR_DUPLICATE_PRIVILEGES_STR;
    case WinError::ERROR_NO_RANGES_PROCESSED:
        return ERROR_NO_RANGES_PROCESSED_STR;
    case WinError::ERROR_NOT_ALLOWED_ON_SYSTEM_FILE:
        return ERROR_NOT_ALLOWED_ON_SYSTEM_FILE_STR;
    case WinError::ERROR_DISK_RESOURCES_EXHAUSTED:
        return ERROR_DISK_RESOURCES_EXHAUSTED_STR;
    case WinError::ERROR_INVALID_TOKEN:
        return ERROR_INVALID_TOKEN_STR;
    case WinError::ERROR_DEVICE_FEATURE_NOT_SUPPORTED:
        return ERROR_DEVICE_FEATURE_NOT_SUPPORTED_STR;
    case WinError::ERROR_MR_MID_NOT_FOUND:
        return ERROR_MR_MID_NOT_FOUND_STR;
    case WinError::ERROR_SCOPE_NOT_FOUND:
        return ERROR_SCOPE_NOT_FOUND_STR;
    case WinError::ERROR_UNDEFINED_SCOPE:
        return ERROR_UNDEFINED_SCOPE_STR;
    case WinError::ERROR_INVALID_CAP:
        return ERROR_INVALID_CAP_STR;
    case WinError::ERROR_DEVICE_UNREACHABLE:
        return ERROR_DEVICE_UNREACHABLE_STR;
    case WinError::ERROR_DEVICE_NO_RESOURCES:
        return ERROR_DEVICE_NO_RESOURCES_STR;
    case WinError::ERROR_DATA_CHECKSUM_ERROR:
        return ERROR_DATA_CHECKSUM_ERROR_STR;
    case WinError::ERROR_INTERMIXED_KERNEL_EA_OPERATION:
        return ERROR_INTERMIXED_KERNEL_EA_OPERATION_STR;
    case WinError::ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED:
        return ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED_STR;
    case WinError::ERROR_OFFSET_ALIGNMENT_VIOLATION:
        return ERROR_OFFSET_ALIGNMENT_VIOLATION_STR;
    case WinError::ERROR_INVALID_FIELD_IN_PARAMETER_LIST:
        return ERROR_INVALID_FIELD_IN_PARAMETER_LIST_STR;
    case WinError::ERROR_OPERATION_IN_PROGRESS:
        return ERROR_OPERATION_IN_PROGRESS_STR;
    case WinError::ERROR_BAD_DEVICE_PATH:
        return ERROR_BAD_DEVICE_PATH_STR;
    case WinError::ERROR_TOO_MANY_DESCRIPTORS:
        return ERROR_TOO_MANY_DESCRIPTORS_STR;
    case WinError::ERROR_SCRUB_DATA_DISABLED:
        return ERROR_SCRUB_DATA_DISABLED_STR;
    case WinError::ERROR_NOT_REDUNDANT_STORAGE:
        return ERROR_NOT_REDUNDANT_STORAGE_STR;
    case WinError::ERROR_RESIDENT_FILE_NOT_SUPPORTED:
        return ERROR_RESIDENT_FILE_NOT_SUPPORTED_STR;
    case WinError::ERROR_COMPRESSED_FILE_NOT_SUPPORTED:
        return ERROR_COMPRESSED_FILE_NOT_SUPPORTED_STR;
    case WinError::ERROR_DIRECTORY_NOT_SUPPORTED:
        return ERROR_DIRECTORY_NOT_SUPPORTED_STR;
    case WinError::ERROR_NOT_READ_FROM_COPY:
        return ERROR_NOT_READ_FROM_COPY_STR;
    case WinError::ERROR_FT_WRITE_FAILURE:
        return ERROR_FT_WRITE_FAILURE_STR;
    case WinError::ERROR_FT_DI_SCAN_REQUIRED:
        return ERROR_FT_DI_SCAN_REQUIRED_STR;
    case WinError::ERROR_INVALID_KERNEL_INFO_VERSION:
        return ERROR_INVALID_KERNEL_INFO_VERSION_STR;
    case WinError::ERROR_INVALID_PEP_INFO_VERSION:
        return ERROR_INVALID_PEP_INFO_VERSION_STR;
    case WinError::ERROR_FAIL_NOACTION_REBOOT:
        return ERROR_FAIL_NOACTION_REBOOT_STR;
    case WinError::ERROR_FAIL_SHUTDOWN:
        return ERROR_FAIL_SHUTDOWN_STR;
    case WinError::ERROR_FAIL_RESTART:
        return ERROR_FAIL_RESTART_STR;
    case WinError::ERROR_MAX_SESSIONS_REACHED:
        return ERROR_MAX_SESSIONS_REACHED_STR;
    case WinError::ERROR_INVALID_ADDRESS:
        return ERROR_INVALID_ADDRESS_STR;
    case WinError::ERROR_USER_PROFILE_LOAD:
        return ERROR_USER_PROFILE_LOAD_STR;
    case WinError::ERROR_ARITHMETIC_OVERFLOW:
        return ERROR_ARITHMETIC_OVERFLOW_STR;
    case WinError::ERROR_PIPE_CONNECTED:
        return ERROR_PIPE_CONNECTED_STR;
    case WinError::ERROR_PIPE_LISTENING:
        return ERROR_PIPE_LISTENING_STR;
    case WinError::ERROR_INVALID_LDT_SIZE:
        return ERROR_INVALID_LDT_SIZE_STR;
    case WinError::ERROR_INVALID_LDT_OFFSET:
        return ERROR_INVALID_LDT_OFFSET_STR;
    case WinError::ERROR_INVALID_LDT_DESCRIPTOR:
        return ERROR_INVALID_LDT_DESCRIPTOR_STR;
    case WinError::ERROR_TOO_MANY_THREADS:
        return ERROR_TOO_MANY_THREADS_STR;
    case WinError::ERROR_THREAD_NOT_IN_PROCESS:
        return ERROR_THREAD_NOT_IN_PROCESS_STR;
    case WinError::ERROR_PAGEFILE_QUOTA_EXCEEDED:
        return ERROR_PAGEFILE_QUOTA_EXCEEDED_STR;
    case WinError::ERROR_LOGON_SERVER_CONFLICT:
        return ERROR_LOGON_SERVER_CONFLICT_STR;
    case WinError::ERROR_SYNCHRONIZATION_REQUIRED:
        return ERROR_SYNCHRONIZATION_REQUIRED_STR;
    case WinError::ERROR_NET_OPEN_FAILED:
        return ERROR_NET_OPEN_FAILED_STR;
    case WinError::ERROR_IO_PRIVILEGE_FAILED:
        return ERROR_IO_PRIVILEGE_FAILED_STR;
    case WinError::ERROR_CONTROL_C_EXIT:
        return ERROR_CONTROL_C_EXIT_STR;
    case WinError::ERROR_MISSING_SYSTEMFILE:
        return ERROR_MISSING_SYSTEMFILE_STR;
    case WinError::ERROR_UNHANDLED_EXCEPTION:
        return ERROR_UNHANDLED_EXCEPTION_STR;
    case WinError::ERROR_APP_INIT_FAILURE:
        return ERROR_APP_INIT_FAILURE_STR;
    case WinError::ERROR_PAGEFILE_CREATE_FAILED:
        return ERROR_PAGEFILE_CREATE_FAILED_STR;
    case WinError::ERROR_INVALID_IMAGE_HASH:
        return ERROR_INVALID_IMAGE_HASH_STR;
    case WinError::ERROR_NO_PAGEFILE:
        return ERROR_NO_PAGEFILE_STR;
    case WinError::ERROR_ILLEGAL_FLOAT_CONTEXT:
        return ERROR_ILLEGAL_FLOAT_CONTEXT_STR;
    case WinError::ERROR_NO_EVENT_PAIR:
        return ERROR_NO_EVENT_PAIR_STR;
    case WinError::ERROR_DOMAIN_CTRLR_CONFIG_ERROR:
        return ERROR_DOMAIN_CTRLR_CONFIG_ERROR_STR;
    case WinError::ERROR_ILLEGAL_CHARACTER:
        return ERROR_ILLEGAL_CHARACTER_STR;
    case WinError::ERROR_UNDEFINED_CHARACTER:
        return ERROR_UNDEFINED_CHARACTER_STR;
    case WinError::ERROR_FLOPPY_VOLUME:
        return ERROR_FLOPPY_VOLUME_STR;
    case WinError::ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT:
        return ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT_STR;
    case WinError::ERROR_BACKUP_CONTROLLER:
        return ERROR_BACKUP_CONTROLLER_STR;
    case WinError::ERROR_MUTANT_LIMIT_EXCEEDED:
        return ERROR_MUTANT_LIMIT_EXCEEDED_STR;
    case WinError::ERROR_FS_DRIVER_REQUIRED:
        return ERROR_FS_DRIVER_REQUIRED_STR;
    case WinError::ERROR_CANNOT_LOAD_REGISTRY_FILE:
        return ERROR_CANNOT_LOAD_REGISTRY_FILE_STR;
    case WinError::ERROR_DEBUG_ATTACH_FAILED:
        return ERROR_DEBUG_ATTACH_FAILED_STR;
    case WinError::ERROR_SYSTEM_PROCESS_TERMINATED:
        return ERROR_SYSTEM_PROCESS_TERMINATED_STR;
    case WinError::ERROR_DATA_NOT_ACCEPTED:
        return ERROR_DATA_NOT_ACCEPTED_STR;
    case WinError::ERROR_VDM_HARD_ERROR:
        return ERROR_VDM_HARD_ERROR_STR;
    case WinError::ERROR_DRIVER_CANCEL_TIMEOUT:
        return ERROR_DRIVER_CANCEL_TIMEOUT_STR;
    case WinError::ERROR_REPLY_MESSAGE_MISMATCH:
        return ERROR_REPLY_MESSAGE_MISMATCH_STR;
    case WinError::ERROR_LOST_WRITEBEHIND_DATA:
        return ERROR_LOST_WRITEBEHIND_DATA_STR;
    case WinError::ERROR_CLIENT_SERVER_PARAMETERS_INVALID:
        return ERROR_CLIENT_SERVER_PARAMETERS_INVALID_STR;
    case WinError::ERROR_NOT_TINY_STREAM:
        return ERROR_NOT_TINY_STREAM_STR;
    case WinError::ERROR_STACK_OVERFLOW_READ:
        return ERROR_STACK_OVERFLOW_READ_STR;
    case WinError::ERROR_CONVERT_TO_LARGE:
        return ERROR_CONVERT_TO_LARGE_STR;
    case WinError::ERROR_FOUND_OUT_OF_SCOPE:
        return ERROR_FOUND_OUT_OF_SCOPE_STR;
    case WinError::ERROR_ALLOCATE_BUCKET:
        return ERROR_ALLOCATE_BUCKET_STR;
    case WinError::ERROR_MARSHALL_OVERFLOW:
        return ERROR_MARSHALL_OVERFLOW_STR;
    case WinError::ERROR_INVALID_VARIANT:
        return ERROR_INVALID_VARIANT_STR;
    case WinError::ERROR_BAD_COMPRESSION_BUFFER:
        return ERROR_BAD_COMPRESSION_BUFFER_STR;
    case WinError::ERROR_AUDIT_FAILED:
        return ERROR_AUDIT_FAILED_STR;
    case WinError::ERROR_TIMER_RESOLUTION_NOT_SET:
        return ERROR_TIMER_RESOLUTION_NOT_SET_STR;
    case WinError::ERROR_INSUFFICIENT_LOGON_INFO:
        return ERROR_INSUFFICIENT_LOGON_INFO_STR;
    case WinError::ERROR_BAD_DLL_ENTRYPOINT:
        return ERROR_BAD_DLL_ENTRYPOINT_STR;
    case WinError::ERROR_BAD_SERVICE_ENTRYPOINT:
        return ERROR_BAD_SERVICE_ENTRYPOINT_STR;
    case WinError::ERROR_IP_ADDRESS_CONFLICT1:
        return ERROR_IP_ADDRESS_CONFLICT1_STR;
    case WinError::ERROR_IP_ADDRESS_CONFLICT2:
        return ERROR_IP_ADDRESS_CONFLICT2_STR;
    case WinError::ERROR_REGISTRY_QUOTA_LIMIT:
        return ERROR_REGISTRY_QUOTA_LIMIT_STR;
    case WinError::ERROR_NO_CALLBACK_ACTIVE:
        return ERROR_NO_CALLBACK_ACTIVE_STR;
    case WinError::ERROR_PWD_TOO_SHORT:
        return ERROR_PWD_TOO_SHORT_STR;
    case WinError::ERROR_PWD_TOO_RECENT:
        return ERROR_PWD_TOO_RECENT_STR;
    case WinError::ERROR_PWD_HISTORY_CONFLICT:
        return ERROR_PWD_HISTORY_CONFLICT_STR;
    case WinError::ERROR_UNSUPPORTED_COMPRESSION:
        return ERROR_UNSUPPORTED_COMPRESSION_STR;
    case WinError::ERROR_INVALID_HW_PROFILE:
        return ERROR_INVALID_HW_PROFILE_STR;
    case WinError::ERROR_INVALID_PLUGPLAY_DEVICE_PATH:
        return ERROR_INVALID_PLUGPLAY_DEVICE_PATH_STR;
    case WinError::ERROR_QUOTA_LIST_INCONSISTENT:
        return ERROR_QUOTA_LIST_INCONSISTENT_STR;
    case WinError::ERROR_EVALUATION_EXPIRATION:
        return ERROR_EVALUATION_EXPIRATION_STR;
    case WinError::ERROR_ILLEGAL_DLL_RELOCATION:
        return ERROR_ILLEGAL_DLL_RELOCATION_STR;
    case WinError::ERROR_DLL_INIT_FAILED_LOGOFF:
        return ERROR_DLL_INIT_FAILED_LOGOFF_STR;
    case WinError::ERROR_VALIDATE_CONTINUE:
        return ERROR_VALIDATE_CONTINUE_STR;
    case WinError::ERROR_NO_MORE_MATCHES:
        return ERROR_NO_MORE_MATCHES_STR;
    case WinError::ERROR_RANGE_LIST_CONFLICT:
        return ERROR_RANGE_LIST_CONFLICT_STR;
    case WinError::ERROR_SERVER_SID_MISMATCH:
        return ERROR_SERVER_SID_MISMATCH_STR;
    case WinError::ERROR_CANT_ENABLE_DENY_ONLY:
        return ERROR_CANT_ENABLE_DENY_ONLY_STR;
    case WinError::ERROR_FLOAT_MULTIPLE_FAULTS:
        return ERROR_FLOAT_MULTIPLE_FAULTS_STR;
    case WinError::ERROR_FLOAT_MULTIPLE_TRAPS:
        return ERROR_FLOAT_MULTIPLE_TRAPS_STR;
    case WinError::ERROR_NOINTERFACE:
        return ERROR_NOINTERFACE_STR;
    case WinError::ERROR_DRIVER_FAILED_SLEEP:
        return ERROR_DRIVER_FAILED_SLEEP_STR;
    case WinError::ERROR_CORRUPT_SYSTEM_FILE:
        return ERROR_CORRUPT_SYSTEM_FILE_STR;
    case WinError::ERROR_COMMITMENT_MINIMUM:
        return ERROR_COMMITMENT_MINIMUM_STR;
    case WinError::ERROR_PNP_RESTART_ENUMERATION:
        return ERROR_PNP_RESTART_ENUMERATION_STR;
    case WinError::ERROR_SYSTEM_IMAGE_BAD_SIGNATURE:
        return ERROR_SYSTEM_IMAGE_BAD_SIGNATURE_STR;
    case WinError::ERROR_PNP_REBOOT_REQUIRED:
        return ERROR_PNP_REBOOT_REQUIRED_STR;
    case WinError::ERROR_INSUFFICIENT_POWER:
        return ERROR_INSUFFICIENT_POWER_STR;
    case WinError::ERROR_MULTIPLE_FAULT_VIOLATION:
        return ERROR_MULTIPLE_FAULT_VIOLATION_STR;
    case WinError::ERROR_SYSTEM_SHUTDOWN:
        return ERROR_SYSTEM_SHUTDOWN_STR;
    case WinError::ERROR_PORT_NOT_SET:
        return ERROR_PORT_NOT_SET_STR;
    case WinError::ERROR_DS_VERSION_CHECK_FAILURE:
        return ERROR_DS_VERSION_CHECK_FAILURE_STR;
    case WinError::ERROR_RANGE_NOT_FOUND:
        return ERROR_RANGE_NOT_FOUND_STR;
    case WinError::ERROR_NOT_SAFE_MODE_DRIVER:
        return ERROR_NOT_SAFE_MODE_DRIVER_STR;
    case WinError::ERROR_FAILED_DRIVER_ENTRY:
        return ERROR_FAILED_DRIVER_ENTRY_STR;
    case WinError::ERROR_DEVICE_ENUMERATION_ERROR:
        return ERROR_DEVICE_ENUMERATION_ERROR_STR;
    case WinError::ERROR_MOUNT_POINT_NOT_RESOLVED:
        return ERROR_MOUNT_POINT_NOT_RESOLVED_STR;
    case WinError::ERROR_INVALID_DEVICE_OBJECT_PARAMETER:
        return ERROR_INVALID_DEVICE_OBJECT_PARAMETER_STR;
    case WinError::ERROR_MCA_OCCURED:
        return ERROR_MCA_OCCURED_STR;
    case WinError::ERROR_DRIVER_DATABASE_ERROR:
        return ERROR_DRIVER_DATABASE_ERROR_STR;
    case WinError::ERROR_SYSTEM_HIVE_TOO_LARGE:
        return ERROR_SYSTEM_HIVE_TOO_LARGE_STR;
    case WinError::ERROR_DRIVER_FAILED_PRIOR_UNLOAD:
        return ERROR_DRIVER_FAILED_PRIOR_UNLOAD_STR;
    case WinError::ERROR_VOLSNAP_PREPARE_HIBERNATE:
        return ERROR_VOLSNAP_PREPARE_HIBERNATE_STR;
    case WinError::ERROR_HIBERNATION_FAILURE:
        return ERROR_HIBERNATION_FAILURE_STR;
    case WinError::ERROR_FILE_SYSTEM_LIMITATION:
        return ERROR_FILE_SYSTEM_LIMITATION_STR;
    case WinError::ERROR_ASSERTION_FAILURE:
        return ERROR_ASSERTION_FAILURE_STR;
    case WinError::ERROR_ACPI_ERROR:
        return ERROR_ACPI_ERROR_STR;
    case WinError::ERROR_WOW_ASSERTION:
        return ERROR_WOW_ASSERTION_STR;
    case WinError::ERROR_PNP_BAD_MPS_TABLE:
        return ERROR_PNP_BAD_MPS_TABLE_STR;
    case WinError::ERROR_PNP_TRANSLATION_FAILED:
        return ERROR_PNP_TRANSLATION_FAILED_STR;
    case WinError::ERROR_PNP_IRQ_TRANSLATION_FAILED:
        return ERROR_PNP_IRQ_TRANSLATION_FAILED_STR;
    case WinError::ERROR_PNP_INVALID_ID:
        return ERROR_PNP_INVALID_ID_STR;
    case WinError::ERROR_WAKE_SYSTEM_DEBUGGER:
        return ERROR_WAKE_SYSTEM_DEBUGGER_STR;
    case WinError::ERROR_HANDLES_CLOSED:
        return ERROR_HANDLES_CLOSED_STR;
    case WinError::ERROR_EXTRANEOUS_INFORMATION:
        return ERROR_EXTRANEOUS_INFORMATION_STR;
    case WinError::ERROR_RXACT_COMMIT_NECESSARY:
        return ERROR_RXACT_COMMIT_NECESSARY_STR;
    case WinError::ERROR_MEDIA_CHECK:
        return ERROR_MEDIA_CHECK_STR;
    case WinError::ERROR_GUID_SUBSTITUTION_MADE:
        return ERROR_GUID_SUBSTITUTION_MADE_STR;
    case WinError::ERROR_STOPPED_ON_SYMLINK:
        return ERROR_STOPPED_ON_SYMLINK_STR;
    case WinError::ERROR_LONGJUMP:
        return ERROR_LONGJUMP_STR;
    case WinError::ERROR_PLUGPLAY_QUERY_VETOED:
        return ERROR_PLUGPLAY_QUERY_VETOED_STR;
    case WinError::ERROR_UNWIND_CONSOLIDATE:
        return ERROR_UNWIND_CONSOLIDATE_STR;
    case WinError::ERROR_REGISTRY_HIVE_RECOVERED:
        return ERROR_REGISTRY_HIVE_RECOVERED_STR;
    case WinError::ERROR_DLL_MIGHT_BE_INSECURE:
        return ERROR_DLL_MIGHT_BE_INSECURE_STR;
    case WinError::ERROR_DLL_MIGHT_BE_INCOMPATIBLE:
        return ERROR_DLL_MIGHT_BE_INCOMPATIBLE_STR;
    case WinError::ERROR_DBG_EXCEPTION_NOT_HANDLED:
        return ERROR_DBG_EXCEPTION_NOT_HANDLED_STR;
    case WinError::ERROR_DBG_REPLY_LATER:
        return ERROR_DBG_REPLY_LATER_STR;
    case WinError::ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE:
        return ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE_STR;
    case WinError::ERROR_DBG_TERMINATE_THREAD:
        return ERROR_DBG_TERMINATE_THREAD_STR;
    case WinError::ERROR_DBG_TERMINATE_PROCESS:
        return ERROR_DBG_TERMINATE_PROCESS_STR;
    case WinError::ERROR_DBG_CONTROL_C:
        return ERROR_DBG_CONTROL_C_STR;
    case WinError::ERROR_DBG_PRINTEXCEPTION_C:
        return ERROR_DBG_PRINTEXCEPTION_C_STR;
    case WinError::ERROR_DBG_RIPEXCEPTION:
        return ERROR_DBG_RIPEXCEPTION_STR;
    case WinError::ERROR_DBG_CONTROL_BREAK:
        return ERROR_DBG_CONTROL_BREAK_STR;
    case WinError::ERROR_DBG_COMMAND_EXCEPTION:
        return ERROR_DBG_COMMAND_EXCEPTION_STR;
    case WinError::ERROR_OBJECT_NAME_EXISTS:
        return ERROR_OBJECT_NAME_EXISTS_STR;
    case WinError::ERROR_THREAD_WAS_SUSPENDED:
        return ERROR_THREAD_WAS_SUSPENDED_STR;
    case WinError::ERROR_IMAGE_NOT_AT_BASE:
        return ERROR_IMAGE_NOT_AT_BASE_STR;
    case WinError::ERROR_RXACT_STATE_CREATED:
        return ERROR_RXACT_STATE_CREATED_STR;
    case WinError::ERROR_SEGMENT_NOTIFICATION:
        return ERROR_SEGMENT_NOTIFICATION_STR;
    case WinError::ERROR_BAD_CURRENT_DIRECTORY:
        return ERROR_BAD_CURRENT_DIRECTORY_STR;
    case WinError::ERROR_FT_READ_RECOVERY_FROM_BACKUP:
        return ERROR_FT_READ_RECOVERY_FROM_BACKUP_STR;
    case WinError::ERROR_FT_WRITE_RECOVERY:
        return ERROR_FT_WRITE_RECOVERY_STR;
    case WinError::ERROR_IMAGE_MACHINE_TYPE_MISMATCH:
        return ERROR_IMAGE_MACHINE_TYPE_MISMATCH_STR;
    case WinError::ERROR_RECEIVE_PARTIAL:
        return ERROR_RECEIVE_PARTIAL_STR;
    case WinError::ERROR_RECEIVE_EXPEDITED:
        return ERROR_RECEIVE_EXPEDITED_STR;
    case WinError::ERROR_RECEIVE_PARTIAL_EXPEDITED:
        return ERROR_RECEIVE_PARTIAL_EXPEDITED_STR;
    case WinError::ERROR_EVENT_DONE:
        return ERROR_EVENT_DONE_STR;
    case WinError::ERROR_EVENT_PENDING:
        return ERROR_EVENT_PENDING_STR;
    case WinError::ERROR_CHECKING_FILE_SYSTEM:
        return ERROR_CHECKING_FILE_SYSTEM_STR;
    case WinError::ERROR_FATAL_APP_EXIT:
        return ERROR_FATAL_APP_EXIT_STR;
    case WinError::ERROR_PREDEFINED_HANDLE:
        return ERROR_PREDEFINED_HANDLE_STR;
    case WinError::ERROR_WAS_UNLOCKED:
        return ERROR_WAS_UNLOCKED_STR;
    case WinError::ERROR_SERVICE_NOTIFICATION:
        return ERROR_SERVICE_NOTIFICATION_STR;
    case WinError::ERROR_WAS_LOCKED:
        return ERROR_WAS_LOCKED_STR;
    case WinError::ERROR_LOG_HARD_ERROR:
        return ERROR_LOG_HARD_ERROR_STR;
    case WinError::ERROR_ALREADY_WIN32:
        return ERROR_ALREADY_WIN32_STR;
    case WinError::ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE:
        return ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE_STR;
    case WinError::ERROR_NO_YIELD_PERFORMED:
        return ERROR_NO_YIELD_PERFORMED_STR;
    case WinError::ERROR_TIMER_RESUME_IGNORED:
        return ERROR_TIMER_RESUME_IGNORED_STR;
    case WinError::ERROR_ARBITRATION_UNHANDLED:
        return ERROR_ARBITRATION_UNHANDLED_STR;
    case WinError::ERROR_CARDBUS_NOT_SUPPORTED:
        return ERROR_CARDBUS_NOT_SUPPORTED_STR;
    case WinError::ERROR_MP_PROCESSOR_MISMATCH:
        return ERROR_MP_PROCESSOR_MISMATCH_STR;
    case WinError::ERROR_HIBERNATED:
        return ERROR_HIBERNATED_STR;
    case WinError::ERROR_RESUME_HIBERNATION:
        return ERROR_RESUME_HIBERNATION_STR;
    case WinError::ERROR_FIRMWARE_UPDATED:
        return ERROR_FIRMWARE_UPDATED_STR;
    case WinError::ERROR_DRIVERS_LEAKING_LOCKED_PAGES:
        return ERROR_DRIVERS_LEAKING_LOCKED_PAGES_STR;
    case WinError::ERROR_WAKE_SYSTEM:
        return ERROR_WAKE_SYSTEM_STR;
    case WinError::ERROR_WAIT_1:
        return ERROR_WAIT_1_STR;
    case WinError::ERROR_WAIT_2:
        return ERROR_WAIT_2_STR;
    case WinError::ERROR_WAIT_3:
        return ERROR_WAIT_3_STR;
    case WinError::ERROR_WAIT_63:
        return ERROR_WAIT_63_STR;
    case WinError::ERROR_ABANDONED_WAIT_0:
        return ERROR_ABANDONED_WAIT_0_STR;
    case WinError::ERROR_ABANDONED_WAIT_63:
        return ERROR_ABANDONED_WAIT_63_STR;
    case WinError::ERROR_USER_APC:
        return ERROR_USER_APC_STR;
    case WinError::ERROR_KERNEL_APC:
        return ERROR_KERNEL_APC_STR;
    case WinError::ERROR_ALERTED:
        return ERROR_ALERTED_STR;
    case WinError::ERROR_ELEVATION_REQUIRED:
        return ERROR_ELEVATION_REQUIRED_STR;
    case WinError::ERROR_REPARSE:
        return ERROR_REPARSE_STR;
    case WinError::ERROR_OPLOCK_BREAK_IN_PROGRESS:
        return ERROR_OPLOCK_BREAK_IN_PROGRESS_STR;
    case WinError::ERROR_VOLUME_MOUNTED:
        return ERROR_VOLUME_MOUNTED_STR;
    case WinError::ERROR_RXACT_COMMITTED:
        return ERROR_RXACT_COMMITTED_STR;
    case WinError::ERROR_NOTIFY_CLEANUP:
        return ERROR_NOTIFY_CLEANUP_STR;
    case WinError::ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED:
        return ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED_STR;
    case WinError::ERROR_PAGE_FAULT_TRANSITION:
        return ERROR_PAGE_FAULT_TRANSITION_STR;
    case WinError::ERROR_PAGE_FAULT_DEMAND_ZERO:
        return ERROR_PAGE_FAULT_DEMAND_ZERO_STR;
    case WinError::ERROR_PAGE_FAULT_COPY_ON_WRITE:
        return ERROR_PAGE_FAULT_COPY_ON_WRITE_STR;
    case WinError::ERROR_PAGE_FAULT_GUARD_PAGE:
        return ERROR_PAGE_FAULT_GUARD_PAGE_STR;
    case WinError::ERROR_PAGE_FAULT_PAGING_FILE:
        return ERROR_PAGE_FAULT_PAGING_FILE_STR;
    case WinError::ERROR_CACHE_PAGE_LOCKED:
        return ERROR_CACHE_PAGE_LOCKED_STR;
    case WinError::ERROR_CRASH_DUMP:
        return ERROR_CRASH_DUMP_STR;
    case WinError::ERROR_BUFFER_ALL_ZEROS:
        return ERROR_BUFFER_ALL_ZEROS_STR;
    case WinError::ERROR_REPARSE_OBJECT:
        return ERROR_REPARSE_OBJECT_STR;
    case WinError::ERROR_RESOURCE_REQUIREMENTS_CHANGED:
        return ERROR_RESOURCE_REQUIREMENTS_CHANGED_STR;
    case WinError::ERROR_TRANSLATION_COMPLETE:
        return ERROR_TRANSLATION_COMPLETE_STR;
    case WinError::ERROR_NOTHING_TO_TERMINATE:
        return ERROR_NOTHING_TO_TERMINATE_STR;
    case WinError::ERROR_PROCESS_NOT_IN_JOB:
        return ERROR_PROCESS_NOT_IN_JOB_STR;
    case WinError::ERROR_PROCESS_IN_JOB:
        return ERROR_PROCESS_IN_JOB_STR;
    case WinError::ERROR_VOLSNAP_HIBERNATE_READY:
        return ERROR_VOLSNAP_HIBERNATE_READY_STR;
    case WinError::ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY:
        return ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY_STR;
    case WinError::ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED:
        return ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED_STR;
    case WinError::ERROR_INTERRUPT_STILL_CONNECTED:
        return ERROR_INTERRUPT_STILL_CONNECTED_STR;
    case WinError::ERROR_WAIT_FOR_OPLOCK:
        return ERROR_WAIT_FOR_OPLOCK_STR;
    case WinError::ERROR_DBG_EXCEPTION_HANDLED:
        return ERROR_DBG_EXCEPTION_HANDLED_STR;
    case WinError::ERROR_DBG_CONTINUE:
        return ERROR_DBG_CONTINUE_STR;
    case WinError::ERROR_CALLBACK_POP_STACK:
        return ERROR_CALLBACK_POP_STACK_STR;
    case WinError::ERROR_COMPRESSION_DISABLED:
        return ERROR_COMPRESSION_DISABLED_STR;
    case WinError::ERROR_CANTFETCHBACKWARDS:
        return ERROR_CANTFETCHBACKWARDS_STR;
    case WinError::ERROR_CANTSCROLLBACKWARDS:
        return ERROR_CANTSCROLLBACKWARDS_STR;
    case WinError::ERROR_ROWSNOTRELEASED:
        return ERROR_ROWSNOTRELEASED_STR;
    case WinError::ERROR_BAD_ACCESSOR_FLAGS:
        return ERROR_BAD_ACCESSOR_FLAGS_STR;
    case WinError::ERROR_ERRORS_ENCOUNTERED:
        return ERROR_ERRORS_ENCOUNTERED_STR;
    case WinError::ERROR_NOT_CAPABLE:
        return ERROR_NOT_CAPABLE_STR;
    case WinError::ERROR_REQUEST_OUT_OF_SEQUENCE:
        return ERROR_REQUEST_OUT_OF_SEQUENCE_STR;
    case WinError::ERROR_VERSION_PARSE_ERROR:
        return ERROR_VERSION_PARSE_ERROR_STR;
    case WinError::ERROR_BADSTARTPOSITION:
        return ERROR_BADSTARTPOSITION_STR;
    case WinError::ERROR_MEMORY_HARDWARE:
        return ERROR_MEMORY_HARDWARE_STR;
    case WinError::ERROR_DISK_REPAIR_DISABLED:
        return ERROR_DISK_REPAIR_DISABLED_STR;
    case WinError::ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE:
        return ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE_STR;
    case WinError::ERROR_SYSTEM_POWERSTATE_TRANSITION:
        return ERROR_SYSTEM_POWERSTATE_TRANSITION_STR;
    case WinError::ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION:
        return ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION_STR;
    case WinError::ERROR_MCA_EXCEPTION:
        return ERROR_MCA_EXCEPTION_STR;
    case WinError::ERROR_ACCESS_AUDIT_BY_POLICY:
        return ERROR_ACCESS_AUDIT_BY_POLICY_STR;
    case WinError::ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY:
        return ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY_STR;
    case WinError::ERROR_ABANDON_HIBERFILE:
        return ERROR_ABANDON_HIBERFILE_STR;
    case WinError::ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED:
        return ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED_STR;
    case WinError::ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR:
        return ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR_STR;
    case WinError::ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR:
        return ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR_STR;
    case WinError::ERROR_NO_ACE_CONDITION:
        return ERROR_NO_ACE_CONDITION_STR;
    case WinError::ERROR_INVALID_ACE_CONDITION:
        return ERROR_INVALID_ACE_CONDITION_STR;
    case WinError::ERROR_EA_ACCESS_DENIED:
        return ERROR_EA_ACCESS_DENIED_STR;
    case WinError::ERROR_OPERATION_ABORTED:
        return ERROR_OPERATION_ABORTED_STR;
    case WinError::ERROR_IO_INCOMPLETE:
        return ERROR_IO_INCOMPLETE_STR;
    case WinError::ERROR_IO_PENDING:
        return ERROR_IO_PENDING_STR;
    case WinError::ERROR_NOACCESS:
        return ERROR_NOACCESS_STR;
    case WinError::ERROR_SWAPERROR:
        return ERROR_SWAPERROR_STR;
    case WinError::ERROR_STACK_OVERFLOW:
        return ERROR_STACK_OVERFLOW_STR;
    case WinError::ERROR_INVALID_MESSAGE:
        return ERROR_INVALID_MESSAGE_STR;
    case WinError::ERROR_CAN_NOT_COMPLETE:
        return ERROR_CAN_NOT_COMPLETE_STR;
    case WinError::ERROR_INVALID_FLAGS:
        return ERROR_INVALID_FLAGS_STR;
    case WinError::ERROR_UNRECOGNIZED_VOLUME:
        return ERROR_UNRECOGNIZED_VOLUME_STR;
    case WinError::ERROR_FILE_INVALID:
        return ERROR_FILE_INVALID_STR;
    case WinError::ERROR_FULLSCREEN_MODE:
        return ERROR_FULLSCREEN_MODE_STR;
    case WinError::ERROR_NO_TOKEN:
        return ERROR_NO_TOKEN_STR;
    case WinError::ERROR_BADDB:
        return ERROR_BADDB_STR;
    case WinError::ERROR_BADKEY:
        return ERROR_BADKEY_STR;
    case WinError::ERROR_CANTOPEN:
        return ERROR_CANTOPEN_STR;
    case WinError::ERROR_CANTREAD:
        return ERROR_CANTREAD_STR;
    case WinError::ERROR_CANTWRITE:
        return ERROR_CANTWRITE_STR;
    case WinError::ERROR_REGISTRY_RECOVERED:
        return ERROR_REGISTRY_RECOVERED_STR;
    case WinError::ERROR_REGISTRY_CORRUPT:
        return ERROR_REGISTRY_CORRUPT_STR;
    case WinError::ERROR_REGISTRY_IO_FAILED:
        return ERROR_REGISTRY_IO_FAILED_STR;
    case WinError::ERROR_NOT_REGISTRY_FILE:
        return ERROR_NOT_REGISTRY_FILE_STR;
    case WinError::ERROR_KEY_DELETED:
        return ERROR_KEY_DELETED_STR;
    case WinError::ERROR_NO_LOG_SPACE:
        return ERROR_NO_LOG_SPACE_STR;
    case WinError::ERROR_KEY_HAS_CHILDREN:
        return ERROR_KEY_HAS_CHILDREN_STR;
    case WinError::ERROR_CHILD_MUST_BE_VOLATILE:
        return ERROR_CHILD_MUST_BE_VOLATILE_STR;
    case WinError::ERROR_NOTIFY_ENUM_DIR:
        return ERROR_NOTIFY_ENUM_DIR_STR;
    case WinError::ERROR_DEPENDENT_SERVICES_RUNNING:
        return ERROR_DEPENDENT_SERVICES_RUNNING_STR;
    case WinError::ERROR_INVALID_SERVICE_CONTROL:
        return ERROR_INVALID_SERVICE_CONTROL_STR;
    case WinError::ERROR_SERVICE_REQUEST_TIMEOUT:
        return ERROR_SERVICE_REQUEST_TIMEOUT_STR;
    case WinError::ERROR_SERVICE_NO_THREAD:
        return ERROR_SERVICE_NO_THREAD_STR;
    case WinError::ERROR_SERVICE_DATABASE_LOCKED:
        return ERROR_SERVICE_DATABASE_LOCKED_STR;
    case WinError::ERROR_SERVICE_ALREADY_RUNNING:
        return ERROR_SERVICE_ALREADY_RUNNING_STR;
    case WinError::ERROR_INVALID_SERVICE_ACCOUNT:
        return ERROR_INVALID_SERVICE_ACCOUNT_STR;
    case WinError::ERROR_SERVICE_DISABLED:
        return ERROR_SERVICE_DISABLED_STR;
    case WinError::ERROR_CIRCULAR_DEPENDENCY:
        return ERROR_CIRCULAR_DEPENDENCY_STR;
    case WinError::ERROR_SERVICE_DOES_NOT_EXIST:
        return ERROR_SERVICE_DOES_NOT_EXIST_STR;
    case WinError::ERROR_SERVICE_CANNOT_ACCEPT_CTRL:
        return ERROR_SERVICE_CANNOT_ACCEPT_CTRL_STR;
    case WinError::ERROR_SERVICE_NOT_ACTIVE:
        return ERROR_SERVICE_NOT_ACTIVE_STR;
    case WinError::ERROR_FAILED_SERVICE_CONTROLLER_CONNECT:
        return ERROR_FAILED_SERVICE_CONTROLLER_CONNECT_STR;
    case WinError::ERROR_EXCEPTION_IN_SERVICE:
        return ERROR_EXCEPTION_IN_SERVICE_STR;
    case WinError::ERROR_DATABASE_DOES_NOT_EXIST:
        return ERROR_DATABASE_DOES_NOT_EXIST_STR;
    case WinError::ERROR_SERVICE_SPECIFIC_ERROR:
        return ERROR_SERVICE_SPECIFIC_ERROR_STR;
    case WinError::ERROR_PROCESS_ABORTED:
        return ERROR_PROCESS_ABORTED_STR;
    case WinError::ERROR_SERVICE_DEPENDENCY_FAIL:
        return ERROR_SERVICE_DEPENDENCY_FAIL_STR;
    case WinError::ERROR_SERVICE_LOGON_FAILED:
        return ERROR_SERVICE_LOGON_FAILED_STR;
    case WinError::ERROR_SERVICE_START_HANG:
        return ERROR_SERVICE_START_HANG_STR;
    case WinError::ERROR_INVALID_SERVICE_LOCK:
        return ERROR_INVALID_SERVICE_LOCK_STR;
    case WinError::ERROR_SERVICE_MARKED_FOR_DELETE:
        return ERROR_SERVICE_MARKED_FOR_DELETE_STR;
    case WinError::ERROR_SERVICE_EXISTS:
        return ERROR_SERVICE_EXISTS_STR;
    case WinError::ERROR_ALREADY_RUNNING_LKG:
        return ERROR_ALREADY_RUNNING_LKG_STR;
    case WinError::ERROR_SERVICE_DEPENDENCY_DELETED:
        return ERROR_SERVICE_DEPENDENCY_DELETED_STR;
    case WinError::ERROR_BOOT_ALREADY_ACCEPTED:
        return ERROR_BOOT_ALREADY_ACCEPTED_STR;
    case WinError::ERROR_SERVICE_NEVER_STARTED:
        return ERROR_SERVICE_NEVER_STARTED_STR;
    case WinError::ERROR_DUPLICATE_SERVICE_NAME:
        return ERROR_DUPLICATE_SERVICE_NAME_STR;
    case WinError::ERROR_DIFFERENT_SERVICE_ACCOUNT:
        return ERROR_DIFFERENT_SERVICE_ACCOUNT_STR;
    case WinError::ERROR_CANNOT_DETECT_DRIVER_FAILURE:
        return ERROR_CANNOT_DETECT_DRIVER_FAILURE_STR;
    case WinError::ERROR_CANNOT_DETECT_PROCESS_ABORT:
        return ERROR_CANNOT_DETECT_PROCESS_ABORT_STR;
    case WinError::ERROR_NO_RECOVERY_PROGRAM:
        return ERROR_NO_RECOVERY_PROGRAM_STR;
    case WinError::ERROR_SERVICE_NOT_IN_EXE:
        return ERROR_SERVICE_NOT_IN_EXE_STR;
    case WinError::ERROR_END_OF_MEDIA:
        return ERROR_END_OF_MEDIA_STR;
    case WinError::ERROR_FILEMARK_DETECTED:
        return ERROR_FILEMARK_DETECTED_STR;
    case WinError::ERROR_BEGINNING_OF_MEDIA:
        return ERROR_BEGINNING_OF_MEDIA_STR;
    case WinError::ERROR_SETMARK_DETECTED:
        return ERROR_SETMARK_DETECTED_STR;
    case WinError::ERROR_NO_DATA_DETECTED:
        return ERROR_NO_DATA_DETECTED_STR;
    case WinError::ERROR_PARTITION_FAILURE:
        return ERROR_PARTITION_FAILURE_STR;
    case WinError::ERROR_INVALID_BLOCK_LENGTH:
        return ERROR_INVALID_BLOCK_LENGTH_STR;
    case WinError::ERROR_DEVICE_NOT_PARTITIONED:
        return ERROR_DEVICE_NOT_PARTITIONED_STR;
    case WinError::ERROR_UNABLE_TO_LOCK_MEDIA:
        return ERROR_UNABLE_TO_LOCK_MEDIA_STR;
    case WinError::ERROR_UNABLE_TO_UNLOAD_MEDIA:
        return ERROR_UNABLE_TO_UNLOAD_MEDIA_STR;
    case WinError::ERROR_MEDIA_CHANGED:
        return ERROR_MEDIA_CHANGED_STR;
    case WinError::ERROR_BUS_RESET:
        return ERROR_BUS_RESET_STR;
    case WinError::ERROR_NO_MEDIA_IN_DRIVE:
        return ERROR_NO_MEDIA_IN_DRIVE_STR;
    case WinError::ERROR_NO_UNICODE_TRANSLATION:
        return ERROR_NO_UNICODE_TRANSLATION_STR;
    case WinError::ERROR_DLL_INIT_FAILED:
        return ERROR_DLL_INIT_FAILED_STR;
    case WinError::ERROR_SHUTDOWN_IN_PROGRESS:
        return ERROR_SHUTDOWN_IN_PROGRESS_STR;
    case WinError::ERROR_NO_SHUTDOWN_IN_PROGRESS:
        return ERROR_NO_SHUTDOWN_IN_PROGRESS_STR;
    case WinError::ERROR_IO_DEVICE:
        return ERROR_IO_DEVICE_STR;
    case WinError::ERROR_SERIAL_NO_DEVICE:
        return ERROR_SERIAL_NO_DEVICE_STR;
    case WinError::ERROR_IRQ_BUSY:
        return ERROR_IRQ_BUSY_STR;
    case WinError::ERROR_MORE_WRITES:
        return ERROR_MORE_WRITES_STR;
    case WinError::ERROR_COUNTER_TIMEOUT:
        return ERROR_COUNTER_TIMEOUT_STR;
    case WinError::ERROR_FLOPPY_ID_MARK_NOT_FOUND:
        return ERROR_FLOPPY_ID_MARK_NOT_FOUND_STR;
    case WinError::ERROR_FLOPPY_WRONG_CYLINDER:
        return ERROR_FLOPPY_WRONG_CYLINDER_STR;
    case WinError::ERROR_FLOPPY_UNKNOWN_ERROR:
        return ERROR_FLOPPY_UNKNOWN_ERROR_STR;
    case WinError::ERROR_FLOPPY_BAD_REGISTERS:
        return ERROR_FLOPPY_BAD_REGISTERS_STR;
    case WinError::ERROR_DISK_RECALIBRATE_FAILED:
        return ERROR_DISK_RECALIBRATE_FAILED_STR;
    case WinError::ERROR_DISK_OPERATION_FAILED:
        return ERROR_DISK_OPERATION_FAILED_STR;
    case WinError::ERROR_DISK_RESET_FAILED:
        return ERROR_DISK_RESET_FAILED_STR;
    case WinError::ERROR_EOM_OVERFLOW:
        return ERROR_EOM_OVERFLOW_STR;
    case WinError::ERROR_NOT_ENOUGH_SERVER_MEMORY:
        return ERROR_NOT_ENOUGH_SERVER_MEMORY_STR;
    case WinError::ERROR_POSSIBLE_DEADLOCK:
        return ERROR_POSSIBLE_DEADLOCK_STR;
    case WinError::ERROR_MAPPED_ALIGNMENT:
        return ERROR_MAPPED_ALIGNMENT_STR;
    case WinError::ERROR_SET_POWER_STATE_VETOED:
        return ERROR_SET_POWER_STATE_VETOED_STR;
    case WinError::ERROR_SET_POWER_STATE_FAILED:
        return ERROR_SET_POWER_STATE_FAILED_STR;
    case WinError::ERROR_TOO_MANY_LINKS:
        return ERROR_TOO_MANY_LINKS_STR;
    case WinError::ERROR_OLD_WIN_VERSION:
        return ERROR_OLD_WIN_VERSION_STR;
    case WinError::ERROR_APP_WRONG_OS:
        return ERROR_APP_WRONG_OS_STR;
    case WinError::ERROR_SINGLE_INSTANCE_APP:
        return ERROR_SINGLE_INSTANCE_APP_STR;
    case WinError::ERROR_RMODE_APP:
        return ERROR_RMODE_APP_STR;
    case WinError::ERROR_INVALID_DLL:
        return ERROR_INVALID_DLL_STR;
    case WinError::ERROR_NO_ASSOCIATION:
        return ERROR_NO_ASSOCIATION_STR;
    case WinError::ERROR_DDE_FAIL:
        return ERROR_DDE_FAIL_STR;
    case WinError::ERROR_DLL_NOT_FOUND:
        return ERROR_DLL_NOT_FOUND_STR;
    case WinError::ERROR_NO_MORE_USER_HANDLES:
        return ERROR_NO_MORE_USER_HANDLES_STR;
    case WinError::ERROR_MESSAGE_SYNC_ONLY:
        return ERROR_MESSAGE_SYNC_ONLY_STR;
    case WinError::ERROR_SOURCE_ELEMENT_EMPTY:
        return ERROR_SOURCE_ELEMENT_EMPTY_STR;
    case WinError::ERROR_DESTINATION_ELEMENT_FULL:
        return ERROR_DESTINATION_ELEMENT_FULL_STR;
    case WinError::ERROR_ILLEGAL_ELEMENT_ADDRESS:
        return ERROR_ILLEGAL_ELEMENT_ADDRESS_STR;
    case WinError::ERROR_MAGAZINE_NOT_PRESENT:
        return ERROR_MAGAZINE_NOT_PRESENT_STR;
    case WinError::ERROR_DEVICE_REINITIALIZATION_NEEDED:
        return ERROR_DEVICE_REINITIALIZATION_NEEDED_STR;
    case WinError::ERROR_DEVICE_REQUIRES_CLEANING:
        return ERROR_DEVICE_REQUIRES_CLEANING_STR;
    case WinError::ERROR_DEVICE_DOOR_OPEN:
        return ERROR_DEVICE_DOOR_OPEN_STR;
    case WinError::ERROR_DEVICE_NOT_CONNECTED:
        return ERROR_DEVICE_NOT_CONNECTED_STR;
    case WinError::ERROR_NOT_FOUND:
        return ERROR_NOT_FOUND_STR;
    case WinError::ERROR_NO_MATCH:
        return ERROR_NO_MATCH_STR;
    case WinError::ERROR_SET_NOT_FOUND:
        return ERROR_SET_NOT_FOUND_STR;
    case WinError::ERROR_POINT_NOT_FOUND:
        return ERROR_POINT_NOT_FOUND_STR;
    case WinError::ERROR_NO_TRACKING_SERVICE:
        return ERROR_NO_TRACKING_SERVICE_STR;
    case WinError::ERROR_NO_VOLUME_ID:
        return ERROR_NO_VOLUME_ID_STR;
    case WinError::ERROR_UNABLE_TO_REMOVE_REPLACED:
        return ERROR_UNABLE_TO_REMOVE_REPLACED_STR;
    case WinError::ERROR_UNABLE_TO_MOVE_REPLACEMENT:
        return ERROR_UNABLE_TO_MOVE_REPLACEMENT_STR;
    case WinError::ERROR_UNABLE_TO_MOVE_REPLACEMENT_2:
        return ERROR_UNABLE_TO_MOVE_REPLACEMENT_2_STR;
    case WinError::ERROR_JOURNAL_DELETE_IN_PROGRESS:
        return ERROR_JOURNAL_DELETE_IN_PROGRESS_STR;
    case WinError::ERROR_JOURNAL_NOT_ACTIVE:
        return ERROR_JOURNAL_NOT_ACTIVE_STR;
    case WinError::ERROR_POTENTIAL_FILE_FOUND:
        return ERROR_POTENTIAL_FILE_FOUND_STR;
    case WinError::ERROR_JOURNAL_ENTRY_DELETED:
        return ERROR_JOURNAL_ENTRY_DELETED_STR;
    case WinError::ERROR_BAD_DEVICE:
        return ERROR_BAD_DEVICE_STR;
    case WinError::ERROR_CONNECTION_UNAVAIL:
        return ERROR_CONNECTION_UNAVAIL_STR;
    case WinError::ERROR_DEVICE_ALREADY_REMEMBERED:
        return ERROR_DEVICE_ALREADY_REMEMBERED_STR;
    case WinError::ERROR_NO_NET_OR_BAD_PATH:
        return ERROR_NO_NET_OR_BAD_PATH_STR;
    case WinError::ERROR_BAD_PROVIDER:
        return ERROR_BAD_PROVIDER_STR;
    case WinError::ERROR_CANNOT_OPEN_PROFILE:
        return ERROR_CANNOT_OPEN_PROFILE_STR;
    case WinError::ERROR_BAD_PROFILE:
        return ERROR_BAD_PROFILE_STR;
    case WinError::ERROR_NOT_CONTAINER:
        return ERROR_NOT_CONTAINER_STR;
    case WinError::ERROR_EXTENDED_ERROR:
        return ERROR_EXTENDED_ERROR_STR;
    case WinError::ERROR_INVALID_GROUPNAME:
        return ERROR_INVALID_GROUPNAME_STR;
    case WinError::ERROR_INVALID_COMPUTERNAME:
        return ERROR_INVALID_COMPUTERNAME_STR;
    case WinError::ERROR_INVALID_EVENTNAME:
        return ERROR_INVALID_EVENTNAME_STR;
    case WinError::ERROR_INVALID_DOMAINNAME:
        return ERROR_INVALID_DOMAINNAME_STR;
    case WinError::ERROR_INVALID_SERVICENAME:
        return ERROR_INVALID_SERVICENAME_STR;
    case WinError::ERROR_INVALID_NETNAME:
        return ERROR_INVALID_NETNAME_STR;
    case WinError::ERROR_INVALID_SHARENAME:
        return ERROR_INVALID_SHARENAME_STR;
    case WinError::ERROR_INVALID_PASSWORDNAME:
        return ERROR_INVALID_PASSWORDNAME_STR;
    case WinError::ERROR_INVALID_MESSAGENAME:
        return ERROR_INVALID_MESSAGENAME_STR;
    case WinError::ERROR_INVALID_MESSAGEDEST:
        return ERROR_INVALID_MESSAGEDEST_STR;
    case WinError::ERROR_SESSION_CREDENTIAL_CONFLICT:
        return ERROR_SESSION_CREDENTIAL_CONFLICT_STR;
    case WinError::ERROR_REMOTE_SESSION_LIMIT_EXCEEDED:
        return ERROR_REMOTE_SESSION_LIMIT_EXCEEDED_STR;
    case WinError::ERROR_DUP_DOMAINNAME:
        return ERROR_DUP_DOMAINNAME_STR;
    case WinError::ERROR_NO_NETWORK:
        return ERROR_NO_NETWORK_STR;
    case WinError::ERROR_CANCELLED:
        return ERROR_CANCELLED_STR;
    case WinError::ERROR_USER_MAPPED_FILE:
        return ERROR_USER_MAPPED_FILE_STR;
    case WinError::ERROR_CONNECTION_REFUSED:
        return ERROR_CONNECTION_REFUSED_STR;
    case WinError::ERROR_GRACEFUL_DISCONNECT:
        return ERROR_GRACEFUL_DISCONNECT_STR;
    case WinError::ERROR_ADDRESS_ALREADY_ASSOCIATED:
        return ERROR_ADDRESS_ALREADY_ASSOCIATED_STR;
    case WinError::ERROR_ADDRESS_NOT_ASSOCIATED:
        return ERROR_ADDRESS_NOT_ASSOCIATED_STR;
    case WinError::ERROR_CONNECTION_INVALID:
        return ERROR_CONNECTION_INVALID_STR;
    case WinError::ERROR_CONNECTION_ACTIVE:
        return ERROR_CONNECTION_ACTIVE_STR;
    case WinError::ERROR_NETWORK_UNREACHABLE:
        return ERROR_NETWORK_UNREACHABLE_STR;
    case WinError::ERROR_HOST_UNREACHABLE:
        return ERROR_HOST_UNREACHABLE_STR;
    case WinError::ERROR_PROTOCOL_UNREACHABLE:
        return ERROR_PROTOCOL_UNREACHABLE_STR;
    case WinError::ERROR_PORT_UNREACHABLE:
        return ERROR_PORT_UNREACHABLE_STR;
    case WinError::ERROR_REQUEST_ABORTED:
        return ERROR_REQUEST_ABORTED_STR;
    case WinError::ERROR_CONNECTION_ABORTED:
        return ERROR_CONNECTION_ABORTED_STR;
    case WinError::ERROR_RETRY:
        return ERROR_RETRY_STR;
    case WinError::ERROR_CONNECTION_COUNT_LIMIT:
        return ERROR_CONNECTION_COUNT_LIMIT_STR;
    case WinError::ERROR_LOGIN_TIME_RESTRICTION:
        return ERROR_LOGIN_TIME_RESTRICTION_STR;
    case WinError::ERROR_LOGIN_WKSTA_RESTRICTION:
        return ERROR_LOGIN_WKSTA_RESTRICTION_STR;
    case WinError::ERROR_INCORRECT_ADDRESS:
        return ERROR_INCORRECT_ADDRESS_STR;
    case WinError::ERROR_ALREADY_REGISTERED:
        return ERROR_ALREADY_REGISTERED_STR;
    case WinError::ERROR_SERVICE_NOT_FOUND:
        return ERROR_SERVICE_NOT_FOUND_STR;
    case WinError::ERROR_NOT_AUTHENTICATED:
        return ERROR_NOT_AUTHENTICATED_STR;
    case WinError::ERROR_NOT_LOGGED_ON:
        return ERROR_NOT_LOGGED_ON_STR;
    case WinError::ERROR_CONTINUE:
        return ERROR_CONTINUE_STR;
    case WinError::ERROR_ALREADY_INITIALIZED:
        return ERROR_ALREADY_INITIALIZED_STR;
    case WinError::ERROR_NO_MORE_DEVICES:
        return ERROR_NO_MORE_DEVICES_STR;
    case WinError::ERROR_NO_SUCH_SITE:
        return ERROR_NO_SUCH_SITE_STR;
    case WinError::ERROR_DOMAIN_CONTROLLER_EXISTS:
        return ERROR_DOMAIN_CONTROLLER_EXISTS_STR;
    case WinError::ERROR_ONLY_IF_CONNECTED:
        return ERROR_ONLY_IF_CONNECTED_STR;
    case WinError::ERROR_OVERRIDE_NOCHANGES:
        return ERROR_OVERRIDE_NOCHANGES_STR;
    case WinError::ERROR_BAD_USER_PROFILE:
        return ERROR_BAD_USER_PROFILE_STR;
    case WinError::ERROR_NOT_SUPPORTED_ON_SBS:
        return ERROR_NOT_SUPPORTED_ON_SBS_STR;
    case WinError::ERROR_SERVER_SHUTDOWN_IN_PROGRESS:
        return ERROR_SERVER_SHUTDOWN_IN_PROGRESS_STR;
    case WinError::ERROR_HOST_DOWN:
        return ERROR_HOST_DOWN_STR;
    case WinError::ERROR_NON_ACCOUNT_SID:
        return ERROR_NON_ACCOUNT_SID_STR;
    case WinError::ERROR_NON_DOMAIN_SID:
        return ERROR_NON_DOMAIN_SID_STR;
    case WinError::ERROR_ACCESS_DISABLED_BY_POLICY:
        return ERROR_ACCESS_DISABLED_BY_POLICY_STR;
    case WinError::ERROR_REG_NAT_CONSUMPTION:
        return ERROR_REG_NAT_CONSUMPTION_STR;
    case WinError::ERROR_PKINIT_FAILURE:
        return ERROR_PKINIT_FAILURE_STR;
    case WinError::ERROR_SMARTCARD_SUBSYSTEM_FAILURE:
        return ERROR_SMARTCARD_SUBSYSTEM_FAILURE_STR;
    case WinError::ERROR_DOWNGRADE_DETECTED:
        return ERROR_DOWNGRADE_DETECTED_STR;
    case WinError::ERROR_MACHINE_LOCKED:
        return ERROR_MACHINE_LOCKED_STR;
    case WinError::ERROR_CALLBACK_SUPPLIED_INVALID_DATA:
        return ERROR_CALLBACK_SUPPLIED_INVALID_DATA_STR;
    case WinError::ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED:
        return ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED_STR;
    case WinError::ERROR_DRIVER_BLOCKED:
        return ERROR_DRIVER_BLOCKED_STR;
    case WinError::ERROR_INVALID_IMPORT_OF_NON_DLL:
        return ERROR_INVALID_IMPORT_OF_NON_DLL_STR;
    case WinError::ERROR_NOT_ALL_ASSIGNED:
        return ERROR_NOT_ALL_ASSIGNED_STR;
    case WinError::ERROR_SOME_NOT_MAPPED:
        return ERROR_SOME_NOT_MAPPED_STR;
    case WinError::ERROR_NO_QUOTAS_FOR_ACCOUNT:
        return ERROR_NO_QUOTAS_FOR_ACCOUNT_STR;
    case WinError::ERROR_LOCAL_USER_SESSION_KEY:
        return ERROR_LOCAL_USER_SESSION_KEY_STR;
    case WinError::ERROR_NULL_LM_PASSWORD:
        return ERROR_NULL_LM_PASSWORD_STR;
    case WinError::ERROR_UNKNOWN_REVISION:
        return ERROR_UNKNOWN_REVISION_STR;
    case WinError::ERROR_REVISION_MISMATCH:
        return ERROR_REVISION_MISMATCH_STR;
    case WinError::ERROR_INVALID_OWNER:
        return ERROR_INVALID_OWNER_STR;
    case WinError::ERROR_INVALID_PRIMARY_GROUP:
        return ERROR_INVALID_PRIMARY_GROUP_STR;
    case WinError::ERROR_NO_IMPERSONATION_TOKEN:
        return ERROR_NO_IMPERSONATION_TOKEN_STR;
    case WinError::ERROR_CANT_DISABLE_MANDATORY:
        return ERROR_CANT_DISABLE_MANDATORY_STR;
    case WinError::ERROR_NO_LOGON_SERVERS:
        return ERROR_NO_LOGON_SERVERS_STR;
    case WinError::ERROR_NO_SUCH_LOGON_SESSION:
        return ERROR_NO_SUCH_LOGON_SESSION_STR;
    case WinError::ERROR_NO_SUCH_PRIVILEGE:
        return ERROR_NO_SUCH_PRIVILEGE_STR;
    case WinError::ERROR_PRIVILEGE_NOT_HELD:
        return ERROR_PRIVILEGE_NOT_HELD_STR;
    case WinError::ERROR_INVALID_ACCOUNT_NAME:
        return ERROR_INVALID_ACCOUNT_NAME_STR;
    case WinError::ERROR_USER_EXISTS:
        return ERROR_USER_EXISTS_STR;
    case WinError::ERROR_NO_SUCH_USER:
        return ERROR_NO_SUCH_USER_STR;
    case WinError::ERROR_GROUP_EXISTS:
        return ERROR_GROUP_EXISTS_STR;
    case WinError::ERROR_NO_SUCH_GROUP:
        return ERROR_NO_SUCH_GROUP_STR;
    case WinError::ERROR_MEMBER_IN_GROUP:
        return ERROR_MEMBER_IN_GROUP_STR;
    case WinError::ERROR_MEMBER_NOT_IN_GROUP:
        return ERROR_MEMBER_NOT_IN_GROUP_STR;
    case WinError::ERROR_LAST_ADMIN:
        return ERROR_LAST_ADMIN_STR;
    case WinError::ERROR_WRONG_PASSWORD:
        return ERROR_WRONG_PASSWORD_STR;
    case WinError::ERROR_ILL_FORMED_PASSWORD:
        return ERROR_ILL_FORMED_PASSWORD_STR;
    case WinError::ERROR_PASSWORD_RESTRICTION:
        return ERROR_PASSWORD_RESTRICTION_STR;
    case WinError::ERROR_LOGON_FAILURE:
        return ERROR_LOGON_FAILURE_STR;
    case WinError::ERROR_ACCOUNT_RESTRICTION:
        return ERROR_ACCOUNT_RESTRICTION_STR;
    case WinError::ERROR_INVALID_LOGON_HOURS:
        return ERROR_INVALID_LOGON_HOURS_STR;
    case WinError::ERROR_INVALID_WORKSTATION:
        return ERROR_INVALID_WORKSTATION_STR;
    case WinError::ERROR_PASSWORD_EXPIRED:
        return ERROR_PASSWORD_EXPIRED_STR;
    case WinError::ERROR_ACCOUNT_DISABLED:
        return ERROR_ACCOUNT_DISABLED_STR;
    case WinError::ERROR_NONE_MAPPED:
        return ERROR_NONE_MAPPED_STR;
    case WinError::ERROR_TOO_MANY_LUIDS_REQUESTED:
        return ERROR_TOO_MANY_LUIDS_REQUESTED_STR;
    case WinError::ERROR_LUIDS_EXHAUSTED:
        return ERROR_LUIDS_EXHAUSTED_STR;
    case WinError::ERROR_INVALID_SUB_AUTHORITY:
        return ERROR_INVALID_SUB_AUTHORITY_STR;
    case WinError::ERROR_INVALID_ACL:
        return ERROR_INVALID_ACL_STR;
    case WinError::ERROR_INVALID_SID:
        return ERROR_INVALID_SID_STR;
    case WinError::ERROR_INVALID_SECURITY_DESCR:
        return ERROR_INVALID_SECURITY_DESCR_STR;
    case WinError::ERROR_BAD_INHERITANCE_ACL:
        return ERROR_BAD_INHERITANCE_ACL_STR;
    case WinError::ERROR_SERVER_DISABLED:
        return ERROR_SERVER_DISABLED_STR;
    case WinError::ERROR_SERVER_NOT_DISABLED:
        return ERROR_SERVER_NOT_DISABLED_STR;
    case WinError::ERROR_INVALID_ID_AUTHORITY:
        return ERROR_INVALID_ID_AUTHORITY_STR;
    case WinError::ERROR_ALLOTTED_SPACE_EXCEEDED:
        return ERROR_ALLOTTED_SPACE_EXCEEDED_STR;
    case WinError::ERROR_INVALID_GROUP_ATTRIBUTES:
        return ERROR_INVALID_GROUP_ATTRIBUTES_STR;
    case WinError::ERROR_BAD_IMPERSONATION_LEVEL:
        return ERROR_BAD_IMPERSONATION_LEVEL_STR;
    case WinError::ERROR_CANT_OPEN_ANONYMOUS:
        return ERROR_CANT_OPEN_ANONYMOUS_STR;
    case WinError::ERROR_BAD_VALIDATION_CLASS:
        return ERROR_BAD_VALIDATION_CLASS_STR;
    case WinError::ERROR_BAD_TOKEN_TYPE:
        return ERROR_BAD_TOKEN_TYPE_STR;
    case WinError::ERROR_NO_SECURITY_ON_OBJECT:
        return ERROR_NO_SECURITY_ON_OBJECT_STR;
    case WinError::ERROR_CANT_ACCESS_DOMAIN_INFO:
        return ERROR_CANT_ACCESS_DOMAIN_INFO_STR;
    case WinError::ERROR_INVALID_SERVER_STATE:
        return ERROR_INVALID_SERVER_STATE_STR;
    case WinError::ERROR_INVALID_DOMAIN_STATE:
        return ERROR_INVALID_DOMAIN_STATE_STR;
    case WinError::ERROR_INVALID_DOMAIN_ROLE:
        return ERROR_INVALID_DOMAIN_ROLE_STR;
    case WinError::ERROR_NO_SUCH_DOMAIN:
        return ERROR_NO_SUCH_DOMAIN_STR;
    case WinError::ERROR_DOMAIN_EXISTS:
        return ERROR_DOMAIN_EXISTS_STR;
    case WinError::ERROR_DOMAIN_LIMIT_EXCEEDED:
        return ERROR_DOMAIN_LIMIT_EXCEEDED_STR;
    case WinError::ERROR_INTERNAL_DB_CORRUPTION:
        return ERROR_INTERNAL_DB_CORRUPTION_STR;
    case WinError::ERROR_INTERNAL_ERROR:
        return ERROR_INTERNAL_ERROR_STR;
    case WinError::ERROR_GENERIC_NOT_MAPPED:
        return ERROR_GENERIC_NOT_MAPPED_STR;
    case WinError::ERROR_BAD_DESCRIPTOR_FORMAT:
        return ERROR_BAD_DESCRIPTOR_FORMAT_STR;
    case WinError::ERROR_NOT_LOGON_PROCESS:
        return ERROR_NOT_LOGON_PROCESS_STR;
    case WinError::ERROR_LOGON_SESSION_EXISTS:
        return ERROR_LOGON_SESSION_EXISTS_STR;
    case WinError::ERROR_NO_SUCH_PACKAGE:
        return ERROR_NO_SUCH_PACKAGE_STR;
    case WinError::ERROR_BAD_LOGON_SESSION_STATE:
        return ERROR_BAD_LOGON_SESSION_STATE_STR;
    case WinError::ERROR_LOGON_SESSION_COLLISION:
        return ERROR_LOGON_SESSION_COLLISION_STR;
    case WinError::ERROR_INVALID_LOGON_TYPE:
        return ERROR_INVALID_LOGON_TYPE_STR;
    case WinError::ERROR_CANNOT_IMPERSONATE:
        return ERROR_CANNOT_IMPERSONATE_STR;
    case WinError::ERROR_RXACT_INVALID_STATE:
        return ERROR_RXACT_INVALID_STATE_STR;
    case WinError::ERROR_RXACT_COMMIT_FAILURE:
        return ERROR_RXACT_COMMIT_FAILURE_STR;
    case WinError::ERROR_SPECIAL_ACCOUNT:
        return ERROR_SPECIAL_ACCOUNT_STR;
    case WinError::ERROR_SPECIAL_GROUP:
        return ERROR_SPECIAL_GROUP_STR;
    case WinError::ERROR_SPECIAL_USER:
        return ERROR_SPECIAL_USER_STR;
    case WinError::ERROR_MEMBERS_PRIMARY_GROUP:
        return ERROR_MEMBERS_PRIMARY_GROUP_STR;
    case WinError::ERROR_TOKEN_ALREADY_IN_USE:
        return ERROR_TOKEN_ALREADY_IN_USE_STR;
    case WinError::ERROR_NO_SUCH_ALIAS:
        return ERROR_NO_SUCH_ALIAS_STR;
    case WinError::ERROR_MEMBER_NOT_IN_ALIAS:
        return ERROR_MEMBER_NOT_IN_ALIAS_STR;
    case WinError::ERROR_MEMBER_IN_ALIAS:
        return ERROR_MEMBER_IN_ALIAS_STR;
    case WinError::ERROR_ALIAS_EXISTS:
        return ERROR_ALIAS_EXISTS_STR;
    case WinError::ERROR_LOGON_NOT_GRANTED:
        return ERROR_LOGON_NOT_GRANTED_STR;
    case WinError::ERROR_TOO_MANY_SECRETS:
        return ERROR_TOO_MANY_SECRETS_STR;
    case WinError::ERROR_SECRET_TOO_LONG:
        return ERROR_SECRET_TOO_LONG_STR;
    case WinError::ERROR_INTERNAL_DB_ERROR:
        return ERROR_INTERNAL_DB_ERROR_STR;
    case WinError::ERROR_TOO_MANY_CONTEXT_IDS:
        return ERROR_TOO_MANY_CONTEXT_IDS_STR;
    case WinError::ERROR_LOGON_TYPE_NOT_GRANTED:
        return ERROR_LOGON_TYPE_NOT_GRANTED_STR;
    case WinError::ERROR_NT_CROSS_ENCRYPTION_REQUIRED:
        return ERROR_NT_CROSS_ENCRYPTION_REQUIRED_STR;
    case WinError::ERROR_NO_SUCH_MEMBER:
        return ERROR_NO_SUCH_MEMBER_STR;
    case WinError::ERROR_INVALID_MEMBER:
        return ERROR_INVALID_MEMBER_STR;
    case WinError::ERROR_TOO_MANY_SIDS:
        return ERROR_TOO_MANY_SIDS_STR;
    case WinError::ERROR_LM_CROSS_ENCRYPTION_REQUIRED:
        return ERROR_LM_CROSS_ENCRYPTION_REQUIRED_STR;
    case WinError::ERROR_NO_INHERITANCE:
        return ERROR_NO_INHERITANCE_STR;
    case WinError::ERROR_FILE_CORRUPT:
        return ERROR_FILE_CORRUPT_STR;
    case WinError::ERROR_DISK_CORRUPT:
        return ERROR_DISK_CORRUPT_STR;
    case WinError::ERROR_NO_USER_SESSION_KEY:
        return ERROR_NO_USER_SESSION_KEY_STR;
    case WinError::ERROR_LICENSE_QUOTA_EXCEEDED:
        return ERROR_LICENSE_QUOTA_EXCEEDED_STR;
    case WinError::ERROR_WRONG_TARGET_NAME:
        return ERROR_WRONG_TARGET_NAME_STR;
    case WinError::ERROR_MUTUAL_AUTH_FAILED:
        return ERROR_MUTUAL_AUTH_FAILED_STR;
    case WinError::ERROR_TIME_SKEW:
        return ERROR_TIME_SKEW_STR;
    case WinError::ERROR_CURRENT_DOMAIN_NOT_ALLOWED:
        return ERROR_CURRENT_DOMAIN_NOT_ALLOWED_STR;
    case WinError::ERROR_INVALID_WINDOW_HANDLE:
        return ERROR_INVALID_WINDOW_HANDLE_STR;
    case WinError::ERROR_INVALID_MENU_HANDLE:
        return ERROR_INVALID_MENU_HANDLE_STR;
    case WinError::ERROR_INVALID_CURSOR_HANDLE:
        return ERROR_INVALID_CURSOR_HANDLE_STR;
    case WinError::ERROR_INVALID_ACCEL_HANDLE:
        return ERROR_INVALID_ACCEL_HANDLE_STR;
    case WinError::ERROR_INVALID_HOOK_HANDLE:
        return ERROR_INVALID_HOOK_HANDLE_STR;
    case WinError::ERROR_INVALID_DWP_HANDLE:
        return ERROR_INVALID_DWP_HANDLE_STR;
    case WinError::ERROR_TLW_WITH_WSCHILD:
        return ERROR_TLW_WITH_WSCHILD_STR;
    case WinError::ERROR_CANNOT_FIND_WND_CLASS:
        return ERROR_CANNOT_FIND_WND_CLASS_STR;
    case WinError::ERROR_WINDOW_OF_OTHER_THREAD:
        return ERROR_WINDOW_OF_OTHER_THREAD_STR;
    case WinError::ERROR_HOTKEY_ALREADY_REGISTERED:
        return ERROR_HOTKEY_ALREADY_REGISTERED_STR;
    case WinError::ERROR_CLASS_ALREADY_EXISTS:
        return ERROR_CLASS_ALREADY_EXISTS_STR;
    case WinError::ERROR_CLASS_DOES_NOT_EXIST:
        return ERROR_CLASS_DOES_NOT_EXIST_STR;
    case WinError::ERROR_CLASS_HAS_WINDOWS:
        return ERROR_CLASS_HAS_WINDOWS_STR;
    case WinError::ERROR_INVALID_INDEX:
        return ERROR_INVALID_INDEX_STR;
    case WinError::ERROR_INVALID_ICON_HANDLE:
        return ERROR_INVALID_ICON_HANDLE_STR;
    case WinError::ERROR_PRIVATE_DIALOG_INDEX:
        return ERROR_PRIVATE_DIALOG_INDEX_STR;
    case WinError::ERROR_LISTBOX_ID_NOT_FOUND:
        return ERROR_LISTBOX_ID_NOT_FOUND_STR;
    case WinError::ERROR_NO_WILDCARD_CHARACTERS:
        return ERROR_NO_WILDCARD_CHARACTERS_STR;
    case WinError::ERROR_CLIPBOARD_NOT_OPEN:
        return ERROR_CLIPBOARD_NOT_OPEN_STR;
    case WinError::ERROR_HOTKEY_NOT_REGISTERED:
        return ERROR_HOTKEY_NOT_REGISTERED_STR;
    case WinError::ERROR_WINDOW_NOT_DIALOG:
        return ERROR_WINDOW_NOT_DIALOG_STR;
    case WinError::ERROR_CONTROL_ID_NOT_FOUND:
        return ERROR_CONTROL_ID_NOT_FOUND_STR;
    case WinError::ERROR_INVALID_COMBOBOX_MESSAGE:
        return ERROR_INVALID_COMBOBOX_MESSAGE_STR;
    case WinError::ERROR_WINDOW_NOT_COMBOBOX:
        return ERROR_WINDOW_NOT_COMBOBOX_STR;
    case WinError::ERROR_INVALID_EDIT_HEIGHT:
        return ERROR_INVALID_EDIT_HEIGHT_STR;
    case WinError::ERROR_DC_NOT_FOUND:
        return ERROR_DC_NOT_FOUND_STR;
    case WinError::ERROR_INVALID_HOOK_FILTER:
        return ERROR_INVALID_HOOK_FILTER_STR;
    case WinError::ERROR_INVALID_FILTER_PROC:
        return ERROR_INVALID_FILTER_PROC_STR;
    case WinError::ERROR_HOOK_NEEDS_HMOD:
        return ERROR_HOOK_NEEDS_HMOD_STR;
    case WinError::ERROR_GLOBAL_ONLY_HOOK:
        return ERROR_GLOBAL_ONLY_HOOK_STR;
    case WinError::ERROR_JOURNAL_HOOK_SET:
        return ERROR_JOURNAL_HOOK_SET_STR;
    case WinError::ERROR_HOOK_NOT_INSTALLED:
        return ERROR_HOOK_NOT_INSTALLED_STR;
    case WinError::ERROR_INVALID_LB_MESSAGE:
        return ERROR_INVALID_LB_MESSAGE_STR;
    case WinError::ERROR_SETCOUNT_ON_BAD_LB:
        return ERROR_SETCOUNT_ON_BAD_LB_STR;
    case WinError::ERROR_LB_WITHOUT_TABSTOPS:
        return ERROR_LB_WITHOUT_TABSTOPS_STR;
    case WinError::ERROR_DESTROY_OBJECT_OF_OTHER_THREAD:
        return ERROR_DESTROY_OBJECT_OF_OTHER_THREAD_STR;
    case WinError::ERROR_CHILD_WINDOW_MENU:
        return ERROR_CHILD_WINDOW_MENU_STR;
    case WinError::ERROR_NO_SYSTEM_MENU:
        return ERROR_NO_SYSTEM_MENU_STR;
    case WinError::ERROR_INVALID_MSGBOX_STYLE:
        return ERROR_INVALID_MSGBOX_STYLE_STR;
    case WinError::ERROR_INVALID_SPI_VALUE:
        return ERROR_INVALID_SPI_VALUE_STR;
    case WinError::ERROR_SCREEN_ALREADY_LOCKED:
        return ERROR_SCREEN_ALREADY_LOCKED_STR;
    case WinError::ERROR_HWNDS_HAVE_DIFF_PARENT:
        return ERROR_HWNDS_HAVE_DIFF_PARENT_STR;
    case WinError::ERROR_NOT_CHILD_WINDOW:
        return ERROR_NOT_CHILD_WINDOW_STR;
    case WinError::ERROR_INVALID_GW_COMMAND:
        return ERROR_INVALID_GW_COMMAND_STR;
    case WinError::ERROR_INVALID_THREAD_ID:
        return ERROR_INVALID_THREAD_ID_STR;
    case WinError::ERROR_NON_MDICHILD_WINDOW:
        return ERROR_NON_MDICHILD_WINDOW_STR;
    case WinError::ERROR_POPUP_ALREADY_ACTIVE:
        return ERROR_POPUP_ALREADY_ACTIVE_STR;
    case WinError::ERROR_NO_SCROLLBARS:
        return ERROR_NO_SCROLLBARS_STR;
    case WinError::ERROR_INVALID_SCROLLBAR_RANGE:
        return ERROR_INVALID_SCROLLBAR_RANGE_STR;
    case WinError::ERROR_INVALID_SHOWWIN_COMMAND:
        return ERROR_INVALID_SHOWWIN_COMMAND_STR;
    case WinError::ERROR_NO_SYSTEM_RESOURCES:
        return ERROR_NO_SYSTEM_RESOURCES_STR;
    case WinError::ERROR_NONPAGED_SYSTEM_RESOURCES:
        return ERROR_NONPAGED_SYSTEM_RESOURCES_STR;
    case WinError::ERROR_PAGED_SYSTEM_RESOURCES:
        return ERROR_PAGED_SYSTEM_RESOURCES_STR;
    case WinError::ERROR_WORKING_SET_QUOTA:
        return ERROR_WORKING_SET_QUOTA_STR;
    case WinError::ERROR_PAGEFILE_QUOTA:
        return ERROR_PAGEFILE_QUOTA_STR;
    case WinError::ERROR_COMMITMENT_LIMIT:
        return ERROR_COMMITMENT_LIMIT_STR;
    case WinError::ERROR_MENU_ITEM_NOT_FOUND:
        return ERROR_MENU_ITEM_NOT_FOUND_STR;
    case WinError::ERROR_INVALID_KEYBOARD_HANDLE:
        return ERROR_INVALID_KEYBOARD_HANDLE_STR;
    case WinError::ERROR_HOOK_TYPE_NOT_ALLOWED:
        return ERROR_HOOK_TYPE_NOT_ALLOWED_STR;
    case WinError::ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION:
        return ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION_STR;
    case WinError::ERROR_TIMEOUT:
        return ERROR_TIMEOUT_STR;
    case WinError::ERROR_INVALID_MONITOR_HANDLE:
        return ERROR_INVALID_MONITOR_HANDLE_STR;
    case WinError::ERROR_INCORRECT_SIZE:
        return ERROR_INCORRECT_SIZE_STR;
    case WinError::ERROR_SYMLINK_CLASS_DISABLED:
        return ERROR_SYMLINK_CLASS_DISABLED_STR;
    case WinError::ERROR_SYMLINK_NOT_SUPPORTED:
        return ERROR_SYMLINK_NOT_SUPPORTED_STR;
    case WinError::ERROR_XML_PARSE_ERROR:
        return ERROR_XML_PARSE_ERROR_STR;
    case WinError::ERROR_XMLDSIG_ERROR:
        return ERROR_XMLDSIG_ERROR_STR;
    case WinError::ERROR_RESTART_APPLICATION:
        return ERROR_RESTART_APPLICATION_STR;
    case WinError::ERROR_WRONG_COMPARTMENT:
        return ERROR_WRONG_COMPARTMENT_STR;
    case WinError::ERROR_AUTHIP_FAILURE:
        return ERROR_AUTHIP_FAILURE_STR;
    case WinError::ERROR_NO_NVRAM_RESOURCES:
        return ERROR_NO_NVRAM_RESOURCES_STR;
    case WinError::ERROR_EVENTLOG_FILE_CORRUPT:
        return ERROR_EVENTLOG_FILE_CORRUPT_STR;
    case WinError::ERROR_EVENTLOG_CANT_START:
        return ERROR_EVENTLOG_CANT_START_STR;
    case WinError::ERROR_LOG_FILE_FULL:
        return ERROR_LOG_FILE_FULL_STR;
    case WinError::ERROR_EVENTLOG_FILE_CHANGED:
        return ERROR_EVENTLOG_FILE_CHANGED_STR;
    case WinError::ERROR_INVALID_TASK_NAME:
        return ERROR_INVALID_TASK_NAME_STR;
    case WinError::ERROR_INVALID_TASK_INDEX:
        return ERROR_INVALID_TASK_INDEX_STR;
    case WinError::ERROR_THREAD_ALREADY_IN_TASK:
        return ERROR_THREAD_ALREADY_IN_TASK_STR;
    case WinError::ERROR_INSTALL_SERVICE_FAILURE:
        return ERROR_INSTALL_SERVICE_FAILURE_STR;
    case WinError::ERROR_INSTALL_USEREXIT:
        return ERROR_INSTALL_USEREXIT_STR;
    case WinError::ERROR_INSTALL_FAILURE:
        return ERROR_INSTALL_FAILURE_STR;
    case WinError::ERROR_INSTALL_SUSPEND:
        return ERROR_INSTALL_SUSPEND_STR;
    case WinError::ERROR_UNKNOWN_PRODUCT:
        return ERROR_UNKNOWN_PRODUCT_STR;
    case WinError::ERROR_UNKNOWN_FEATURE:
        return ERROR_UNKNOWN_FEATURE_STR;
    case WinError::ERROR_UNKNOWN_COMPONENT:
        return ERROR_UNKNOWN_COMPONENT_STR;
    case WinError::ERROR_UNKNOWN_PROPERTY:
        return ERROR_UNKNOWN_PROPERTY_STR;
    case WinError::ERROR_INVALID_HANDLE_STATE:
        return ERROR_INVALID_HANDLE_STATE_STR;
    case WinError::ERROR_BAD_CONFIGURATION:
        return ERROR_BAD_CONFIGURATION_STR;
    case WinError::ERROR_INDEX_ABSENT:
        return ERROR_INDEX_ABSENT_STR;
    case WinError::ERROR_INSTALL_SOURCE_ABSENT:
        return ERROR_INSTALL_SOURCE_ABSENT_STR;
    case WinError::ERROR_INSTALL_PACKAGE_VERSION:
        return ERROR_INSTALL_PACKAGE_VERSION_STR;
    case WinError::ERROR_PRODUCT_UNINSTALLED:
        return ERROR_PRODUCT_UNINSTALLED_STR;
    case WinError::ERROR_BAD_QUERY_SYNTAX:
        return ERROR_BAD_QUERY_SYNTAX_STR;
    case WinError::ERROR_INVALID_FIELD:
        return ERROR_INVALID_FIELD_STR;
    case WinError::ERROR_DEVICE_REMOVED:
        return ERROR_DEVICE_REMOVED_STR;
    case WinError::ERROR_INSTALL_ALREADY_RUNNING:
        return ERROR_INSTALL_ALREADY_RUNNING_STR;
    case WinError::ERROR_INSTALL_PACKAGE_OPEN_FAILED:
        return ERROR_INSTALL_PACKAGE_OPEN_FAILED_STR;
    case WinError::ERROR_INSTALL_PACKAGE_INVALID:
        return ERROR_INSTALL_PACKAGE_INVALID_STR;
    case WinError::ERROR_INSTALL_UI_FAILURE:
        return ERROR_INSTALL_UI_FAILURE_STR;
    case WinError::ERROR_INSTALL_LOG_FAILURE:
        return ERROR_INSTALL_LOG_FAILURE_STR;
    case WinError::ERROR_INSTALL_LANGUAGE_UNSUPPORTED:
        return ERROR_INSTALL_LANGUAGE_UNSUPPORTED_STR;
    case WinError::ERROR_INSTALL_TRANSFORM_FAILURE:
        return ERROR_INSTALL_TRANSFORM_FAILURE_STR;
    case WinError::ERROR_INSTALL_PACKAGE_REJECTED:
        return ERROR_INSTALL_PACKAGE_REJECTED_STR;
    case WinError::ERROR_FUNCTION_NOT_CALLED:
        return ERROR_FUNCTION_NOT_CALLED_STR;
    case WinError::ERROR_FUNCTION_FAILED:
        return ERROR_FUNCTION_FAILED_STR;
    case WinError::ERROR_INVALID_TABLE:
        return ERROR_INVALID_TABLE_STR;
    case WinError::ERROR_DATATYPE_MISMATCH:
        return ERROR_DATATYPE_MISMATCH_STR;
    case WinError::ERROR_UNSUPPORTED_TYPE:
        return ERROR_UNSUPPORTED_TYPE_STR;
    case WinError::ERROR_CREATE_FAILED:
        return ERROR_CREATE_FAILED_STR;
    case WinError::ERROR_INSTALL_TEMP_UNWRITABLE:
        return ERROR_INSTALL_TEMP_UNWRITABLE_STR;
    case WinError::ERROR_INSTALL_PLATFORM_UNSUPPORTED:
        return ERROR_INSTALL_PLATFORM_UNSUPPORTED_STR;
    case WinError::ERROR_INSTALL_NOTUSED:
        return ERROR_INSTALL_NOTUSED_STR;
    case WinError::ERROR_PATCH_PACKAGE_OPEN_FAILED:
        return ERROR_PATCH_PACKAGE_OPEN_FAILED_STR;
    case WinError::ERROR_PATCH_PACKAGE_INVALID:
        return ERROR_PATCH_PACKAGE_INVALID_STR;
    case WinError::ERROR_PATCH_PACKAGE_UNSUPPORTED:
        return ERROR_PATCH_PACKAGE_UNSUPPORTED_STR;
    case WinError::ERROR_PRODUCT_VERSION:
        return ERROR_PRODUCT_VERSION_STR;
    case WinError::ERROR_INVALID_COMMAND_LINE:
        return ERROR_INVALID_COMMAND_LINE_STR;
    case WinError::ERROR_INSTALL_REMOTE_DISALLOWED:
        return ERROR_INSTALL_REMOTE_DISALLOWED_STR;
    case WinError::ERROR_SUCCESS_REBOOT_INITIATED:
        return ERROR_SUCCESS_REBOOT_INITIATED_STR;
    case WinError::ERROR_PATCH_TARGET_NOT_FOUND:
        return ERROR_PATCH_TARGET_NOT_FOUND_STR;
    case WinError::ERROR_PATCH_PACKAGE_REJECTED:
        return ERROR_PATCH_PACKAGE_REJECTED_STR;
    case WinError::ERROR_INSTALL_TRANSFORM_REJECTED:
        return ERROR_INSTALL_TRANSFORM_REJECTED_STR;
    case WinError::ERROR_INSTALL_REMOTE_PROHIBITED:
        return ERROR_INSTALL_REMOTE_PROHIBITED_STR;
    case WinError::ERROR_PATCH_REMOVAL_UNSUPPORTED:
        return ERROR_PATCH_REMOVAL_UNSUPPORTED_STR;
    case WinError::ERROR_UNKNOWN_PATCH:
        return ERROR_UNKNOWN_PATCH_STR;
    case WinError::ERROR_PATCH_NO_SEQUENCE:
        return ERROR_PATCH_NO_SEQUENCE_STR;
    case WinError::ERROR_PATCH_REMOVAL_DISALLOWED:
        return ERROR_PATCH_REMOVAL_DISALLOWED_STR;
    case WinError::ERROR_INVALID_PATCH_XML:
        return ERROR_INVALID_PATCH_XML_STR;
    case WinError::ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT:
        return ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT_STR;
    case WinError::ERROR_INSTALL_SERVICE_SAFEBOOT:
        return ERROR_INSTALL_SERVICE_SAFEBOOT_STR;
    case WinError::RPC_S_INVALID_STRING_BINDING:
        return RPC_S_INVALID_STRING_BINDING_STR;
    case WinError::RPC_S_WRONG_KIND_OF_BINDING:
        return RPC_S_WRONG_KIND_OF_BINDING_STR;
    case WinError::RPC_S_INVALID_BINDING:
        return RPC_S_INVALID_BINDING_STR;
    case WinError::RPC_S_PROTSEQ_NOT_SUPPORTED:
        return RPC_S_PROTSEQ_NOT_SUPPORTED_STR;
    case WinError::RPC_S_INVALID_RPC_PROTSEQ:
        return RPC_S_INVALID_RPC_PROTSEQ_STR;
    case WinError::RPC_S_INVALID_STRING_UUID:
        return RPC_S_INVALID_STRING_UUID_STR;
    case WinError::RPC_S_INVALID_ENDPOINT_FORMAT:
        return RPC_S_INVALID_ENDPOINT_FORMAT_STR;
    case WinError::RPC_S_INVALID_NET_ADDR:
        return RPC_S_INVALID_NET_ADDR_STR;
    case WinError::RPC_S_NO_ENDPOINT_FOUND:
        return RPC_S_NO_ENDPOINT_FOUND_STR;
    case WinError::RPC_S_INVALID_TIMEOUT:
        return RPC_S_INVALID_TIMEOUT_STR;
    case WinError::RPC_S_OBJECT_NOT_FOUND:
        return RPC_S_OBJECT_NOT_FOUND_STR;
    case WinError::RPC_S_ALREADY_REGISTERED:
        return RPC_S_ALREADY_REGISTERED_STR;
    case WinError::RPC_S_TYPE_ALREADY_REGISTERED:
        return RPC_S_TYPE_ALREADY_REGISTERED_STR;
    case WinError::RPC_S_ALREADY_LISTENING:
        return RPC_S_ALREADY_LISTENING_STR;
    case WinError::RPC_S_NO_PROTSEQS_REGISTERED:
        return RPC_S_NO_PROTSEQS_REGISTERED_STR;
    case WinError::RPC_S_NOT_LISTENING:
        return RPC_S_NOT_LISTENING_STR;
    case WinError::RPC_S_UNKNOWN_MGR_TYPE:
        return RPC_S_UNKNOWN_MGR_TYPE_STR;
    case WinError::RPC_S_UNKNOWN_IF:
        return RPC_S_UNKNOWN_IF_STR;
    case WinError::RPC_S_NO_BINDINGS:
        return RPC_S_NO_BINDINGS_STR;
    case WinError::RPC_S_NO_PROTSEQS:
        return RPC_S_NO_PROTSEQS_STR;
    case WinError::RPC_S_CANT_CREATE_ENDPOINT:
        return RPC_S_CANT_CREATE_ENDPOINT_STR;
    case WinError::RPC_S_OUT_OF_RESOURCES:
        return RPC_S_OUT_OF_RESOURCES_STR;
    case WinError::RPC_S_SERVER_UNAVAILABLE:
        return RPC_S_SERVER_UNAVAILABLE_STR;
    case WinError::RPC_S_SERVER_TOO_BUSY:
        return RPC_S_SERVER_TOO_BUSY_STR;
    case WinError::RPC_S_INVALID_NETWORK_OPTIONS:
        return RPC_S_INVALID_NETWORK_OPTIONS_STR;
    case WinError::RPC_S_NO_CALL_ACTIVE:
        return RPC_S_NO_CALL_ACTIVE_STR;
    case WinError::RPC_S_CALL_FAILED:
        return RPC_S_CALL_FAILED_STR;
    case WinError::RPC_S_CALL_FAILED_DNE:
        return RPC_S_CALL_FAILED_DNE_STR;
    case WinError::RPC_S_PROTOCOL_ERROR:
        return RPC_S_PROTOCOL_ERROR_STR;
    case WinError::RPC_S_UNSUPPORTED_TRANS_SYN:
        return RPC_S_UNSUPPORTED_TRANS_SYN_STR;
    case WinError::RPC_S_UNSUPPORTED_TYPE:
        return RPC_S_UNSUPPORTED_TYPE_STR;
    case WinError::RPC_S_INVALID_TAG:
        return RPC_S_INVALID_TAG_STR;
    case WinError::RPC_S_INVALID_BOUND:
        return RPC_S_INVALID_BOUND_STR;
    case WinError::RPC_S_NO_ENTRY_NAME:
        return RPC_S_NO_ENTRY_NAME_STR;
    case WinError::RPC_S_INVALID_NAME_SYNTAX:
        return RPC_S_INVALID_NAME_SYNTAX_STR;
    case WinError::RPC_S_UNSUPPORTED_NAME_SYNTAX:
        return RPC_S_UNSUPPORTED_NAME_SYNTAX_STR;
    case WinError::RPC_S_UUID_NO_ADDRESS:
        return RPC_S_UUID_NO_ADDRESS_STR;
    case WinError::RPC_S_DUPLICATE_ENDPOINT:
        return RPC_S_DUPLICATE_ENDPOINT_STR;
    case WinError::RPC_S_UNKNOWN_AUTHN_TYPE:
        return RPC_S_UNKNOWN_AUTHN_TYPE_STR;
    case WinError::RPC_S_MAX_CALLS_TOO_SMALL:
        return RPC_S_MAX_CALLS_TOO_SMALL_STR;
    case WinError::RPC_S_STRING_TOO_LONG:
        return RPC_S_STRING_TOO_LONG_STR;
    case WinError::RPC_S_PROTSEQ_NOT_FOUND:
        return RPC_S_PROTSEQ_NOT_FOUND_STR;
    case WinError::RPC_S_PROCNUM_OUT_OF_RANGE:
        return RPC_S_PROCNUM_OUT_OF_RANGE_STR;
    case WinError::RPC_S_BINDING_HAS_NO_AUTH:
        return RPC_S_BINDING_HAS_NO_AUTH_STR;
    case WinError::RPC_S_UNKNOWN_AUTHN_SERVICE:
        return RPC_S_UNKNOWN_AUTHN_SERVICE_STR;
    case WinError::RPC_S_UNKNOWN_AUTHN_LEVEL:
        return RPC_S_UNKNOWN_AUTHN_LEVEL_STR;
    case WinError::RPC_S_INVALID_AUTH_IDENTITY:
        return RPC_S_INVALID_AUTH_IDENTITY_STR;
    case WinError::RPC_S_UNKNOWN_AUTHZ_SERVICE:
        return RPC_S_UNKNOWN_AUTHZ_SERVICE_STR;
    case WinError::EPT_S_INVALID_ENTRY:
        return EPT_S_INVALID_ENTRY_STR;
    case WinError::EPT_S_CANT_PERFORM_OP:
        return EPT_S_CANT_PERFORM_OP_STR;
    case WinError::EPT_S_NOT_REGISTERED:
        return EPT_S_NOT_REGISTERED_STR;
    case WinError::RPC_S_NOTHING_TO_EXPORT:
        return RPC_S_NOTHING_TO_EXPORT_STR;
    case WinError::RPC_S_INCOMPLETE_NAME:
        return RPC_S_INCOMPLETE_NAME_STR;
    case WinError::RPC_S_INVALID_VERS_OPTION:
        return RPC_S_INVALID_VERS_OPTION_STR;
    case WinError::RPC_S_NO_MORE_MEMBERS:
        return RPC_S_NO_MORE_MEMBERS_STR;
    case WinError::RPC_S_NOT_ALL_OBJS_UNEXPORTED:
        return RPC_S_NOT_ALL_OBJS_UNEXPORTED_STR;
    case WinError::RPC_S_INTERFACE_NOT_FOUND:
        return RPC_S_INTERFACE_NOT_FOUND_STR;
    case WinError::RPC_S_ENTRY_ALREADY_EXISTS:
        return RPC_S_ENTRY_ALREADY_EXISTS_STR;
    case WinError::RPC_S_ENTRY_NOT_FOUND:
        return RPC_S_ENTRY_NOT_FOUND_STR;
    case WinError::RPC_S_NAME_SERVICE_UNAVAILABLE:
        return RPC_S_NAME_SERVICE_UNAVAILABLE_STR;
    case WinError::RPC_S_INVALID_NAF_ID:
        return RPC_S_INVALID_NAF_ID_STR;
    case WinError::RPC_S_CANNOT_SUPPORT:
        return RPC_S_CANNOT_SUPPORT_STR;
    case WinError::RPC_S_NO_CONTEXT_AVAILABLE:
        return RPC_S_NO_CONTEXT_AVAILABLE_STR;
    case WinError::RPC_S_INTERNAL_ERROR:
        return RPC_S_INTERNAL_ERROR_STR;
    case WinError::RPC_S_ZERO_DIVIDE:
        return RPC_S_ZERO_DIVIDE_STR;
    case WinError::RPC_S_ADDRESS_ERROR:
        return RPC_S_ADDRESS_ERROR_STR;
    case WinError::RPC_S_FP_DIV_ZERO:
        return RPC_S_FP_DIV_ZERO_STR;
    case WinError::RPC_S_FP_UNDERFLOW:
        return RPC_S_FP_UNDERFLOW_STR;
    case WinError::RPC_S_FP_OVERFLOW:
        return RPC_S_FP_OVERFLOW_STR;
    case WinError::RPC_X_NO_MORE_ENTRIES:
        return RPC_X_NO_MORE_ENTRIES_STR;
    case WinError::RPC_X_SS_CHAR_TRANS_OPEN_FAIL:
        return RPC_X_SS_CHAR_TRANS_OPEN_FAIL_STR;
    case WinError::RPC_X_SS_CHAR_TRANS_SHORT_FILE:
        return RPC_X_SS_CHAR_TRANS_SHORT_FILE_STR;
    case WinError::RPC_X_SS_IN_NULL_CONTEXT:
        return RPC_X_SS_IN_NULL_CONTEXT_STR;
    case WinError::RPC_X_SS_CONTEXT_DAMAGED:
        return RPC_X_SS_CONTEXT_DAMAGED_STR;
    case WinError::RPC_X_SS_HANDLES_MISMATCH:
        return RPC_X_SS_HANDLES_MISMATCH_STR;
    case WinError::RPC_X_SS_CANNOT_GET_CALL_HANDLE:
        return RPC_X_SS_CANNOT_GET_CALL_HANDLE_STR;
    case WinError::RPC_X_NULL_REF_POINTER:
        return RPC_X_NULL_REF_POINTER_STR;
    case WinError::RPC_X_ENUM_VALUE_OUT_OF_RANGE:
        return RPC_X_ENUM_VALUE_OUT_OF_RANGE_STR;
    case WinError::RPC_X_BYTE_COUNT_TOO_SMALL:
        return RPC_X_BYTE_COUNT_TOO_SMALL_STR;
    case WinError::RPC_X_BAD_STUB_DATA:
        return RPC_X_BAD_STUB_DATA_STR;
    case WinError::ERROR_INVALID_USER_BUFFER:
        return ERROR_INVALID_USER_BUFFER_STR;
    case WinError::ERROR_UNRECOGNIZED_MEDIA:
        return ERROR_UNRECOGNIZED_MEDIA_STR;
    case WinError::ERROR_NO_TRUST_LSA_SECRET:
        return ERROR_NO_TRUST_LSA_SECRET_STR;
    case WinError::ERROR_NO_TRUST_SAM_ACCOUNT:
        return ERROR_NO_TRUST_SAM_ACCOUNT_STR;
    case WinError::ERROR_TRUSTED_DOMAIN_FAILURE:
        return ERROR_TRUSTED_DOMAIN_FAILURE_STR;
    case WinError::ERROR_TRUSTED_RELATIONSHIP_FAILURE:
        return ERROR_TRUSTED_RELATIONSHIP_FAILURE_STR;
    case WinError::ERROR_TRUST_FAILURE:
        return ERROR_TRUST_FAILURE_STR;
    case WinError::RPC_S_CALL_IN_PROGRESS:
        return RPC_S_CALL_IN_PROGRESS_STR;
    case WinError::ERROR_NETLOGON_NOT_STARTED:
        return ERROR_NETLOGON_NOT_STARTED_STR;
    case WinError::ERROR_ACCOUNT_EXPIRED:
        return ERROR_ACCOUNT_EXPIRED_STR;
    case WinError::ERROR_REDIRECTOR_HAS_OPEN_HANDLES:
        return ERROR_REDIRECTOR_HAS_OPEN_HANDLES_STR;
    case WinError::ERROR_PRINTER_DRIVER_ALREADY_INSTALLED:
        return ERROR_PRINTER_DRIVER_ALREADY_INSTALLED_STR;
    case WinError::ERROR_UNKNOWN_PORT:
        return ERROR_UNKNOWN_PORT_STR;
    case WinError::ERROR_UNKNOWN_PRINTER_DRIVER:
        return ERROR_UNKNOWN_PRINTER_DRIVER_STR;
    case WinError::ERROR_UNKNOWN_PRINTPROCESSOR:
        return ERROR_UNKNOWN_PRINTPROCESSOR_STR;
    case WinError::ERROR_INVALID_SEPARATOR_FILE:
        return ERROR_INVALID_SEPARATOR_FILE_STR;
    case WinError::ERROR_INVALID_PRIORITY:
        return ERROR_INVALID_PRIORITY_STR;
    case WinError::ERROR_INVALID_PRINTER_NAME:
        return ERROR_INVALID_PRINTER_NAME_STR;
    case WinError::ERROR_PRINTER_ALREADY_EXISTS:
        return ERROR_PRINTER_ALREADY_EXISTS_STR;
    case WinError::ERROR_INVALID_PRINTER_COMMAND:
        return ERROR_INVALID_PRINTER_COMMAND_STR;
    case WinError::ERROR_INVALID_DATATYPE:
        return ERROR_INVALID_DATATYPE_STR;
    case WinError::ERROR_INVALID_ENVIRONMENT:
        return ERROR_INVALID_ENVIRONMENT_STR;
    case WinError::RPC_S_NO_MORE_BINDINGS:
        return RPC_S_NO_MORE_BINDINGS_STR;
    case WinError::ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT:
        return ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT_STR;
    case WinError::ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT:
        return ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT_STR;
    case WinError::ERROR_NOLOGON_SERVER_TRUST_ACCOUNT:
        return ERROR_NOLOGON_SERVER_TRUST_ACCOUNT_STR;
    case WinError::ERROR_DOMAIN_TRUST_INCONSISTENT:
        return ERROR_DOMAIN_TRUST_INCONSISTENT_STR;
    case WinError::ERROR_SERVER_HAS_OPEN_HANDLES:
        return ERROR_SERVER_HAS_OPEN_HANDLES_STR;
    case WinError::ERROR_RESOURCE_DATA_NOT_FOUND:
        return ERROR_RESOURCE_DATA_NOT_FOUND_STR;
    case WinError::ERROR_RESOURCE_TYPE_NOT_FOUND:
        return ERROR_RESOURCE_TYPE_NOT_FOUND_STR;
    case WinError::ERROR_RESOURCE_NAME_NOT_FOUND:
        return ERROR_RESOURCE_NAME_NOT_FOUND_STR;
    case WinError::ERROR_RESOURCE_LANG_NOT_FOUND:
        return ERROR_RESOURCE_LANG_NOT_FOUND_STR;
    case WinError::ERROR_NOT_ENOUGH_QUOTA:
        return ERROR_NOT_ENOUGH_QUOTA_STR;
    case WinError::RPC_S_NO_INTERFACES:
        return RPC_S_NO_INTERFACES_STR;
    case WinError::RPC_S_CALL_CANCELLED:
        return RPC_S_CALL_CANCELLED_STR;
    case WinError::RPC_S_BINDING_INCOMPLETE:
        return RPC_S_BINDING_INCOMPLETE_STR;
    case WinError::RPC_S_COMM_FAILURE:
        return RPC_S_COMM_FAILURE_STR;
    case WinError::RPC_S_UNSUPPORTED_AUTHN_LEVEL:
        return RPC_S_UNSUPPORTED_AUTHN_LEVEL_STR;
    case WinError::RPC_S_NO_PRINC_NAME:
        return RPC_S_NO_PRINC_NAME_STR;
    case WinError::RPC_S_NOT_RPC_ERROR:
        return RPC_S_NOT_RPC_ERROR_STR;
    case WinError::RPC_S_UUID_LOCAL_ONLY:
        return RPC_S_UUID_LOCAL_ONLY_STR;
    case WinError::RPC_S_SEC_PKG_ERROR:
        return RPC_S_SEC_PKG_ERROR_STR;
    case WinError::RPC_S_NOT_CANCELLED:
        return RPC_S_NOT_CANCELLED_STR;
    case WinError::RPC_X_INVALID_ES_ACTION:
        return RPC_X_INVALID_ES_ACTION_STR;
    case WinError::RPC_X_WRONG_ES_VERSION:
        return RPC_X_WRONG_ES_VERSION_STR;
    case WinError::RPC_X_WRONG_STUB_VERSION:
        return RPC_X_WRONG_STUB_VERSION_STR;
    case WinError::RPC_X_INVALID_PIPE_OBJECT:
        return RPC_X_INVALID_PIPE_OBJECT_STR;
    case WinError::RPC_X_WRONG_PIPE_ORDER:
        return RPC_X_WRONG_PIPE_ORDER_STR;
    case WinError::RPC_X_WRONG_PIPE_VERSION:
        return RPC_X_WRONG_PIPE_VERSION_STR;
    case WinError::RPC_S_GROUP_MEMBER_NOT_FOUND:
        return RPC_S_GROUP_MEMBER_NOT_FOUND_STR;
    case WinError::EPT_S_CANT_CREATE:
        return EPT_S_CANT_CREATE_STR;
    case WinError::RPC_S_INVALID_OBJECT:
        return RPC_S_INVALID_OBJECT_STR;
    case WinError::ERROR_INVALID_TIME:
        return ERROR_INVALID_TIME_STR;
    case WinError::ERROR_INVALID_FORM_NAME:
        return ERROR_INVALID_FORM_NAME_STR;
    case WinError::ERROR_INVALID_FORM_SIZE:
        return ERROR_INVALID_FORM_SIZE_STR;
    case WinError::ERROR_ALREADY_WAITING:
        return ERROR_ALREADY_WAITING_STR;
    case WinError::ERROR_PRINTER_DELETED:
        return ERROR_PRINTER_DELETED_STR;
    case WinError::ERROR_INVALID_PRINTER_STATE:
        return ERROR_INVALID_PRINTER_STATE_STR;
    case WinError::ERROR_PASSWORD_MUST_CHANGE:
        return ERROR_PASSWORD_MUST_CHANGE_STR;
    case WinError::ERROR_DOMAIN_CONTROLLER_NOT_FOUND:
        return ERROR_DOMAIN_CONTROLLER_NOT_FOUND_STR;
    case WinError::ERROR_ACCOUNT_LOCKED_OUT:
        return ERROR_ACCOUNT_LOCKED_OUT_STR;
    case WinError::OR_INVALID_OXID:
        return OR_INVALID_OXID_STR;
    case WinError::OR_INVALID_OID:
        return OR_INVALID_OID_STR;
    case WinError::OR_INVALID_SET:
        return OR_INVALID_SET_STR;
    case WinError::RPC_S_SEND_INCOMPLETE:
        return RPC_S_SEND_INCOMPLETE_STR;
    case WinError::RPC_S_INVALID_ASYNC_HANDLE:
        return RPC_S_INVALID_ASYNC_HANDLE_STR;
    case WinError::RPC_S_INVALID_ASYNC_CALL:
        return RPC_S_INVALID_ASYNC_CALL_STR;
    case WinError::RPC_X_PIPE_CLOSED:
        return RPC_X_PIPE_CLOSED_STR;
    case WinError::RPC_X_PIPE_DISCIPLINE_ERROR:
        return RPC_X_PIPE_DISCIPLINE_ERROR_STR;
    case WinError::RPC_X_PIPE_EMPTY:
        return RPC_X_PIPE_EMPTY_STR;
    case WinError::ERROR_NO_SITENAME:
        return ERROR_NO_SITENAME_STR;
    case WinError::ERROR_CANT_ACCESS_FILE:
        return ERROR_CANT_ACCESS_FILE_STR;
    case WinError::ERROR_CANT_RESOLVE_FILENAME:
        return ERROR_CANT_RESOLVE_FILENAME_STR;
    case WinError::RPC_S_ENTRY_TYPE_MISMATCH:
        return RPC_S_ENTRY_TYPE_MISMATCH_STR;
    case WinError::RPC_S_NOT_ALL_OBJS_EXPORTED:
        return RPC_S_NOT_ALL_OBJS_EXPORTED_STR;
    case WinError::RPC_S_INTERFACE_NOT_EXPORTED:
        return RPC_S_INTERFACE_NOT_EXPORTED_STR;
    case WinError::RPC_S_PROFILE_NOT_ADDED:
        return RPC_S_PROFILE_NOT_ADDED_STR;
    case WinError::RPC_S_PRF_ELT_NOT_ADDED:
        return RPC_S_PRF_ELT_NOT_ADDED_STR;
    case WinError::RPC_S_PRF_ELT_NOT_REMOVED:
        return RPC_S_PRF_ELT_NOT_REMOVED_STR;
    case WinError::RPC_S_GRP_ELT_NOT_ADDED:
        return RPC_S_GRP_ELT_NOT_ADDED_STR;
    case WinError::RPC_S_GRP_ELT_NOT_REMOVED:
        return RPC_S_GRP_ELT_NOT_REMOVED_STR;
    case WinError::ERROR_KM_DRIVER_BLOCKED:
        return ERROR_KM_DRIVER_BLOCKED_STR;
    case WinError::ERROR_CONTEXT_EXPIRED:
        return ERROR_CONTEXT_EXPIRED_STR;
    case WinError::ERROR_PER_USER_TRUST_QUOTA_EXCEEDED:
        return ERROR_PER_USER_TRUST_QUOTA_EXCEEDED_STR;
    case WinError::ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED:
        return ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED_STR;
    case WinError::ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED:
        return ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED_STR;
    case WinError::ERROR_AUTHENTICATION_FIREWALL_FAILED:
        return ERROR_AUTHENTICATION_FIREWALL_FAILED_STR;
    case WinError::ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED:
        return ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED_STR;
    case WinError::ERROR_INVALID_PIXEL_FORMAT:
        return ERROR_INVALID_PIXEL_FORMAT_STR;
    case WinError::ERROR_BAD_DRIVER:
        return ERROR_BAD_DRIVER_STR;
    case WinError::ERROR_INVALID_WINDOW_STYLE:
        return ERROR_INVALID_WINDOW_STYLE_STR;
    case WinError::ERROR_METAFILE_NOT_SUPPORTED:
        return ERROR_METAFILE_NOT_SUPPORTED_STR;
    case WinError::ERROR_TRANSFORM_NOT_SUPPORTED:
        return ERROR_TRANSFORM_NOT_SUPPORTED_STR;
    case WinError::ERROR_CLIPPING_NOT_SUPPORTED:
        return ERROR_CLIPPING_NOT_SUPPORTED_STR;
    case WinError::ERROR_INVALID_CMM:
        return ERROR_INVALID_CMM_STR;
    case WinError::ERROR_INVALID_PROFILE:
        return ERROR_INVALID_PROFILE_STR;
    case WinError::ERROR_TAG_NOT_FOUND:
        return ERROR_TAG_NOT_FOUND_STR;
    case WinError::ERROR_TAG_NOT_PRESENT:
        return ERROR_TAG_NOT_PRESENT_STR;
    case WinError::ERROR_DUPLICATE_TAG:
        return ERROR_DUPLICATE_TAG_STR;
    case WinError::ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE:
        return ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE_STR;
    case WinError::ERROR_PROFILE_NOT_FOUND:
        return ERROR_PROFILE_NOT_FOUND_STR;
    case WinError::ERROR_INVALID_COLORSPACE:
        return ERROR_INVALID_COLORSPACE_STR;
    case WinError::ERROR_ICM_NOT_ENABLED:
        return ERROR_ICM_NOT_ENABLED_STR;
    case WinError::ERROR_DELETING_ICM_XFORM:
        return ERROR_DELETING_ICM_XFORM_STR;
    case WinError::ERROR_INVALID_TRANSFORM:
        return ERROR_INVALID_TRANSFORM_STR;
    case WinError::ERROR_COLORSPACE_MISMATCH:
        return ERROR_COLORSPACE_MISMATCH_STR;
    case WinError::ERROR_INVALID_COLORINDEX:
        return ERROR_INVALID_COLORINDEX_STR;
    case WinError::ERROR_CONNECTED_OTHER_PASSWORD:
        return ERROR_CONNECTED_OTHER_PASSWORD_STR;
    case WinError::ERROR_BAD_USERNAME:
        return ERROR_BAD_USERNAME_STR;
    case WinError::ERROR_NOT_CONNECTED:
        return ERROR_NOT_CONNECTED_STR;
    case WinError::ERROR_OPEN_FILES:
        return ERROR_OPEN_FILES_STR;
    case WinError::ERROR_ACTIVE_CONNECTIONS:
        return ERROR_ACTIVE_CONNECTIONS_STR;
    case WinError::ERROR_DEVICE_IN_USE:
        return ERROR_DEVICE_IN_USE_STR;
    case WinError::ERROR_UNKNOWN_PRINT_MONITOR:
        return ERROR_UNKNOWN_PRINT_MONITOR_STR;
    case WinError::ERROR_PRINTER_DRIVER_IN_USE:
        return ERROR_PRINTER_DRIVER_IN_USE_STR;
    case WinError::ERROR_SPOOL_FILE_NOT_FOUND:
        return ERROR_SPOOL_FILE_NOT_FOUND_STR;
    case WinError::ERROR_SPL_NO_STARTDOC:
        return ERROR_SPL_NO_STARTDOC_STR;
    case WinError::ERROR_SPL_NO_ADDJOB:
        return ERROR_SPL_NO_ADDJOB_STR;
    case WinError::ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED:
        return ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED_STR;
    case WinError::ERROR_PRINT_MONITOR_ALREADY_INSTALLED:
        return ERROR_PRINT_MONITOR_ALREADY_INSTALLED_STR;
    case WinError::ERROR_INVALID_PRINT_MONITOR:
        return ERROR_INVALID_PRINT_MONITOR_STR;
    case WinError::ERROR_PRINT_MONITOR_IN_USE:
        return ERROR_PRINT_MONITOR_IN_USE_STR;
    case WinError::ERROR_PRINTER_HAS_JOBS_QUEUED:
        return ERROR_PRINTER_HAS_JOBS_QUEUED_STR;
    case WinError::ERROR_SUCCESS_REBOOT_REQUIRED:
        return ERROR_SUCCESS_REBOOT_REQUIRED_STR;
    case WinError::ERROR_SUCCESS_RESTART_REQUIRED:
        return ERROR_SUCCESS_RESTART_REQUIRED_STR;
    case WinError::ERROR_PRINTER_NOT_FOUND:
        return ERROR_PRINTER_NOT_FOUND_STR;
    case WinError::ERROR_PRINTER_DRIVER_WARNED:
        return ERROR_PRINTER_DRIVER_WARNED_STR;
    case WinError::ERROR_PRINTER_DRIVER_BLOCKED:
        return ERROR_PRINTER_DRIVER_BLOCKED_STR;
    case WinError::ERROR_REQUEST_PAUSED:
        return ERROR_REQUEST_PAUSED_STR;
    case WinError::ERROR_WINS_INTERNAL:
        return ERROR_WINS_INTERNAL_STR;
    case WinError::ERROR_CAN_NOT_DEL_LOCAL_WINS:
        return ERROR_CAN_NOT_DEL_LOCAL_WINS_STR;
    case WinError::ERROR_STATIC_INIT:
        return ERROR_STATIC_INIT_STR;
    case WinError::ERROR_INC_BACKUP:
        return ERROR_INC_BACKUP_STR;
    case WinError::ERROR_FULL_BACKUP:
        return ERROR_FULL_BACKUP_STR;
    case WinError::ERROR_REC_NON_EXISTENT:
        return ERROR_REC_NON_EXISTENT_STR;
    case WinError::ERROR_RPL_NOT_ALLOWED:
        return ERROR_RPL_NOT_ALLOWED_STR;
    case WinError::ERROR_DHCP_ADDRESS_CONFLICT:
        return ERROR_DHCP_ADDRESS_CONFLICT_STR;
    case WinError::ERROR_WMI_GUID_NOT_FOUND:
        return ERROR_WMI_GUID_NOT_FOUND_STR;
    case WinError::ERROR_WMI_INSTANCE_NOT_FOUND:
        return ERROR_WMI_INSTANCE_NOT_FOUND_STR;
    case WinError::ERROR_WMI_ITEMID_NOT_FOUND:
        return ERROR_WMI_ITEMID_NOT_FOUND_STR;
    case WinError::ERROR_WMI_TRY_AGAIN:
        return ERROR_WMI_TRY_AGAIN_STR;
    case WinError::ERROR_WMI_DP_NOT_FOUND:
        return ERROR_WMI_DP_NOT_FOUND_STR;
    case WinError::ERROR_WMI_UNRESOLVED_INSTANCE_REF:
        return ERROR_WMI_UNRESOLVED_INSTANCE_REF_STR;
    case WinError::ERROR_WMI_ALREADY_ENABLED:
        return ERROR_WMI_ALREADY_ENABLED_STR;
    case WinError::ERROR_WMI_GUID_DISCONNECTED:
        return ERROR_WMI_GUID_DISCONNECTED_STR;
    case WinError::ERROR_WMI_SERVER_UNAVAILABLE:
        return ERROR_WMI_SERVER_UNAVAILABLE_STR;
    case WinError::ERROR_WMI_DP_FAILED:
        return ERROR_WMI_DP_FAILED_STR;
    case WinError::ERROR_WMI_INVALID_MOF:
        return ERROR_WMI_INVALID_MOF_STR;
    case WinError::ERROR_WMI_INVALID_REGINFO:
        return ERROR_WMI_INVALID_REGINFO_STR;
    case WinError::ERROR_WMI_ALREADY_DISABLED:
        return ERROR_WMI_ALREADY_DISABLED_STR;
    case WinError::ERROR_WMI_READ_ONLY:
        return ERROR_WMI_READ_ONLY_STR;
    case WinError::ERROR_WMI_SET_FAILURE:
        return ERROR_WMI_SET_FAILURE_STR;
    case WinError::ERROR_INVALID_MEDIA:
        return ERROR_INVALID_MEDIA_STR;
    case WinError::ERROR_INVALID_LIBRARY:
        return ERROR_INVALID_LIBRARY_STR;
    case WinError::ERROR_INVALID_MEDIA_POOL:
        return ERROR_INVALID_MEDIA_POOL_STR;
    case WinError::ERROR_DRIVE_MEDIA_MISMATCH:
        return ERROR_DRIVE_MEDIA_MISMATCH_STR;
    case WinError::ERROR_MEDIA_OFFLINE:
        return ERROR_MEDIA_OFFLINE_STR;
    case WinError::ERROR_LIBRARY_OFFLINE:
        return ERROR_LIBRARY_OFFLINE_STR;
    case WinError::ERROR_EMPTY:
        return ERROR_EMPTY_STR;
    case WinError::ERROR_NOT_EMPTY:
        return ERROR_NOT_EMPTY_STR;
    case WinError::ERROR_MEDIA_UNAVAILABLE:
        return ERROR_MEDIA_UNAVAILABLE_STR;
    case WinError::ERROR_RESOURCE_DISABLED:
        return ERROR_RESOURCE_DISABLED_STR;
    case WinError::ERROR_INVALID_CLEANER:
        return ERROR_INVALID_CLEANER_STR;
    case WinError::ERROR_UNABLE_TO_CLEAN:
        return ERROR_UNABLE_TO_CLEAN_STR;
    case WinError::ERROR_OBJECT_NOT_FOUND:
        return ERROR_OBJECT_NOT_FOUND_STR;
    case WinError::ERROR_DATABASE_FAILURE:
        return ERROR_DATABASE_FAILURE_STR;
    case WinError::ERROR_DATABASE_FULL:
        return ERROR_DATABASE_FULL_STR;
    case WinError::ERROR_MEDIA_INCOMPATIBLE:
        return ERROR_MEDIA_INCOMPATIBLE_STR;
    case WinError::ERROR_RESOURCE_NOT_PRESENT:
        return ERROR_RESOURCE_NOT_PRESENT_STR;
    case WinError::ERROR_INVALID_OPERATION:
        return ERROR_INVALID_OPERATION_STR;
    case WinError::ERROR_MEDIA_NOT_AVAILABLE:
        return ERROR_MEDIA_NOT_AVAILABLE_STR;
    case WinError::ERROR_DEVICE_NOT_AVAILABLE:
        return ERROR_DEVICE_NOT_AVAILABLE_STR;
    case WinError::ERROR_REQUEST_REFUSED:
        return ERROR_REQUEST_REFUSED_STR;
    case WinError::ERROR_INVALID_DRIVE_OBJECT:
        return ERROR_INVALID_DRIVE_OBJECT_STR;
    case WinError::ERROR_LIBRARY_FULL:
        return ERROR_LIBRARY_FULL_STR;
    case WinError::ERROR_MEDIUM_NOT_ACCESSIBLE:
        return ERROR_MEDIUM_NOT_ACCESSIBLE_STR;
    case WinError::ERROR_UNABLE_TO_LOAD_MEDIUM:
        return ERROR_UNABLE_TO_LOAD_MEDIUM_STR;
    case WinError::ERROR_UNABLE_TO_INVENTORY_DRIVE:
        return ERROR_UNABLE_TO_INVENTORY_DRIVE_STR;
    case WinError::ERROR_UNABLE_TO_INVENTORY_SLOT:
        return ERROR_UNABLE_TO_INVENTORY_SLOT_STR;
    case WinError::ERROR_UNABLE_TO_INVENTORY_TRANSPORT:
        return ERROR_UNABLE_TO_INVENTORY_TRANSPORT_STR;
    case WinError::ERROR_TRANSPORT_FULL:
        return ERROR_TRANSPORT_FULL_STR;
    case WinError::ERROR_CONTROLLING_IEPORT:
        return ERROR_CONTROLLING_IEPORT_STR;
    case WinError::ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA:
        return ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA_STR;
    case WinError::ERROR_CLEANER_SLOT_SET:
        return ERROR_CLEANER_SLOT_SET_STR;
    case WinError::ERROR_CLEANER_SLOT_NOT_SET:
        return ERROR_CLEANER_SLOT_NOT_SET_STR;
    case WinError::ERROR_CLEANER_CARTRIDGE_SPENT:
        return ERROR_CLEANER_CARTRIDGE_SPENT_STR;
    case WinError::ERROR_UNEXPECTED_OMID:
        return ERROR_UNEXPECTED_OMID_STR;
    case WinError::ERROR_CANT_DELETE_LAST_ITEM:
        return ERROR_CANT_DELETE_LAST_ITEM_STR;
    case WinError::ERROR_MESSAGE_EXCEEDS_MAX_SIZE:
        return ERROR_MESSAGE_EXCEEDS_MAX_SIZE_STR;
    case WinError::ERROR_VOLUME_CONTAINS_SYS_FILES:
        return ERROR_VOLUME_CONTAINS_SYS_FILES_STR;
    case WinError::ERROR_INDIGENOUS_TYPE:
        return ERROR_INDIGENOUS_TYPE_STR;
    case WinError::ERROR_NO_SUPPORTING_DRIVES:
        return ERROR_NO_SUPPORTING_DRIVES_STR;
    case WinError::ERROR_CLEANER_CARTRIDGE_INSTALLED:
        return ERROR_CLEANER_CARTRIDGE_INSTALLED_STR;
    case WinError::ERROR_FILE_OFFLINE:
        return ERROR_FILE_OFFLINE_STR;
    case WinError::ERROR_REMOTE_STORAGE_NOT_ACTIVE:
        return ERROR_REMOTE_STORAGE_NOT_ACTIVE_STR;
    case WinError::ERROR_REMOTE_STORAGE_MEDIA_ERROR:
        return ERROR_REMOTE_STORAGE_MEDIA_ERROR_STR;
    case WinError::ERROR_NOT_A_REPARSE_POINT:
        return ERROR_NOT_A_REPARSE_POINT_STR;
    case WinError::ERROR_REPARSE_ATTRIBUTE_CONFLICT:
        return ERROR_REPARSE_ATTRIBUTE_CONFLICT_STR;
    case WinError::ERROR_INVALID_REPARSE_DATA:
        return ERROR_INVALID_REPARSE_DATA_STR;
    case WinError::ERROR_REPARSE_TAG_INVALID:
        return ERROR_REPARSE_TAG_INVALID_STR;
    case WinError::ERROR_REPARSE_TAG_MISMATCH:
        return ERROR_REPARSE_TAG_MISMATCH_STR;
    case WinError::ERROR_VOLUME_NOT_SIS_ENABLED:
        return ERROR_VOLUME_NOT_SIS_ENABLED_STR;
    case WinError::ERROR_DEPENDENT_RESOURCE_EXISTS:
        return ERROR_DEPENDENT_RESOURCE_EXISTS_STR;
    case WinError::ERROR_DEPENDENCY_NOT_FOUND:
        return ERROR_DEPENDENCY_NOT_FOUND_STR;
    case WinError::ERROR_DEPENDENCY_ALREADY_EXISTS:
        return ERROR_DEPENDENCY_ALREADY_EXISTS_STR;
    case WinError::ERROR_RESOURCE_NOT_ONLINE:
        return ERROR_RESOURCE_NOT_ONLINE_STR;
    case WinError::ERROR_HOST_NODE_NOT_AVAILABLE:
        return ERROR_HOST_NODE_NOT_AVAILABLE_STR;
    case WinError::ERROR_RESOURCE_NOT_AVAILABLE:
        return ERROR_RESOURCE_NOT_AVAILABLE_STR;
    case WinError::ERROR_RESOURCE_NOT_FOUND:
        return ERROR_RESOURCE_NOT_FOUND_STR;
    case WinError::ERROR_SHUTDOWN_CLUSTER:
        return ERROR_SHUTDOWN_CLUSTER_STR;
    case WinError::ERROR_CANT_EVICT_ACTIVE_NODE:
        return ERROR_CANT_EVICT_ACTIVE_NODE_STR;
    case WinError::ERROR_OBJECT_ALREADY_EXISTS:
        return ERROR_OBJECT_ALREADY_EXISTS_STR;
    case WinError::ERROR_OBJECT_IN_LIST:
        return ERROR_OBJECT_IN_LIST_STR;
    case WinError::ERROR_GROUP_NOT_AVAILABLE:
        return ERROR_GROUP_NOT_AVAILABLE_STR;
    case WinError::ERROR_GROUP_NOT_FOUND:
        return ERROR_GROUP_NOT_FOUND_STR;
    case WinError::ERROR_GROUP_NOT_ONLINE:
        return ERROR_GROUP_NOT_ONLINE_STR;
    case WinError::ERROR_HOST_NODE_NOT_RESOURCE_OWNER:
        return ERROR_HOST_NODE_NOT_RESOURCE_OWNER_STR;
    case WinError::ERROR_HOST_NODE_NOT_GROUP_OWNER:
        return ERROR_HOST_NODE_NOT_GROUP_OWNER_STR;
    case WinError::ERROR_RESMON_CREATE_FAILED:
        return ERROR_RESMON_CREATE_FAILED_STR;
    case WinError::ERROR_RESMON_ONLINE_FAILED:
        return ERROR_RESMON_ONLINE_FAILED_STR;
    case WinError::ERROR_RESOURCE_ONLINE:
        return ERROR_RESOURCE_ONLINE_STR;
    case WinError::ERROR_QUORUM_RESOURCE:
        return ERROR_QUORUM_RESOURCE_STR;
    case WinError::ERROR_NOT_QUORUM_CAPABLE:
        return ERROR_NOT_QUORUM_CAPABLE_STR;
    case WinError::ERROR_CLUSTER_SHUTTING_DOWN:
        return ERROR_CLUSTER_SHUTTING_DOWN_STR;
    case WinError::ERROR_INVALID_STATE:
        return ERROR_INVALID_STATE_STR;
    case WinError::ERROR_RESOURCE_PROPERTIES_STORED:
        return ERROR_RESOURCE_PROPERTIES_STORED_STR;
    case WinError::ERROR_NOT_QUORUM_CLASS:
        return ERROR_NOT_QUORUM_CLASS_STR;
    case WinError::ERROR_CORE_RESOURCE:
        return ERROR_CORE_RESOURCE_STR;
    case WinError::ERROR_QUORUM_RESOURCE_ONLINE_FAILED:
        return ERROR_QUORUM_RESOURCE_ONLINE_FAILED_STR;
    case WinError::ERROR_QUORUMLOG_OPEN_FAILED:
        return ERROR_QUORUMLOG_OPEN_FAILED_STR;
    case WinError::ERROR_CLUSTERLOG_CORRUPT:
        return ERROR_CLUSTERLOG_CORRUPT_STR;
    case WinError::ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE:
        return ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE_STR;
    case WinError::ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE:
        return ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE_STR;
    case WinError::ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND:
        return ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND_STR;
    case WinError::ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE:
        return ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE_STR;
    case WinError::ERROR_QUORUM_OWNER_ALIVE:
        return ERROR_QUORUM_OWNER_ALIVE_STR;
    case WinError::ERROR_NETWORK_NOT_AVAILABLE:
        return ERROR_NETWORK_NOT_AVAILABLE_STR;
    case WinError::ERROR_NODE_NOT_AVAILABLE:
        return ERROR_NODE_NOT_AVAILABLE_STR;
    case WinError::ERROR_ALL_NODES_NOT_AVAILABLE:
        return ERROR_ALL_NODES_NOT_AVAILABLE_STR;
    case WinError::ERROR_RESOURCE_FAILED:
        return ERROR_RESOURCE_FAILED_STR;
    case WinError::ERROR_CLUSTER_INVALID_NODE:
        return ERROR_CLUSTER_INVALID_NODE_STR;
    case WinError::ERROR_CLUSTER_NODE_EXISTS:
        return ERROR_CLUSTER_NODE_EXISTS_STR;
    case WinError::ERROR_CLUSTER_JOIN_IN_PROGRESS:
        return ERROR_CLUSTER_JOIN_IN_PROGRESS_STR;
    case WinError::ERROR_CLUSTER_NODE_NOT_FOUND:
        return ERROR_CLUSTER_NODE_NOT_FOUND_STR;
    case WinError::ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND:
        return ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND_STR;
    case WinError::ERROR_CLUSTER_NETWORK_EXISTS:
        return ERROR_CLUSTER_NETWORK_EXISTS_STR;
    case WinError::ERROR_CLUSTER_NETWORK_NOT_FOUND:
        return ERROR_CLUSTER_NETWORK_NOT_FOUND_STR;
    case WinError::ERROR_CLUSTER_NETINTERFACE_EXISTS:
        return ERROR_CLUSTER_NETINTERFACE_EXISTS_STR;
    case WinError::ERROR_CLUSTER_NETINTERFACE_NOT_FOUND:
        return ERROR_CLUSTER_NETINTERFACE_NOT_FOUND_STR;
    case WinError::ERROR_CLUSTER_INVALID_REQUEST:
        return ERROR_CLUSTER_INVALID_REQUEST_STR;
    case WinError::ERROR_CLUSTER_INVALID_NETWORK_PROVIDER:
        return ERROR_CLUSTER_INVALID_NETWORK_PROVIDER_STR;
    case WinError::ERROR_CLUSTER_NODE_DOWN:
        return ERROR_CLUSTER_NODE_DOWN_STR;
    case WinError::ERROR_CLUSTER_NODE_UNREACHABLE:
        return ERROR_CLUSTER_NODE_UNREACHABLE_STR;
    case WinError::ERROR_CLUSTER_NODE_NOT_MEMBER:
        return ERROR_CLUSTER_NODE_NOT_MEMBER_STR;
    case WinError::ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS:
        return ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS_STR;
    case WinError::ERROR_CLUSTER_INVALID_NETWORK:
        return ERROR_CLUSTER_INVALID_NETWORK_STR;
    case WinError::ERROR_CLUSTER_NODE_UP:
        return ERROR_CLUSTER_NODE_UP_STR;
    case WinError::ERROR_CLUSTER_IPADDR_IN_USE:
        return ERROR_CLUSTER_IPADDR_IN_USE_STR;
    case WinError::ERROR_CLUSTER_NODE_NOT_PAUSED:
        return ERROR_CLUSTER_NODE_NOT_PAUSED_STR;
    case WinError::ERROR_CLUSTER_NO_SECURITY_CONTEXT:
        return ERROR_CLUSTER_NO_SECURITY_CONTEXT_STR;
    case WinError::ERROR_CLUSTER_NETWORK_NOT_INTERNAL:
        return ERROR_CLUSTER_NETWORK_NOT_INTERNAL_STR;
    case WinError::ERROR_CLUSTER_NODE_ALREADY_UP:
        return ERROR_CLUSTER_NODE_ALREADY_UP_STR;
    case WinError::ERROR_CLUSTER_NODE_ALREADY_DOWN:
        return ERROR_CLUSTER_NODE_ALREADY_DOWN_STR;
    case WinError::ERROR_CLUSTER_NETWORK_ALREADY_ONLINE:
        return ERROR_CLUSTER_NETWORK_ALREADY_ONLINE_STR;
    case WinError::ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE:
        return ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE_STR;
    case WinError::ERROR_CLUSTER_NODE_ALREADY_MEMBER:
        return ERROR_CLUSTER_NODE_ALREADY_MEMBER_STR;
    case WinError::ERROR_CLUSTER_LAST_INTERNAL_NETWORK:
        return ERROR_CLUSTER_LAST_INTERNAL_NETWORK_STR;
    case WinError::ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS:
        return ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS_STR;
    case WinError::ERROR_INVALID_OPERATION_ON_QUORUM:
        return ERROR_INVALID_OPERATION_ON_QUORUM_STR;
    case WinError::ERROR_DEPENDENCY_NOT_ALLOWED:
        return ERROR_DEPENDENCY_NOT_ALLOWED_STR;
    case WinError::ERROR_CLUSTER_NODE_PAUSED:
        return ERROR_CLUSTER_NODE_PAUSED_STR;
    case WinError::ERROR_NODE_CANT_HOST_RESOURCE:
        return ERROR_NODE_CANT_HOST_RESOURCE_STR;
    case WinError::ERROR_CLUSTER_NODE_NOT_READY:
        return ERROR_CLUSTER_NODE_NOT_READY_STR;
    case WinError::ERROR_CLUSTER_NODE_SHUTTING_DOWN:
        return ERROR_CLUSTER_NODE_SHUTTING_DOWN_STR;
    case WinError::ERROR_CLUSTER_JOIN_ABORTED:
        return ERROR_CLUSTER_JOIN_ABORTED_STR;
    case WinError::ERROR_CLUSTER_INCOMPATIBLE_VERSIONS:
        return ERROR_CLUSTER_INCOMPATIBLE_VERSIONS_STR;
    case WinError::ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED:
        return ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED_STR;
    case WinError::ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED:
        return ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED_STR;
    case WinError::ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND:
        return ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND_STR;
    case WinError::ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED:
        return ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED_STR;
    case WinError::ERROR_CLUSTER_RESNAME_NOT_FOUND:
        return ERROR_CLUSTER_RESNAME_NOT_FOUND_STR;
    case WinError::ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED:
        return ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED_STR;
    case WinError::ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST:
        return ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST_STR;
    case WinError::ERROR_CLUSTER_DATABASE_SEQMISMATCH:
        return ERROR_CLUSTER_DATABASE_SEQMISMATCH_STR;
    case WinError::ERROR_RESMON_INVALID_STATE:
        return ERROR_RESMON_INVALID_STATE_STR;
    case WinError::ERROR_CLUSTER_GUM_NOT_LOCKER:
        return ERROR_CLUSTER_GUM_NOT_LOCKER_STR;
    case WinError::ERROR_QUORUM_DISK_NOT_FOUND:
        return ERROR_QUORUM_DISK_NOT_FOUND_STR;
    case WinError::ERROR_DATABASE_BACKUP_CORRUPT:
        return ERROR_DATABASE_BACKUP_CORRUPT_STR;
    case WinError::ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT:
        return ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT_STR;
    case WinError::ERROR_RESOURCE_PROPERTY_UNCHANGEABLE:
        return ERROR_RESOURCE_PROPERTY_UNCHANGEABLE_STR;
    case WinError::ERROR_ENCRYPTION_FAILED:
        return ERROR_ENCRYPTION_FAILED_STR;
    case WinError::ERROR_DECRYPTION_FAILED:
        return ERROR_DECRYPTION_FAILED_STR;
    case WinError::ERROR_FILE_ENCRYPTED:
        return ERROR_FILE_ENCRYPTED_STR;
    case WinError::ERROR_NO_RECOVERY_POLICY:
        return ERROR_NO_RECOVERY_POLICY_STR;
    case WinError::ERROR_NO_EFS:
        return ERROR_NO_EFS_STR;
    case WinError::ERROR_WRONG_EFS:
        return ERROR_WRONG_EFS_STR;
    case WinError::ERROR_NO_USER_KEYS:
        return ERROR_NO_USER_KEYS_STR;
    case WinError::ERROR_FILE_NOT_ENCRYPTED:
        return ERROR_FILE_NOT_ENCRYPTED_STR;
    case WinError::ERROR_NOT_EXPORT_FORMAT:
        return ERROR_NOT_EXPORT_FORMAT_STR;
    case WinError::ERROR_FILE_READ_ONLY:
        return ERROR_FILE_READ_ONLY_STR;
    case WinError::ERROR_DIR_EFS_DISALLOWED:
        return ERROR_DIR_EFS_DISALLOWED_STR;
    case WinError::ERROR_EFS_SERVER_NOT_TRUSTED:
        return ERROR_EFS_SERVER_NOT_TRUSTED_STR;
    case WinError::ERROR_EFS_ALG_BLOB_TOO_BIG:
        return ERROR_EFS_ALG_BLOB_TOO_BIG_STR;
    case WinError::ERROR_NO_BROWSER_SERVERS_FOUND:
        return ERROR_NO_BROWSER_SERVERS_FOUND_STR;
    case WinError::SCHED_E_SERVICE_NOT_LOCALSYSTEM:
        return SCHED_E_SERVICE_NOT_LOCALSYSTEM_STR;
    case WinError::ERROR_CTX_WINSTATION_NAME_INVALID:
        return ERROR_CTX_WINSTATION_NAME_INVALID_STR;
    case WinError::ERROR_CTX_INVALID_PD:
        return ERROR_CTX_INVALID_PD_STR;
    case WinError::ERROR_CTX_PD_NOT_FOUND:
        return ERROR_CTX_PD_NOT_FOUND_STR;
    case WinError::ERROR_CTX_WD_NOT_FOUND:
        return ERROR_CTX_WD_NOT_FOUND_STR;
    case WinError::ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY:
        return ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY_STR;
    case WinError::ERROR_CTX_SERVICE_NAME_COLLISION:
        return ERROR_CTX_SERVICE_NAME_COLLISION_STR;
    case WinError::ERROR_CTX_CLOSE_PENDING:
        return ERROR_CTX_CLOSE_PENDING_STR;
    case WinError::ERROR_CTX_NO_OUTBUF:
        return ERROR_CTX_NO_OUTBUF_STR;
    case WinError::ERROR_CTX_MODEM_INF_NOT_FOUND:
        return ERROR_CTX_MODEM_INF_NOT_FOUND_STR;
    case WinError::ERROR_CTX_INVALID_MODEMNAME:
        return ERROR_CTX_INVALID_MODEMNAME_STR;
    case WinError::ERROR_CTX_MODEM_RESPONSE_ERROR:
        return ERROR_CTX_MODEM_RESPONSE_ERROR_STR;
    case WinError::ERROR_CTX_MODEM_RESPONSE_TIMEOUT:
        return ERROR_CTX_MODEM_RESPONSE_TIMEOUT_STR;
    case WinError::ERROR_CTX_MODEM_RESPONSE_NO_CARRIER:
        return ERROR_CTX_MODEM_RESPONSE_NO_CARRIER_STR;
    case WinError::ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE:
        return ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE_STR;
    case WinError::ERROR_CTX_MODEM_RESPONSE_BUSY:
        return ERROR_CTX_MODEM_RESPONSE_BUSY_STR;
    case WinError::ERROR_CTX_MODEM_RESPONSE_VOICE:
        return ERROR_CTX_MODEM_RESPONSE_VOICE_STR;
    case WinError::ERROR_CTX_TD_ERROR:
        return ERROR_CTX_TD_ERROR_STR;
    case WinError::ERROR_CTX_WINSTATION_NOT_FOUND:
        return ERROR_CTX_WINSTATION_NOT_FOUND_STR;
    case WinError::ERROR_CTX_WINSTATION_ALREADY_EXISTS:
        return ERROR_CTX_WINSTATION_ALREADY_EXISTS_STR;
    case WinError::ERROR_CTX_WINSTATION_BUSY:
        return ERROR_CTX_WINSTATION_BUSY_STR;
    case WinError::ERROR_CTX_BAD_VIDEO_MODE:
        return ERROR_CTX_BAD_VIDEO_MODE_STR;
    case WinError::ERROR_CTX_GRAPHICS_INVALID:
        return ERROR_CTX_GRAPHICS_INVALID_STR;
    case WinError::ERROR_CTX_LOGON_DISABLED:
        return ERROR_CTX_LOGON_DISABLED_STR;
    case WinError::ERROR_CTX_NOT_CONSOLE:
        return ERROR_CTX_NOT_CONSOLE_STR;
    case WinError::ERROR_CTX_CLIENT_QUERY_TIMEOUT:
        return ERROR_CTX_CLIENT_QUERY_TIMEOUT_STR;
    case WinError::ERROR_CTX_CONSOLE_DISCONNECT:
        return ERROR_CTX_CONSOLE_DISCONNECT_STR;
    case WinError::ERROR_CTX_CONSOLE_CONNECT:
        return ERROR_CTX_CONSOLE_CONNECT_STR;
    case WinError::ERROR_CTX_SHADOW_DENIED:
        return ERROR_CTX_SHADOW_DENIED_STR;
    case WinError::ERROR_CTX_WINSTATION_ACCESS_DENIED:
        return ERROR_CTX_WINSTATION_ACCESS_DENIED_STR;
    case WinError::ERROR_CTX_INVALID_WD:
        return ERROR_CTX_INVALID_WD_STR;
    case WinError::ERROR_CTX_SHADOW_INVALID:
        return ERROR_CTX_SHADOW_INVALID_STR;
    case WinError::ERROR_CTX_SHADOW_DISABLED:
        return ERROR_CTX_SHADOW_DISABLED_STR;
    case WinError::ERROR_CTX_CLIENT_LICENSE_IN_USE:
        return ERROR_CTX_CLIENT_LICENSE_IN_USE_STR;
    case WinError::ERROR_CTX_CLIENT_LICENSE_NOT_SET:
        return ERROR_CTX_CLIENT_LICENSE_NOT_SET_STR;
    case WinError::ERROR_CTX_LICENSE_NOT_AVAILABLE:
        return ERROR_CTX_LICENSE_NOT_AVAILABLE_STR;
    case WinError::ERROR_CTX_LICENSE_CLIENT_INVALID:
        return ERROR_CTX_LICENSE_CLIENT_INVALID_STR;
    case WinError::ERROR_CTX_LICENSE_EXPIRED:
        return ERROR_CTX_LICENSE_EXPIRED_STR;
    case WinError::ERROR_CTX_SHADOW_NOT_RUNNING:
        return ERROR_CTX_SHADOW_NOT_RUNNING_STR;
    case WinError::ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE:
        return ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE_STR;
    case WinError::FRS_ERR_INVALID_API_SEQUENCE:
        return FRS_ERR_INVALID_API_SEQUENCE_STR;
    case WinError::FRS_ERR_STARTING_SERVICE:
        return FRS_ERR_STARTING_SERVICE_STR;
    case WinError::FRS_ERR_STOPPING_SERVICE:
        return FRS_ERR_STOPPING_SERVICE_STR;
    case WinError::FRS_ERR_INTERNAL_API:
        return FRS_ERR_INTERNAL_API_STR;
    case WinError::FRS_ERR_INTERNAL:
        return FRS_ERR_INTERNAL_STR;
    case WinError::FRS_ERR_SERVICE_COMM:
        return FRS_ERR_SERVICE_COMM_STR;
    case WinError::FRS_ERR_INSUFFICIENT_PRIV:
        return FRS_ERR_INSUFFICIENT_PRIV_STR;
    case WinError::FRS_ERR_AUTHENTICATION:
        return FRS_ERR_AUTHENTICATION_STR;
    case WinError::FRS_ERR_PARENT_INSUFFICIENT_PRIV:
        return FRS_ERR_PARENT_INSUFFICIENT_PRIV_STR;
    case WinError::FRS_ERR_PARENT_AUTHENTICATION:
        return FRS_ERR_PARENT_AUTHENTICATION_STR;
    case WinError::FRS_ERR_CHILD_TO_PARENT_COMM:
        return FRS_ERR_CHILD_TO_PARENT_COMM_STR;
    case WinError::FRS_ERR_PARENT_TO_CHILD_COMM:
        return FRS_ERR_PARENT_TO_CHILD_COMM_STR;
    case WinError::FRS_ERR_SYSVOL_POPULATE:
        return FRS_ERR_SYSVOL_POPULATE_STR;
    case WinError::FRS_ERR_SYSVOL_POPULATE_TIMEOUT:
        return FRS_ERR_SYSVOL_POPULATE_TIMEOUT_STR;
    case WinError::FRS_ERR_SYSVOL_IS_BUSY:
        return FRS_ERR_SYSVOL_IS_BUSY_STR;
    case WinError::FRS_ERR_SYSVOL_DEMOTE:
        return FRS_ERR_SYSVOL_DEMOTE_STR;
    case WinError::FRS_ERR_INVALID_SERVICE_PARAMETER:
        return FRS_ERR_INVALID_SERVICE_PARAMETER_STR;
    case WinError::ERROR_DS_NOT_INSTALLED:
        return ERROR_DS_NOT_INSTALLED_STR;
    case WinError::ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY:
        return ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY_STR;
    case WinError::ERROR_DS_NO_ATTRIBUTE_OR_VALUE:
        return ERROR_DS_NO_ATTRIBUTE_OR_VALUE_STR;
    case WinError::ERROR_DS_INVALID_ATTRIBUTE_SYNTAX:
        return ERROR_DS_INVALID_ATTRIBUTE_SYNTAX_STR;
    case WinError::ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED:
        return ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED_STR;
    case WinError::ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS:
        return ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS_STR;
    case WinError::ERROR_DS_BUSY:
        return ERROR_DS_BUSY_STR;
    case WinError::ERROR_DS_UNAVAILABLE:
        return ERROR_DS_UNAVAILABLE_STR;
    case WinError::ERROR_DS_NO_RIDS_ALLOCATED:
        return ERROR_DS_NO_RIDS_ALLOCATED_STR;
    case WinError::ERROR_DS_NO_MORE_RIDS:
        return ERROR_DS_NO_MORE_RIDS_STR;
    case WinError::ERROR_DS_INCORRECT_ROLE_OWNER:
        return ERROR_DS_INCORRECT_ROLE_OWNER_STR;
    case WinError::ERROR_DS_RIDMGR_INIT_ERROR:
        return ERROR_DS_RIDMGR_INIT_ERROR_STR;
    case WinError::ERROR_DS_OBJ_CLASS_VIOLATION:
        return ERROR_DS_OBJ_CLASS_VIOLATION_STR;
    case WinError::ERROR_DS_CANT_ON_NON_LEAF:
        return ERROR_DS_CANT_ON_NON_LEAF_STR;
    case WinError::ERROR_DS_CANT_ON_RDN:
        return ERROR_DS_CANT_ON_RDN_STR;
    case WinError::ERROR_DS_CANT_MOD_OBJ_CLASS:
        return ERROR_DS_CANT_MOD_OBJ_CLASS_STR;
    case WinError::ERROR_DS_CROSS_DOM_MOVE_ERROR:
        return ERROR_DS_CROSS_DOM_MOVE_ERROR_STR;
    case WinError::ERROR_DS_GC_NOT_AVAILABLE:
        return ERROR_DS_GC_NOT_AVAILABLE_STR;
    case WinError::ERROR_SHARED_POLICY:
        return ERROR_SHARED_POLICY_STR;
    case WinError::ERROR_POLICY_OBJECT_NOT_FOUND:
        return ERROR_POLICY_OBJECT_NOT_FOUND_STR;
    case WinError::ERROR_POLICY_ONLY_IN_DS:
        return ERROR_POLICY_ONLY_IN_DS_STR;
    case WinError::ERROR_PROMOTION_ACTIVE:
        return ERROR_PROMOTION_ACTIVE_STR;
    case WinError::ERROR_NO_PROMOTION_ACTIVE:
        return ERROR_NO_PROMOTION_ACTIVE_STR;
    case WinError::ERROR_DS_OPERATIONS_ERROR:
        return ERROR_DS_OPERATIONS_ERROR_STR;
    case WinError::ERROR_DS_PROTOCOL_ERROR:
        return ERROR_DS_PROTOCOL_ERROR_STR;
    case WinError::ERROR_DS_TIMELIMIT_EXCEEDED:
        return ERROR_DS_TIMELIMIT_EXCEEDED_STR;
    case WinError::ERROR_DS_SIZELIMIT_EXCEEDED:
        return ERROR_DS_SIZELIMIT_EXCEEDED_STR;
    case WinError::ERROR_DS_ADMIN_LIMIT_EXCEEDED:
        return ERROR_DS_ADMIN_LIMIT_EXCEEDED_STR;
    case WinError::ERROR_DS_COMPARE_FALSE:
        return ERROR_DS_COMPARE_FALSE_STR;
    case WinError::ERROR_DS_COMPARE_TRUE:
        return ERROR_DS_COMPARE_TRUE_STR;
    case WinError::ERROR_DS_AUTH_METHOD_NOT_SUPPORTED:
        return ERROR_DS_AUTH_METHOD_NOT_SUPPORTED_STR;
    case WinError::ERROR_DS_STRONG_AUTH_REQUIRED:
        return ERROR_DS_STRONG_AUTH_REQUIRED_STR;
    case WinError::ERROR_DS_INAPPROPRIATE_AUTH:
        return ERROR_DS_INAPPROPRIATE_AUTH_STR;
    case WinError::ERROR_DS_AUTH_UNKNOWN:
        return ERROR_DS_AUTH_UNKNOWN_STR;
    case WinError::ERROR_DS_REFERRAL:
        return ERROR_DS_REFERRAL_STR;
    case WinError::ERROR_DS_UNAVAILABLE_CRIT_EXTENSION:
        return ERROR_DS_UNAVAILABLE_CRIT_EXTENSION_STR;
    case WinError::ERROR_DS_CONFIDENTIALITY_REQUIRED:
        return ERROR_DS_CONFIDENTIALITY_REQUIRED_STR;
    case WinError::ERROR_DS_INAPPROPRIATE_MATCHING:
        return ERROR_DS_INAPPROPRIATE_MATCHING_STR;
    case WinError::ERROR_DS_CONSTRAINT_VIOLATION:
        return ERROR_DS_CONSTRAINT_VIOLATION_STR;
    case WinError::ERROR_DS_NO_SUCH_OBJECT:
        return ERROR_DS_NO_SUCH_OBJECT_STR;
    case WinError::ERROR_DS_ALIAS_PROBLEM:
        return ERROR_DS_ALIAS_PROBLEM_STR;
    case WinError::ERROR_DS_INVALID_DN_SYNTAX:
        return ERROR_DS_INVALID_DN_SYNTAX_STR;
    case WinError::ERROR_DS_IS_LEAF:
        return ERROR_DS_IS_LEAF_STR;
    case WinError::ERROR_DS_ALIAS_DEREF_PROBLEM:
        return ERROR_DS_ALIAS_DEREF_PROBLEM_STR;
    case WinError::ERROR_DS_UNWILLING_TO_PERFORM:
        return ERROR_DS_UNWILLING_TO_PERFORM_STR;
    case WinError::ERROR_DS_LOOP_DETECT:
        return ERROR_DS_LOOP_DETECT_STR;
    case WinError::ERROR_DS_NAMING_VIOLATION:
        return ERROR_DS_NAMING_VIOLATION_STR;
    case WinError::ERROR_DS_OBJECT_RESULTS_TOO_LARGE:
        return ERROR_DS_OBJECT_RESULTS_TOO_LARGE_STR;
    case WinError::ERROR_DS_AFFECTS_MULTIPLE_DSAS:
        return ERROR_DS_AFFECTS_MULTIPLE_DSAS_STR;
    case WinError::ERROR_DS_SERVER_DOWN:
        return ERROR_DS_SERVER_DOWN_STR;
    case WinError::ERROR_DS_LOCAL_ERROR:
        return ERROR_DS_LOCAL_ERROR_STR;
    case WinError::ERROR_DS_ENCODING_ERROR:
        return ERROR_DS_ENCODING_ERROR_STR;
    case WinError::ERROR_DS_DECODING_ERROR:
        return ERROR_DS_DECODING_ERROR_STR;
    case WinError::ERROR_DS_FILTER_UNKNOWN:
        return ERROR_DS_FILTER_UNKNOWN_STR;
    case WinError::ERROR_DS_PARAM_ERROR:
        return ERROR_DS_PARAM_ERROR_STR;
    case WinError::ERROR_DS_NOT_SUPPORTED:
        return ERROR_DS_NOT_SUPPORTED_STR;
    case WinError::ERROR_DS_NO_RESULTS_RETURNED:
        return ERROR_DS_NO_RESULTS_RETURNED_STR;
    case WinError::ERROR_DS_CONTROL_NOT_FOUND:
        return ERROR_DS_CONTROL_NOT_FOUND_STR;
    case WinError::ERROR_DS_CLIENT_LOOP:
        return ERROR_DS_CLIENT_LOOP_STR;
    case WinError::ERROR_DS_REFERRAL_LIMIT_EXCEEDED:
        return ERROR_DS_REFERRAL_LIMIT_EXCEEDED_STR;
    case WinError::ERROR_DS_ROOT_MUST_BE_NC:
        return ERROR_DS_ROOT_MUST_BE_NC_STR;
    case WinError::ERROR_DS_ADD_REPLICA_INHIBITED:
        return ERROR_DS_ADD_REPLICA_INHIBITED_STR;
    case WinError::ERROR_DS_ATT_NOT_DEF_IN_SCHEMA:
        return ERROR_DS_ATT_NOT_DEF_IN_SCHEMA_STR;
    case WinError::ERROR_DS_MAX_OBJ_SIZE_EXCEEDED:
        return ERROR_DS_MAX_OBJ_SIZE_EXCEEDED_STR;
    case WinError::ERROR_DS_OBJ_STRING_NAME_EXISTS:
        return ERROR_DS_OBJ_STRING_NAME_EXISTS_STR;
    case WinError::ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA:
        return ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA_STR;
    case WinError::ERROR_DS_RDN_DOESNT_MATCH_SCHEMA:
        return ERROR_DS_RDN_DOESNT_MATCH_SCHEMA_STR;
    case WinError::ERROR_DS_NO_REQUESTED_ATTS_FOUND:
        return ERROR_DS_NO_REQUESTED_ATTS_FOUND_STR;
    case WinError::ERROR_DS_USER_BUFFER_TO_SMALL:
        return ERROR_DS_USER_BUFFER_TO_SMALL_STR;
    case WinError::ERROR_DS_ATT_IS_NOT_ON_OBJ:
        return ERROR_DS_ATT_IS_NOT_ON_OBJ_STR;
    case WinError::ERROR_DS_ILLEGAL_MOD_OPERATION:
        return ERROR_DS_ILLEGAL_MOD_OPERATION_STR;
    case WinError::ERROR_DS_OBJ_TOO_LARGE:
        return ERROR_DS_OBJ_TOO_LARGE_STR;
    case WinError::ERROR_DS_BAD_INSTANCE_TYPE:
        return ERROR_DS_BAD_INSTANCE_TYPE_STR;
    case WinError::ERROR_DS_MASTERDSA_REQUIRED:
        return ERROR_DS_MASTERDSA_REQUIRED_STR;
    case WinError::ERROR_DS_OBJECT_CLASS_REQUIRED:
        return ERROR_DS_OBJECT_CLASS_REQUIRED_STR;
    case WinError::ERROR_DS_MISSING_REQUIRED_ATT:
        return ERROR_DS_MISSING_REQUIRED_ATT_STR;
    case WinError::ERROR_DS_ATT_NOT_DEF_FOR_CLASS:
        return ERROR_DS_ATT_NOT_DEF_FOR_CLASS_STR;
    case WinError::ERROR_DS_ATT_ALREADY_EXISTS:
        return ERROR_DS_ATT_ALREADY_EXISTS_STR;
    case WinError::ERROR_DS_CANT_ADD_ATT_VALUES:
        return ERROR_DS_CANT_ADD_ATT_VALUES_STR;
    case WinError::ERROR_DS_SINGLE_VALUE_CONSTRAINT:
        return ERROR_DS_SINGLE_VALUE_CONSTRAINT_STR;
    case WinError::ERROR_DS_RANGE_CONSTRAINT:
        return ERROR_DS_RANGE_CONSTRAINT_STR;
    case WinError::ERROR_DS_ATT_VAL_ALREADY_EXISTS:
        return ERROR_DS_ATT_VAL_ALREADY_EXISTS_STR;
    case WinError::ERROR_DS_CANT_REM_MISSING_ATT:
        return ERROR_DS_CANT_REM_MISSING_ATT_STR;
    case WinError::ERROR_DS_CANT_REM_MISSING_ATT_VAL:
        return ERROR_DS_CANT_REM_MISSING_ATT_VAL_STR;
    case WinError::ERROR_DS_ROOT_CANT_BE_SUBREF:
        return ERROR_DS_ROOT_CANT_BE_SUBREF_STR;
    case WinError::ERROR_DS_NO_CHAINING:
        return ERROR_DS_NO_CHAINING_STR;
    case WinError::ERROR_DS_NO_CHAINED_EVAL:
        return ERROR_DS_NO_CHAINED_EVAL_STR;
    case WinError::ERROR_DS_NO_PARENT_OBJECT:
        return ERROR_DS_NO_PARENT_OBJECT_STR;
    case WinError::ERROR_DS_PARENT_IS_AN_ALIAS:
        return ERROR_DS_PARENT_IS_AN_ALIAS_STR;
    case WinError::ERROR_DS_CANT_MIX_MASTER_AND_REPS:
        return ERROR_DS_CANT_MIX_MASTER_AND_REPS_STR;
    case WinError::ERROR_DS_CHILDREN_EXIST:
        return ERROR_DS_CHILDREN_EXIST_STR;
    case WinError::ERROR_DS_OBJ_NOT_FOUND:
        return ERROR_DS_OBJ_NOT_FOUND_STR;
    case WinError::ERROR_DS_ALIASED_OBJ_MISSING:
        return ERROR_DS_ALIASED_OBJ_MISSING_STR;
    case WinError::ERROR_DS_BAD_NAME_SYNTAX:
        return ERROR_DS_BAD_NAME_SYNTAX_STR;
    case WinError::ERROR_DS_ALIAS_POINTS_TO_ALIAS:
        return ERROR_DS_ALIAS_POINTS_TO_ALIAS_STR;
    case WinError::ERROR_DS_CANT_DEREF_ALIAS:
        return ERROR_DS_CANT_DEREF_ALIAS_STR;
    case WinError::ERROR_DS_OUT_OF_SCOPE:
        return ERROR_DS_OUT_OF_SCOPE_STR;
    case WinError::ERROR_DS_CANT_DELETE_DSA_OBJ:
        return ERROR_DS_CANT_DELETE_DSA_OBJ_STR;
    case WinError::ERROR_DS_GENERIC_ERROR:
        return ERROR_DS_GENERIC_ERROR_STR;
    case WinError::ERROR_DS_DSA_MUST_BE_INT_MASTER:
        return ERROR_DS_DSA_MUST_BE_INT_MASTER_STR;
    case WinError::ERROR_DS_CLASS_NOT_DSA:
        return ERROR_DS_CLASS_NOT_DSA_STR;
    case WinError::ERROR_DS_INSUFF_ACCESS_RIGHTS:
        return ERROR_DS_INSUFF_ACCESS_RIGHTS_STR;
    case WinError::ERROR_DS_ILLEGAL_SUPERIOR:
        return ERROR_DS_ILLEGAL_SUPERIOR_STR;
    case WinError::ERROR_DS_ATTRIBUTE_OWNED_BY_SAM:
        return ERROR_DS_ATTRIBUTE_OWNED_BY_SAM_STR;
    case WinError::ERROR_DS_NAME_TOO_MANY_PARTS:
        return ERROR_DS_NAME_TOO_MANY_PARTS_STR;
    case WinError::ERROR_DS_NAME_TOO_LONG:
        return ERROR_DS_NAME_TOO_LONG_STR;
    case WinError::ERROR_DS_NAME_VALUE_TOO_LONG:
        return ERROR_DS_NAME_VALUE_TOO_LONG_STR;
    case WinError::ERROR_DS_NAME_UNPARSEABLE:
        return ERROR_DS_NAME_UNPARSEABLE_STR;
    case WinError::ERROR_DS_NAME_TYPE_UNKNOWN:
        return ERROR_DS_NAME_TYPE_UNKNOWN_STR;
    case WinError::ERROR_DS_NOT_AN_OBJECT:
        return ERROR_DS_NOT_AN_OBJECT_STR;
    case WinError::ERROR_DS_SEC_DESC_TOO_SHORT:
        return ERROR_DS_SEC_DESC_TOO_SHORT_STR;
    case WinError::ERROR_DS_SEC_DESC_INVALID:
        return ERROR_DS_SEC_DESC_INVALID_STR;
    case WinError::ERROR_DS_NO_DELETED_NAME:
        return ERROR_DS_NO_DELETED_NAME_STR;
    case WinError::ERROR_DS_SUBREF_MUST_HAVE_PARENT:
        return ERROR_DS_SUBREF_MUST_HAVE_PARENT_STR;
    case WinError::ERROR_DS_NCNAME_MUST_BE_NC:
        return ERROR_DS_NCNAME_MUST_BE_NC_STR;
    case WinError::ERROR_DS_CANT_ADD_SYSTEM_ONLY:
        return ERROR_DS_CANT_ADD_SYSTEM_ONLY_STR;
    case WinError::ERROR_DS_CLASS_MUST_BE_CONCRETE:
        return ERROR_DS_CLASS_MUST_BE_CONCRETE_STR;
    case WinError::ERROR_DS_INVALID_DMD:
        return ERROR_DS_INVALID_DMD_STR;
    case WinError::ERROR_DS_OBJ_GUID_EXISTS:
        return ERROR_DS_OBJ_GUID_EXISTS_STR;
    case WinError::ERROR_DS_NOT_ON_BACKLINK:
        return ERROR_DS_NOT_ON_BACKLINK_STR;
    case WinError::ERROR_DS_NO_CROSSREF_FOR_NC:
        return ERROR_DS_NO_CROSSREF_FOR_NC_STR;
    case WinError::ERROR_DS_SHUTTING_DOWN:
        return ERROR_DS_SHUTTING_DOWN_STR;
    case WinError::ERROR_DS_UNKNOWN_OPERATION:
        return ERROR_DS_UNKNOWN_OPERATION_STR;
    case WinError::ERROR_DS_INVALID_ROLE_OWNER:
        return ERROR_DS_INVALID_ROLE_OWNER_STR;
    case WinError::ERROR_DS_COULDNT_CONTACT_FSMO:
        return ERROR_DS_COULDNT_CONTACT_FSMO_STR;
    case WinError::ERROR_DS_CROSS_NC_DN_RENAME:
        return ERROR_DS_CROSS_NC_DN_RENAME_STR;
    case WinError::ERROR_DS_CANT_MOD_SYSTEM_ONLY:
        return ERROR_DS_CANT_MOD_SYSTEM_ONLY_STR;
    case WinError::ERROR_DS_REPLICATOR_ONLY:
        return ERROR_DS_REPLICATOR_ONLY_STR;
    case WinError::ERROR_DS_OBJ_CLASS_NOT_DEFINED:
        return ERROR_DS_OBJ_CLASS_NOT_DEFINED_STR;
    case WinError::ERROR_DS_OBJ_CLASS_NOT_SUBCLASS:
        return ERROR_DS_OBJ_CLASS_NOT_SUBCLASS_STR;
    case WinError::ERROR_DS_NAME_REFERENCE_INVALID:
        return ERROR_DS_NAME_REFERENCE_INVALID_STR;
    case WinError::ERROR_DS_CROSS_REF_EXISTS:
        return ERROR_DS_CROSS_REF_EXISTS_STR;
    case WinError::ERROR_DS_CANT_DEL_MASTER_CROSSREF:
        return ERROR_DS_CANT_DEL_MASTER_CROSSREF_STR;
    case WinError::ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD:
        return ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD_STR;
    case WinError::ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX:
        return ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX_STR;
    case WinError::ERROR_DS_DUP_RDN:
        return ERROR_DS_DUP_RDN_STR;
    case WinError::ERROR_DS_DUP_OID:
        return ERROR_DS_DUP_OID_STR;
    case WinError::ERROR_DS_DUP_MAPI_ID:
        return ERROR_DS_DUP_MAPI_ID_STR;
    case WinError::ERROR_DS_DUP_SCHEMA_ID_GUID:
        return ERROR_DS_DUP_SCHEMA_ID_GUID_STR;
    case WinError::ERROR_DS_DUP_LDAP_DISPLAY_NAME:
        return ERROR_DS_DUP_LDAP_DISPLAY_NAME_STR;
    case WinError::ERROR_DS_SEMANTIC_ATT_TEST:
        return ERROR_DS_SEMANTIC_ATT_TEST_STR;
    case WinError::ERROR_DS_SYNTAX_MISMATCH:
        return ERROR_DS_SYNTAX_MISMATCH_STR;
    case WinError::ERROR_DS_EXISTS_IN_MUST_HAVE:
        return ERROR_DS_EXISTS_IN_MUST_HAVE_STR;
    case WinError::ERROR_DS_EXISTS_IN_MAY_HAVE:
        return ERROR_DS_EXISTS_IN_MAY_HAVE_STR;
    case WinError::ERROR_DS_NONEXISTENT_MAY_HAVE:
        return ERROR_DS_NONEXISTENT_MAY_HAVE_STR;
    case WinError::ERROR_DS_NONEXISTENT_MUST_HAVE:
        return ERROR_DS_NONEXISTENT_MUST_HAVE_STR;
    case WinError::ERROR_DS_AUX_CLS_TEST_FAIL:
        return ERROR_DS_AUX_CLS_TEST_FAIL_STR;
    case WinError::ERROR_DS_NONEXISTENT_POSS_SUP:
        return ERROR_DS_NONEXISTENT_POSS_SUP_STR;
    case WinError::ERROR_DS_SUB_CLS_TEST_FAIL:
        return ERROR_DS_SUB_CLS_TEST_FAIL_STR;
    case WinError::ERROR_DS_BAD_RDN_ATT_ID_SYNTAX:
        return ERROR_DS_BAD_RDN_ATT_ID_SYNTAX_STR;
    case WinError::ERROR_DS_EXISTS_IN_AUX_CLS:
        return ERROR_DS_EXISTS_IN_AUX_CLS_STR;
    case WinError::ERROR_DS_EXISTS_IN_SUB_CLS:
        return ERROR_DS_EXISTS_IN_SUB_CLS_STR;
    case WinError::ERROR_DS_EXISTS_IN_POSS_SUP:
        return ERROR_DS_EXISTS_IN_POSS_SUP_STR;
    case WinError::ERROR_DS_RECALCSCHEMA_FAILED:
        return ERROR_DS_RECALCSCHEMA_FAILED_STR;
    case WinError::ERROR_DS_TREE_DELETE_NOT_FINISHED:
        return ERROR_DS_TREE_DELETE_NOT_FINISHED_STR;
    case WinError::ERROR_DS_CANT_DELETE:
        return ERROR_DS_CANT_DELETE_STR;
    case WinError::ERROR_DS_ATT_SCHEMA_REQ_ID:
        return ERROR_DS_ATT_SCHEMA_REQ_ID_STR;
    case WinError::ERROR_DS_BAD_ATT_SCHEMA_SYNTAX:
        return ERROR_DS_BAD_ATT_SCHEMA_SYNTAX_STR;
    case WinError::ERROR_DS_CANT_CACHE_ATT:
        return ERROR_DS_CANT_CACHE_ATT_STR;
    case WinError::ERROR_DS_CANT_CACHE_CLASS:
        return ERROR_DS_CANT_CACHE_CLASS_STR;
    case WinError::ERROR_DS_CANT_REMOVE_ATT_CACHE:
        return ERROR_DS_CANT_REMOVE_ATT_CACHE_STR;
    case WinError::ERROR_DS_CANT_REMOVE_CLASS_CACHE:
        return ERROR_DS_CANT_REMOVE_CLASS_CACHE_STR;
    case WinError::ERROR_DS_CANT_RETRIEVE_DN:
        return ERROR_DS_CANT_RETRIEVE_DN_STR;
    case WinError::ERROR_DS_MISSING_SUPREF:
        return ERROR_DS_MISSING_SUPREF_STR;
    case WinError::ERROR_DS_CANT_RETRIEVE_INSTANCE:
        return ERROR_DS_CANT_RETRIEVE_INSTANCE_STR;
    case WinError::ERROR_DS_CODE_INCONSISTENCY:
        return ERROR_DS_CODE_INCONSISTENCY_STR;
    case WinError::ERROR_DS_DATABASE_ERROR:
        return ERROR_DS_DATABASE_ERROR_STR;
    case WinError::ERROR_DS_GOVERNSID_MISSING:
        return ERROR_DS_GOVERNSID_MISSING_STR;
    case WinError::ERROR_DS_MISSING_EXPECTED_ATT:
        return ERROR_DS_MISSING_EXPECTED_ATT_STR;
    case WinError::ERROR_DS_NCNAME_MISSING_CR_REF:
        return ERROR_DS_NCNAME_MISSING_CR_REF_STR;
    case WinError::ERROR_DS_SECURITY_CHECKING_ERROR:
        return ERROR_DS_SECURITY_CHECKING_ERROR_STR;
    case WinError::ERROR_DS_SCHEMA_NOT_LOADED:
        return ERROR_DS_SCHEMA_NOT_LOADED_STR;
    case WinError::ERROR_DS_SCHEMA_ALLOC_FAILED:
        return ERROR_DS_SCHEMA_ALLOC_FAILED_STR;
    case WinError::ERROR_DS_ATT_SCHEMA_REQ_SYNTAX:
        return ERROR_DS_ATT_SCHEMA_REQ_SYNTAX_STR;
    case WinError::ERROR_DS_GCVERIFY_ERROR:
        return ERROR_DS_GCVERIFY_ERROR_STR;
    case WinError::ERROR_DS_DRA_SCHEMA_MISMATCH:
        return ERROR_DS_DRA_SCHEMA_MISMATCH_STR;
    case WinError::ERROR_DS_CANT_FIND_DSA_OBJ:
        return ERROR_DS_CANT_FIND_DSA_OBJ_STR;
    case WinError::ERROR_DS_CANT_FIND_EXPECTED_NC:
        return ERROR_DS_CANT_FIND_EXPECTED_NC_STR;
    case WinError::ERROR_DS_CANT_FIND_NC_IN_CACHE:
        return ERROR_DS_CANT_FIND_NC_IN_CACHE_STR;
    case WinError::ERROR_DS_CANT_RETRIEVE_CHILD:
        return ERROR_DS_CANT_RETRIEVE_CHILD_STR;
    case WinError::ERROR_DS_SECURITY_ILLEGAL_MODIFY:
        return ERROR_DS_SECURITY_ILLEGAL_MODIFY_STR;
    case WinError::ERROR_DS_CANT_REPLACE_HIDDEN_REC:
        return ERROR_DS_CANT_REPLACE_HIDDEN_REC_STR;
    case WinError::ERROR_DS_BAD_HIERARCHY_FILE:
        return ERROR_DS_BAD_HIERARCHY_FILE_STR;
    case WinError::ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED:
        return ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED_STR;
    case WinError::ERROR_DS_CONFIG_PARAM_MISSING:
        return ERROR_DS_CONFIG_PARAM_MISSING_STR;
    case WinError::ERROR_DS_COUNTING_AB_INDICES_FAILED:
        return ERROR_DS_COUNTING_AB_INDICES_FAILED_STR;
    case WinError::ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED:
        return ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED_STR;
    case WinError::ERROR_DS_INTERNAL_FAILURE:
        return ERROR_DS_INTERNAL_FAILURE_STR;
    case WinError::ERROR_DS_UNKNOWN_ERROR:
        return ERROR_DS_UNKNOWN_ERROR_STR;
    case WinError::ERROR_DS_ROOT_REQUIRES_CLASS_TOP:
        return ERROR_DS_ROOT_REQUIRES_CLASS_TOP_STR;
    case WinError::ERROR_DS_REFUSING_FSMO_ROLES:
        return ERROR_DS_REFUSING_FSMO_ROLES_STR;
    case WinError::ERROR_DS_MISSING_FSMO_SETTINGS:
        return ERROR_DS_MISSING_FSMO_SETTINGS_STR;
    case WinError::ERROR_DS_UNABLE_TO_SURRENDER_ROLES:
        return ERROR_DS_UNABLE_TO_SURRENDER_ROLES_STR;
    case WinError::ERROR_DS_DRA_GENERIC:
        return ERROR_DS_DRA_GENERIC_STR;
    case WinError::ERROR_DS_DRA_INVALID_PARAMETER:
        return ERROR_DS_DRA_INVALID_PARAMETER_STR;
    case WinError::ERROR_DS_DRA_BUSY:
        return ERROR_DS_DRA_BUSY_STR;
    case WinError::ERROR_DS_DRA_BAD_DN:
        return ERROR_DS_DRA_BAD_DN_STR;
    case WinError::ERROR_DS_DRA_BAD_NC:
        return ERROR_DS_DRA_BAD_NC_STR;
    case WinError::ERROR_DS_DRA_DN_EXISTS:
        return ERROR_DS_DRA_DN_EXISTS_STR;
    case WinError::ERROR_DS_DRA_INTERNAL_ERROR:
        return ERROR_DS_DRA_INTERNAL_ERROR_STR;
    case WinError::ERROR_DS_DRA_INCONSISTENT_DIT:
        return ERROR_DS_DRA_INCONSISTENT_DIT_STR;
    case WinError::ERROR_DS_DRA_CONNECTION_FAILED:
        return ERROR_DS_DRA_CONNECTION_FAILED_STR;
    case WinError::ERROR_DS_DRA_BAD_INSTANCE_TYPE:
        return ERROR_DS_DRA_BAD_INSTANCE_TYPE_STR;
    case WinError::ERROR_DS_DRA_OUT_OF_MEM:
        return ERROR_DS_DRA_OUT_OF_MEM_STR;
    case WinError::ERROR_DS_DRA_MAIL_PROBLEM:
        return ERROR_DS_DRA_MAIL_PROBLEM_STR;
    case WinError::ERROR_DS_DRA_REF_ALREADY_EXISTS:
        return ERROR_DS_DRA_REF_ALREADY_EXISTS_STR;
    case WinError::ERROR_DS_DRA_REF_NOT_FOUND:
        return ERROR_DS_DRA_REF_NOT_FOUND_STR;
    case WinError::ERROR_DS_DRA_OBJ_IS_REP_SOURCE:
        return ERROR_DS_DRA_OBJ_IS_REP_SOURCE_STR;
    case WinError::ERROR_DS_DRA_DB_ERROR:
        return ERROR_DS_DRA_DB_ERROR_STR;
    case WinError::ERROR_DS_DRA_NO_REPLICA:
        return ERROR_DS_DRA_NO_REPLICA_STR;
    case WinError::ERROR_DS_DRA_ACCESS_DENIED:
        return ERROR_DS_DRA_ACCESS_DENIED_STR;
    case WinError::ERROR_DS_DRA_NOT_SUPPORTED:
        return ERROR_DS_DRA_NOT_SUPPORTED_STR;
    case WinError::ERROR_DS_DRA_RPC_CANCELLED:
        return ERROR_DS_DRA_RPC_CANCELLED_STR;
    case WinError::ERROR_DS_DRA_SOURCE_DISABLED:
        return ERROR_DS_DRA_SOURCE_DISABLED_STR;
    case WinError::ERROR_DS_DRA_SINK_DISABLED:
        return ERROR_DS_DRA_SINK_DISABLED_STR;
    case WinError::ERROR_DS_DRA_NAME_COLLISION:
        return ERROR_DS_DRA_NAME_COLLISION_STR;
    case WinError::ERROR_DS_DRA_SOURCE_REINSTALLED:
        return ERROR_DS_DRA_SOURCE_REINSTALLED_STR;
    case WinError::ERROR_DS_DRA_MISSING_PARENT:
        return ERROR_DS_DRA_MISSING_PARENT_STR;
    case WinError::ERROR_DS_DRA_PREEMPTED:
        return ERROR_DS_DRA_PREEMPTED_STR;
    case WinError::ERROR_DS_DRA_ABANDON_SYNC:
        return ERROR_DS_DRA_ABANDON_SYNC_STR;
    case WinError::ERROR_DS_DRA_SHUTDOWN:
        return ERROR_DS_DRA_SHUTDOWN_STR;
    case WinError::ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET:
        return ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET_STR;
    case WinError::ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA:
        return ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA_STR;
    case WinError::ERROR_DS_DRA_EXTN_CONNECTION_FAILED:
        return ERROR_DS_DRA_EXTN_CONNECTION_FAILED_STR;
    case WinError::ERROR_DS_INSTALL_SCHEMA_MISMATCH:
        return ERROR_DS_INSTALL_SCHEMA_MISMATCH_STR;
    case WinError::ERROR_DS_DUP_LINK_ID:
        return ERROR_DS_DUP_LINK_ID_STR;
    case WinError::ERROR_DS_NAME_ERROR_RESOLVING:
        return ERROR_DS_NAME_ERROR_RESOLVING_STR;
    case WinError::ERROR_DS_NAME_ERROR_NOT_FOUND:
        return ERROR_DS_NAME_ERROR_NOT_FOUND_STR;
    case WinError::ERROR_DS_NAME_ERROR_NOT_UNIQUE:
        return ERROR_DS_NAME_ERROR_NOT_UNIQUE_STR;
    case WinError::ERROR_DS_NAME_ERROR_NO_MAPPING:
        return ERROR_DS_NAME_ERROR_NO_MAPPING_STR;
    case WinError::ERROR_DS_NAME_ERROR_DOMAIN_ONLY:
        return ERROR_DS_NAME_ERROR_DOMAIN_ONLY_STR;
    case WinError::ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING:
        return ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING_STR;
    case WinError::ERROR_DS_CONSTRUCTED_ATT_MOD:
        return ERROR_DS_CONSTRUCTED_ATT_MOD_STR;
    case WinError::ERROR_DS_WRONG_OM_OBJ_CLASS:
        return ERROR_DS_WRONG_OM_OBJ_CLASS_STR;
    case WinError::ERROR_DS_DRA_REPL_PENDING:
        return ERROR_DS_DRA_REPL_PENDING_STR;
    case WinError::ERROR_DS_DS_REQUIRED:
        return ERROR_DS_DS_REQUIRED_STR;
    case WinError::ERROR_DS_INVALID_LDAP_DISPLAY_NAME:
        return ERROR_DS_INVALID_LDAP_DISPLAY_NAME_STR;
    case WinError::ERROR_DS_NON_BASE_SEARCH:
        return ERROR_DS_NON_BASE_SEARCH_STR;
    case WinError::ERROR_DS_CANT_RETRIEVE_ATTS:
        return ERROR_DS_CANT_RETRIEVE_ATTS_STR;
    case WinError::ERROR_DS_BACKLINK_WITHOUT_LINK:
        return ERROR_DS_BACKLINK_WITHOUT_LINK_STR;
    case WinError::ERROR_DS_EPOCH_MISMATCH:
        return ERROR_DS_EPOCH_MISMATCH_STR;
    case WinError::ERROR_DS_SRC_NAME_MISMATCH:
        return ERROR_DS_SRC_NAME_MISMATCH_STR;
    case WinError::ERROR_DS_SRC_AND_DST_NC_IDENTICAL:
        return ERROR_DS_SRC_AND_DST_NC_IDENTICAL_STR;
    case WinError::ERROR_DS_DST_NC_MISMATCH:
        return ERROR_DS_DST_NC_MISMATCH_STR;
    case WinError::ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC:
        return ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC_STR;
    case WinError::ERROR_DS_SRC_GUID_MISMATCH:
        return ERROR_DS_SRC_GUID_MISMATCH_STR;
    case WinError::ERROR_DS_CANT_MOVE_DELETED_OBJECT:
        return ERROR_DS_CANT_MOVE_DELETED_OBJECT_STR;
    case WinError::ERROR_DS_PDC_OPERATION_IN_PROGRESS:
        return ERROR_DS_PDC_OPERATION_IN_PROGRESS_STR;
    case WinError::ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD:
        return ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD_STR;
    case WinError::ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION:
        return ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION_STR;
    case WinError::ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS:
        return ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS_STR;
    case WinError::ERROR_DS_NC_MUST_HAVE_NC_PARENT:
        return ERROR_DS_NC_MUST_HAVE_NC_PARENT_STR;
    case WinError::ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE:
        return ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_STR;
    case WinError::ERROR_DS_DST_DOMAIN_NOT_NATIVE:
        return ERROR_DS_DST_DOMAIN_NOT_NATIVE_STR;
    case WinError::ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER:
        return ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER_STR;
    case WinError::ERROR_DS_CANT_MOVE_ACCOUNT_GROUP:
        return ERROR_DS_CANT_MOVE_ACCOUNT_GROUP_STR;
    case WinError::ERROR_DS_CANT_MOVE_RESOURCE_GROUP:
        return ERROR_DS_CANT_MOVE_RESOURCE_GROUP_STR;
    case WinError::ERROR_DS_INVALID_SEARCH_FLAG:
        return ERROR_DS_INVALID_SEARCH_FLAG_STR;
    case WinError::ERROR_DS_NO_TREE_DELETE_ABOVE_NC:
        return ERROR_DS_NO_TREE_DELETE_ABOVE_NC_STR;
    case WinError::ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE:
        return ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE_STR;
    case WinError::ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE:
        return ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE_STR;
    case WinError::ERROR_DS_SAM_INIT_FAILURE:
        return ERROR_DS_SAM_INIT_FAILURE_STR;
    case WinError::ERROR_DS_SENSITIVE_GROUP_VIOLATION:
        return ERROR_DS_SENSITIVE_GROUP_VIOLATION_STR;
    case WinError::ERROR_DS_CANT_MOD_PRIMARYGROUPID:
        return ERROR_DS_CANT_MOD_PRIMARYGROUPID_STR;
    case WinError::ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD:
        return ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD_STR;
    case WinError::ERROR_DS_NONSAFE_SCHEMA_CHANGE:
        return ERROR_DS_NONSAFE_SCHEMA_CHANGE_STR;
    case WinError::ERROR_DS_SCHEMA_UPDATE_DISALLOWED:
        return ERROR_DS_SCHEMA_UPDATE_DISALLOWED_STR;
    case WinError::ERROR_DS_CANT_CREATE_UNDER_SCHEMA:
        return ERROR_DS_CANT_CREATE_UNDER_SCHEMA_STR;
    case WinError::ERROR_DS_INSTALL_NO_SRC_SCH_VERSION:
        return ERROR_DS_INSTALL_NO_SRC_SCH_VERSION_STR;
    case WinError::ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE:
        return ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE_STR;
    case WinError::ERROR_DS_INVALID_GROUP_TYPE:
        return ERROR_DS_INVALID_GROUP_TYPE_STR;
    case WinError::ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN:
        return ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN_STR;
    case WinError::ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN:
        return ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN_STR;
    case WinError::ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER:
        return ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER_STR;
    case WinError::ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER:
        return ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER_STR;
    case WinError::ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER:
        return ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER_STR;
    case WinError::ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER:
        return ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER_STR;
    case WinError::ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER:
        return ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER_STR;
    case WinError::ERROR_DS_HAVE_PRIMARY_MEMBERS:
        return ERROR_DS_HAVE_PRIMARY_MEMBERS_STR;
    case WinError::ERROR_DS_STRING_SD_CONVERSION_FAILED:
        return ERROR_DS_STRING_SD_CONVERSION_FAILED_STR;
    case WinError::ERROR_DS_NAMING_MASTER_GC:
        return ERROR_DS_NAMING_MASTER_GC_STR;
    case WinError::ERROR_DS_LOOKUP_FAILURE:
        return ERROR_DS_LOOKUP_FAILURE_STR;
    case WinError::ERROR_DS_COULDNT_UPDATE_SPNS:
        return ERROR_DS_COULDNT_UPDATE_SPNS_STR;
    case WinError::ERROR_DS_CANT_RETRIEVE_SD:
        return ERROR_DS_CANT_RETRIEVE_SD_STR;
    case WinError::ERROR_DS_KEY_NOT_UNIQUE:
        return ERROR_DS_KEY_NOT_UNIQUE_STR;
    case WinError::ERROR_DS_WRONG_LINKED_ATT_SYNTAX:
        return ERROR_DS_WRONG_LINKED_ATT_SYNTAX_STR;
    case WinError::ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD:
        return ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD_STR;
    case WinError::ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY:
        return ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY_STR;
    case WinError::ERROR_DS_CANT_START:
        return ERROR_DS_CANT_START_STR;
    case WinError::ERROR_DS_INIT_FAILURE:
        return ERROR_DS_INIT_FAILURE_STR;
    case WinError::ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION:
        return ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION_STR;
    case WinError::ERROR_DS_SOURCE_DOMAIN_IN_FOREST:
        return ERROR_DS_SOURCE_DOMAIN_IN_FOREST_STR;
    case WinError::ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST:
        return ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST_STR;
    case WinError::ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED:
        return ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED_STR;
    case WinError::ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN:
        return ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN_STR;
    case WinError::ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER:
        return ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER_STR;
    case WinError::ERROR_DS_SRC_SID_EXISTS_IN_FOREST:
        return ERROR_DS_SRC_SID_EXISTS_IN_FOREST_STR;
    case WinError::ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH:
        return ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH_STR;
    case WinError::ERROR_SAM_INIT_FAILURE:
        return ERROR_SAM_INIT_FAILURE_STR;
    case WinError::ERROR_DS_DRA_SCHEMA_INFO_SHIP:
        return ERROR_DS_DRA_SCHEMA_INFO_SHIP_STR;
    case WinError::ERROR_DS_DRA_SCHEMA_CONFLICT:
        return ERROR_DS_DRA_SCHEMA_CONFLICT_STR;
    case WinError::ERROR_DS_DRA_EARLIER_SCHEMA_CONLICT:
        return ERROR_DS_DRA_EARLIER_SCHEMA_CONLICT_STR;
    case WinError::ERROR_DS_DRA_OBJ_NC_MISMATCH:
        return ERROR_DS_DRA_OBJ_NC_MISMATCH_STR;
    case WinError::ERROR_DS_NC_STILL_HAS_DSAS:
        return ERROR_DS_NC_STILL_HAS_DSAS_STR;
    case WinError::ERROR_DS_GC_REQUIRED:
        return ERROR_DS_GC_REQUIRED_STR;
    case WinError::ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY:
        return ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY_STR;
    case WinError::ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS:
        return ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS_STR;
    case WinError::ERROR_DS_CANT_ADD_TO_GC:
        return ERROR_DS_CANT_ADD_TO_GC_STR;
    case WinError::ERROR_DS_NO_CHECKPOINT_WITH_PDC:
        return ERROR_DS_NO_CHECKPOINT_WITH_PDC_STR;
    case WinError::ERROR_DS_SOURCE_AUDITING_NOT_ENABLED:
        return ERROR_DS_SOURCE_AUDITING_NOT_ENABLED_STR;
    case WinError::ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC:
        return ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC_STR;
    case WinError::ERROR_DS_INVALID_NAME_FOR_SPN:
        return ERROR_DS_INVALID_NAME_FOR_SPN_STR;
    case WinError::ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS:
        return ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS_STR;
    case WinError::ERROR_DS_UNICODEPWD_NOT_IN_QUOTES:
        return ERROR_DS_UNICODEPWD_NOT_IN_QUOTES_STR;
    case WinError::ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED:
        return ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED_STR;
    case WinError::ERROR_DS_MUST_BE_RUN_ON_DST_DC:
        return ERROR_DS_MUST_BE_RUN_ON_DST_DC_STR;
    case WinError::ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER:
        return ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER_STR;
    case WinError::ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ:
        return ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ_STR;
    case WinError::ERROR_DS_INIT_FAILURE_CONSOLE:
        return ERROR_DS_INIT_FAILURE_CONSOLE_STR;
    case WinError::ERROR_DS_SAM_INIT_FAILURE_CONSOLE:
        return ERROR_DS_SAM_INIT_FAILURE_CONSOLE_STR;
    case WinError::ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4:
        return ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4_STR;
    case WinError::ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER:
        return ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER_STR;
    case WinError::DNS_ERROR_RCODE_FORMAT_ERROR:
        return DNS_ERROR_RCODE_FORMAT_ERROR_STR;
    case WinError::DNS_ERROR_RCODE_SERVER_FAILURE:
        return DNS_ERROR_RCODE_SERVER_FAILURE_STR;
    case WinError::DNS_ERROR_RCODE_NAME_ERROR:
        return DNS_ERROR_RCODE_NAME_ERROR_STR;
    case WinError::DNS_ERROR_RCODE_NOT_IMPLEMENTED:
        return DNS_ERROR_RCODE_NOT_IMPLEMENTED_STR;
    case WinError::DNS_ERROR_RCODE_REFUSED:
        return DNS_ERROR_RCODE_REFUSED_STR;
    case WinError::DNS_ERROR_RCODE_YXDOMAIN:
        return DNS_ERROR_RCODE_YXDOMAIN_STR;
    case WinError::DNS_ERROR_RCODE_YXRRSET:
        return DNS_ERROR_RCODE_YXRRSET_STR;
    case WinError::DNS_ERROR_RCODE_NXRRSET:
        return DNS_ERROR_RCODE_NXRRSET_STR;
    case WinError::DNS_ERROR_RCODE_NOTAUTH:
        return DNS_ERROR_RCODE_NOTAUTH_STR;
    case WinError::DNS_ERROR_RCODE_NOTZONE:
        return DNS_ERROR_RCODE_NOTZONE_STR;
    case WinError::DNS_ERROR_RCODE_BADSIG:
        return DNS_ERROR_RCODE_BADSIG_STR;
    case WinError::DNS_ERROR_RCODE_BADKEY:
        return DNS_ERROR_RCODE_BADKEY_STR;
    case WinError::DNS_ERROR_RCODE_BADTIME:
        return DNS_ERROR_RCODE_BADTIME_STR;
    case WinError::DNS_INFO_NO_RECORDS:
        return DNS_INFO_NO_RECORDS_STR;
    case WinError::DNS_ERROR_BAD_PACKET:
        return DNS_ERROR_BAD_PACKET_STR;
    case WinError::DNS_ERROR_NO_PACKET:
        return DNS_ERROR_NO_PACKET_STR;
    case WinError::DNS_ERROR_RCODE:
        return DNS_ERROR_RCODE_STR;
    case WinError::DNS_ERROR_UNSECURE_PACKET:
        return DNS_ERROR_UNSECURE_PACKET_STR;
    case WinError::DNS_REQUEST_PENDING:
        return DNS_REQUEST_PENDING_STR;
    case WinError::DNS_ERROR_INVALID_TYPE:
        return DNS_ERROR_INVALID_TYPE_STR;
    case WinError::DNS_ERROR_INVALID_IP_ADDRESS:
        return DNS_ERROR_INVALID_IP_ADDRESS_STR;
    case WinError::DNS_ERROR_INVALID_PROPERTY:
        return DNS_ERROR_INVALID_PROPERTY_STR;
    case WinError::DNS_ERROR_TRY_AGAIN_LATER:
        return DNS_ERROR_TRY_AGAIN_LATER_STR;
    case WinError::DNS_ERROR_NOT_UNIQUE:
        return DNS_ERROR_NOT_UNIQUE_STR;
    case WinError::DNS_ERROR_NON_RFC_NAME:
        return DNS_ERROR_NON_RFC_NAME_STR;
    case WinError::DNS_STATUS_FQDN:
        return DNS_STATUS_FQDN_STR;
    case WinError::DNS_STATUS_DOTTED_NAME:
        return DNS_STATUS_DOTTED_NAME_STR;
    case WinError::DNS_STATUS_SINGLE_PART_NAME:
        return DNS_STATUS_SINGLE_PART_NAME_STR;
    case WinError::DNS_ERROR_INVALID_NAME_CHAR:
        return DNS_ERROR_INVALID_NAME_CHAR_STR;
    case WinError::DNS_ERROR_NUMERIC_NAME:
        return DNS_ERROR_NUMERIC_NAME_STR;
    case WinError::DNS_ERROR_ZONE_DOES_NOT_EXIST:
        return DNS_ERROR_ZONE_DOES_NOT_EXIST_STR;
    case WinError::DNS_ERROR_NO_ZONE_INFO:
        return DNS_ERROR_NO_ZONE_INFO_STR;
    case WinError::DNS_ERROR_INVALID_ZONE_OPERATION:
        return DNS_ERROR_INVALID_ZONE_OPERATION_STR;
    case WinError::DNS_ERROR_ZONE_CONFIGURATION_ERROR:
        return DNS_ERROR_ZONE_CONFIGURATION_ERROR_STR;
    case WinError::DNS_ERROR_ZONE_HAS_NO_SOA_RECORD:
        return DNS_ERROR_ZONE_HAS_NO_SOA_RECORD_STR;
    case WinError::DNS_ERROR_ZONE_HAS_NO_NS_RECORDS:
        return DNS_ERROR_ZONE_HAS_NO_NS_RECORDS_STR;
    case WinError::DNS_ERROR_ZONE_LOCKED:
        return DNS_ERROR_ZONE_LOCKED_STR;
    case WinError::DNS_ERROR_ZONE_CREATION_FAILED:
        return DNS_ERROR_ZONE_CREATION_FAILED_STR;
    case WinError::DNS_ERROR_ZONE_ALREADY_EXISTS:
        return DNS_ERROR_ZONE_ALREADY_EXISTS_STR;
    case WinError::DNS_ERROR_AUTOZONE_ALREADY_EXISTS:
        return DNS_ERROR_AUTOZONE_ALREADY_EXISTS_STR;
    case WinError::DNS_ERROR_INVALID_ZONE_TYPE:
        return DNS_ERROR_INVALID_ZONE_TYPE_STR;
    case WinError::DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP:
        return DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP_STR;
    case WinError::DNS_ERROR_ZONE_NOT_SECONDARY:
        return DNS_ERROR_ZONE_NOT_SECONDARY_STR;
    case WinError::DNS_ERROR_NEED_SECONDARY_ADDRESSES:
        return DNS_ERROR_NEED_SECONDARY_ADDRESSES_STR;
    case WinError::DNS_ERROR_WINS_INIT_FAILED:
        return DNS_ERROR_WINS_INIT_FAILED_STR;
    case WinError::DNS_ERROR_NEED_WINS_SERVERS:
        return DNS_ERROR_NEED_WINS_SERVERS_STR;
    case WinError::DNS_ERROR_NBSTAT_INIT_FAILED:
        return DNS_ERROR_NBSTAT_INIT_FAILED_STR;
    case WinError::DNS_ERROR_SOA_DELETE_INVALID:
        return DNS_ERROR_SOA_DELETE_INVALID_STR;
    case WinError::DNS_ERROR_PRIMARY_REQUIRES_DATAFILE:
        return DNS_ERROR_PRIMARY_REQUIRES_DATAFILE_STR;
    case WinError::DNS_ERROR_INVALID_DATAFILE_NAME:
        return DNS_ERROR_INVALID_DATAFILE_NAME_STR;
    case WinError::DNS_ERROR_DATAFILE_OPEN_FAILURE:
        return DNS_ERROR_DATAFILE_OPEN_FAILURE_STR;
    case WinError::DNS_ERROR_FILE_WRITEBACK_FAILED:
        return DNS_ERROR_FILE_WRITEBACK_FAILED_STR;
    case WinError::DNS_ERROR_DATAFILE_PARSING:
        return DNS_ERROR_DATAFILE_PARSING_STR;
    case WinError::DNS_ERROR_RECORD_DOES_NOT_EXIST:
        return DNS_ERROR_RECORD_DOES_NOT_EXIST_STR;
    case WinError::DNS_ERROR_RECORD_FORMAT:
        return DNS_ERROR_RECORD_FORMAT_STR;
    case WinError::DNS_ERROR_NODE_CREATION_FAILED:
        return DNS_ERROR_NODE_CREATION_FAILED_STR;
    case WinError::DNS_ERROR_UNKNOWN_RECORD_TYPE:
        return DNS_ERROR_UNKNOWN_RECORD_TYPE_STR;
    case WinError::DNS_ERROR_RECORD_TIMED_OUT:
        return DNS_ERROR_RECORD_TIMED_OUT_STR;
    case WinError::DNS_ERROR_NAME_NOT_IN_ZONE:
        return DNS_ERROR_NAME_NOT_IN_ZONE_STR;
    case WinError::DNS_ERROR_CNAME_LOOP:
        return DNS_ERROR_CNAME_LOOP_STR;
    case WinError::DNS_ERROR_NODE_IS_CNAME:
        return DNS_ERROR_NODE_IS_CNAME_STR;
    case WinError::DNS_ERROR_CNAME_COLLISION:
        return DNS_ERROR_CNAME_COLLISION_STR;
    case WinError::DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT:
        return DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT_STR;
    case WinError::DNS_ERROR_RECORD_ALREADY_EXISTS:
        return DNS_ERROR_RECORD_ALREADY_EXISTS_STR;
    case WinError::DNS_ERROR_SECONDARY_DATA:
        return DNS_ERROR_SECONDARY_DATA_STR;
    case WinError::DNS_ERROR_NO_CREATE_CACHE_DATA:
        return DNS_ERROR_NO_CREATE_CACHE_DATA_STR;
    case WinError::DNS_ERROR_NAME_DOES_NOT_EXIST:
        return DNS_ERROR_NAME_DOES_NOT_EXIST_STR;
    case WinError::DNS_WARNING_PTR_CREATE_FAILED:
        return DNS_WARNING_PTR_CREATE_FAILED_STR;
    case WinError::DNS_WARNING_DOMAIN_UNDELETED:
        return DNS_WARNING_DOMAIN_UNDELETED_STR;
    case WinError::DNS_ERROR_DS_UNAVAILABLE:
        return DNS_ERROR_DS_UNAVAILABLE_STR;
    case WinError::DNS_ERROR_DS_ZONE_ALREADY_EXISTS:
        return DNS_ERROR_DS_ZONE_ALREADY_EXISTS_STR;
    case WinError::DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE:
        return DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE_STR;
    case WinError::DNS_INFO_AXFR_COMPLETE:
        return DNS_INFO_AXFR_COMPLETE_STR;
    case WinError::DNS_ERROR_AXFR:
        return DNS_ERROR_AXFR_STR;
    case WinError::DNS_INFO_ADDED_LOCAL_WINS:
        return DNS_INFO_ADDED_LOCAL_WINS_STR;
    case WinError::DNS_STATUS_CONTINUE_NEEDED:
        return DNS_STATUS_CONTINUE_NEEDED_STR;
    case WinError::DNS_ERROR_NO_TCPIP:
        return DNS_ERROR_NO_TCPIP_STR;
    case WinError::DNS_ERROR_NO_DNS_SERVERS:
        return DNS_ERROR_NO_DNS_SERVERS_STR;
    }

    return WIN_ERROR_UNKNOWN_STR;
}

std::ostream& operator<<(std::ostream& os, WinError err) {
    os << to_string(err);
    return os;
}

} // namespace windows
} // namespace introvirt