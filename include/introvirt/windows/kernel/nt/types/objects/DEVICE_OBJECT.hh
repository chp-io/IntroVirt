/*
 * Copyright 2021 Assured Information Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once

#include "OBJECT.hh"

#include <introvirt/windows/kernel/nt/const/DeviceType.hh>

#include <introvirt/windows/kernel/nt/fwd.hh>

#include <cstdint>
#include <string>

namespace introvirt {
namespace windows {
namespace nt {

/**
 * @brief Class for the Windows NT DEVICE_OBJECT structure
 *
 * See <a
 * href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/ns-wdm-_device_object">here</a>
 *
 */
class DEVICE_OBJECT : public OBJECT {
  public:
    class DeviceCharacteristics {
      public:
        bool FILE_REMOVABLE_MEDIA() const;
        bool FILE_READ_ONLY_DEVICE() const;
        bool FILE_FLOPPY_DISKETTE() const;
        bool FILE_WRITE_ONCE_MEDIA() const;
        bool FILE_REMOTE_DEVICE() const;
        bool FILE_DEVICE_IS_MOUNTED() const;
        bool FILE_VIRTUAL_VOLUME() const;
        bool FILE_AUTOGENERATED_DEVICE_NAME() const;
        bool FILE_DEVICE_SECURE_OPEN() const;
        bool FILE_CHARACTERISTIC_PNP_DEVICE() const;
        bool FILE_CHARACTERISTIC_TS_DEVICE() const;
        bool FILE_CHARACTERISTIC_WEBDAV_DEVICE() const;
        bool FILE_CHARACTERISTIC_CSV() const;
        bool FILE_DEVICE_ALLOW_APPCONTAINER_TRAVERSAL() const;
        bool FILE_PORTABLE_DEVICE() const;
        uint32_t value() const { return value_; }

        explicit DeviceCharacteristics(uint32_t value) : value_(value) {}

      private:
        const uint32_t value_;
    };

    /**
     * @brief Get the type of device
     */
    virtual nt::DeviceType DeviceType() const = 0;

    /**
     * @returns The device name
     */
    virtual std::string DeviceName() const = 0;

    /**
     * @brief Get the DRIVER_OBJECT associated with this device
     */
    virtual const DRIVER_OBJECT& DriverObject() const = 0;

    static std::shared_ptr<DEVICE_OBJECT> make_shared(const NtKernel& kernel,
                                                      const GuestVirtualAddress& gva);

    static std::shared_ptr<DEVICE_OBJECT>
    make_shared(const NtKernel& kernel, std::unique_ptr<OBJECT_HEADER>&& object_header);

    virtual ~DEVICE_OBJECT() = default;
};

} /* namespace nt */
} /* namespace windows */
} /* namespace introvirt */
