/*
 * Copyright 2021 Assured Information Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#pragma once

#include <introvirt/windows/pe/types/IMAGE_FILE_HEADER.hh>

#include <introvirt/fwd.hh>

#include <cstdint>
#include <memory>

namespace introvirt {
namespace windows {
namespace nt {

/**
 * See http://msdn.microsoft.com/en-us/library/windows/hardware/ff550918%28v=vs.85%29.aspx
 */
class DBGKD_GET_VERSION64 {
  public:
    /**
     * @brief Parser for the DBGKD_GET_VERSION64::Flags field
     */
    class DBGKD_VERS_FLAG {
      public:
        /**
         *  @returns True if the target kernel was compiled with support for multiple processors.
         */
        bool MP() const;
        /**
         *  @returns True if the list DebuggerDataList is valid.
         */
        bool DATA() const;
        /**
         *  @returns True if the target uses 64-bit pointers.
         */
        bool PTR64() const;
        /**
         *  @returns True if the debugger's memory cache is active.
         */
        bool NOMM() const;
        /**
         *  @returns True if the target supports hardware stepping.
         */
        bool HSS() const;
        /**
         *  @returns True if multiple operating system partitions exist.
         */
        bool PARTITIONS() const;

        explicit DBGKD_VERS_FLAG(uint16_t value);
        explicit operator uint16_t() const;

      private:
        uint16_t value_;
    };

    /**
     * Should be 0xF for a free build, 0xC for a checked build
     *
     * @returns The MajorVersion field
     */
    virtual uint16_t MajorVersion() const = 0;

    /**
     * @returns The operating system build number
     */
    virtual uint16_t MinorVersion() const = 0;

    /**
     * @returns The protocol version
     */
    virtual uint16_t ProtocolVersion() const = 0;

    /**
     * @brief Get the Flags field
     *
     * @returns The wrapper around the Flags field
     */
    virtual DBGKD_VERS_FLAG Flags() const = 0;

    /**
     * @returns The architecture of the machine
     */
    virtual pe::MachineType MachineType() const = 0;

    /**
     * @returns one plus the highest number for a debugger packet type recognized by the target
     */
    virtual uint8_t MaxPacketType() const = 0;

    /**
     * @returns one plus the highest number for a state change generated by the target
     */
    virtual uint8_t MaxStateChange() const = 0;

    /**
     * @returns one more that the highest number, recognized by the target, for a command to
     * manipulate the target
     */
    virtual uint8_t MaxManipulate() const = 0;

    /**
     * @returns an indication if the target is in simulated execution
     */
    virtual uint8_t Simulation() const = 0;

    /**
     * @returns The base address of the kernel
     */
    virtual uint64_t KernelBase() const = 0;

    /**
     * @returns The value of the kernel's PsLoadedModuleList
     */
    virtual uint64_t PsLoadedModuleList() const = 0;

    /**
     * @brief Destroy the instance
     */
    virtual ~DBGKD_GET_VERSION64() = default;
};

} /* namespace nt */
} /* namespace windows */
} /* namespace introvirt */
