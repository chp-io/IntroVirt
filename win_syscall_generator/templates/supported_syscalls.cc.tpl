/*
 * Copyright 2021 Assured Information Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This file is automatically generated. Do not edit. */
#include <introvirt/windows/kernel/SystemCallIndex.hh>

#include <map>
#include <set>
#include <string>

namespace introvirt {
namespace windows {

std::set<SystemCallIndex> supported_syscalls_set = {
    // ntdll.dll
{% for name in ntdata -%}
{%- if not ntdata[name].get('helper_base') -%} 
    SystemCallIndex::{{name}},
{%- endif %}
{%- endfor %}

    // user32.dll
{% for name in win32kdata -%}
{%- if not win32kdata[name].get('helper_base') -%} 
    SystemCallIndex::{{name}},
{%- endif %}
{%- endfor %}

};

std::set<std::string> syscall_categories_set = {
{% for category in categories|sort -%}
    "{{ category }}",
{%- endfor %}
};

std::multimap<std::string, SystemCallIndex> syscall_categories_map = {
{% for category in categories|sort -%}
    {% for call in categories[category]|sort -%}
    { "{{ category }}", SystemCallIndex::{{ call }} },
    {%- endfor %}
{%- endfor %}
};

} /* namespace windows */
} /* namespace introvirt */ 
