/*
 * Copyright 2021 Assured Information Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This file is automatically generated. Do not edit. */
#pragma once

#include "{{ parent_name }}.hh"

{%- block includes %}
{%- for path in includes %}
#include {{ path }}
{%- endfor %}
{%- endblock includes %}

#include <memory>

namespace introvirt {
namespace windows {
namespace {{ namespace }} {

/**
 * @brief Handler class for the {{ className }} system call
 */
class {{ className }} : public {{ parent_name }} {
  public:
{%- if arguments %}
{%- block getters %}
    /* Direct parameter getters */

{% for arg in arguments %}
    /**
     * @brief Getter for {{arg['functionName']}}
     *
     * @return The {{ "value of the" if not arg.get('pointer') else "address pointed to by the the" }} {{ arg['functionName'] }} parameter
     */
    virtual {{ arg['type'] if not arg.get('pointer') else 'GuestVirtualAddress' }} {{arg['functionName']}}() const = 0;
{%- endfor %}
{%- endblock %}
{%- block setters %}

    /* Direct parameter setters */

{% for arg in arguments %}
    /**
     * @brief Setter for {{arg['functionName']}}
     *
     * @param {{arg['variableName']}} The {{ "value" if not arg.get('pointer') else "address" }} to set for the {{ arg['functionName'] }} parameter
     */
    virtual void {{arg['functionName']}}({{ arg['type'] if not arg.get('pointer') else 'const GuestVirtualAddress&' }} {{arg['variableName']}}) = 0;
{%- endfor %}
{%- endblock %}

{%- if return_type != "NTSTATUS" and return_type != "void" %}
    /**
     * @brief Get the result of the call
     * 
     * @throw InvalidMethodException if the call has not yet returned
     */
    virtual {{ return_type }} result() const = 0;

    /**
     * @brief Set the result of the calls
     *
     * @throw InvalidMethodException if the call has not yet returned
     */
     virtual void result({{ return_type }} value) = 0;
{% endif %}

{%- block helpers %}
{%- if has_helpers %}

    /* Helper methods */
    {%- for arg in arguments %}
    {%- if arg['override_helper'] or not arg['override'] %}
        {%- if arg.get('pointer') and 'helper' in arg %}
            {%- if arg['helper']['mode'] == 'direct' or arg['helper']['mode'] == 'copy' %}
    virtual {{arg['helper']['type']}} {{arg['name']}}() const = 0;
    virtual void {{arg['name']}}({{arg['helper']['type']}} {{arg['name']}}) = 0;
            {%- elif arg['helper']['mode'] == 'complex' %}
    virtual const {{arg['helper']['type']}}* {{arg['name']}}() const = 0;
    virtual {{arg['helper']['type']}}* {{arg['name']}}() = 0;
            {%- endif %}
        {%- endif %}
    {%- endif %}
    {%- endfor %}
{%- endif %}
{%- endblock %}
{%- endif %}

{% if not helper_base and not skip_injector %}
    /*
     * System call injection support. You probably want to use inject::system_call<{{ className }}>.
     */
    static {{ return_type }} inject({% for arg in signature %}
        {%- if arg.get('pointer') -%}
            {%- if arg.get('use_address_for_injection') -%}
            const GuestVirtualAddress& {{ arg['variableName'] -}}
            {%- elif 'helper' in arg -%}
            {{ 'const ' if not arg.get('out') }}{{ arg['helper']['type'] }}{{'*' if arg.get('optional') else '&'}}
            {{- ' ' -}}
            {{ arg['name'] -}}
            {%- else -%}
            const GuestVirtualAddress& {{ arg['variableName'] -}}
            {%- endif -%}
        {%- else -%}
            {%- if arg['type'] == 'VOID' %}
                {#- TODO: Replace this if we add an abstraction for pointers besides uint64_t -#}
                {{- 'uint64_t' -}}
            {% else %}
                {{- arg['type'] -}}
            {% endif %}

            {{- ' ' -}}
            {{ arg['variableName'] if arg.get('pointer') else arg['name'] -}}
        {%- endif -%}

        {%- if not loop.last %}, {% endif -%}
    {%- endfor %});
{%- endif %}
};

} /* namespace {{ namespace }} */
} /* namespace windows */
} /* namespace introvirt */

